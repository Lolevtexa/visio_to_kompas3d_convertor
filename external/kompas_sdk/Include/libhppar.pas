unit LibHpPar;

interface
uses
  Windows, SysUtils, OleCtrls;

const
  LB_VERSION = 1; // Версия интерфейса библиотеки

//-------------------------------------------------------------------------------
// Типы внешних интерфейсов
// ---
type
LibObjInterfaceTypeEnum = TOleEnum;
const
  idd_ILibHPObject         = 1; // Интерфейс хот-точек                                                ILibHPObject, ILibHPObject1
  idd_ILibExternalObject   = 2; // Интерфейс внеших воздействий                                       ILibExternalObject
  idd_ILibPropertyObject   = 3; // Интерфейс объекта со свойствами отображаемыми в окне свойств       ILibPropertyObject
  idd_ILibPropertyObject3D = 4; // Интерфейс 3D объекта со свойствами отображаемыми в окне свойств    ILibPropertyObject


//-------------------------------------------------------------------------------
// Типы горячих точек
// ---
type
ksHotPointEnum = TOleEnum;
const
  ksHPDefault           = -1;
  ksHPNormal            =  0; // обычный
  ksHPSmall             =  1; // маленький
  ksHPRing              =  2; // изменение угла поворота
  ksHPBiDirArrow        =  3; // изменение длины
  ksHPMiddlepoint       =  4; // средняя точка
  ksHPTriangleDisplaced =  5; // смещенный треугольник
  ksHPVisibilityOn      =  6; // глаз - видимый объект
  ksHPVisibilityOff     =  7; // перечеркнутый глаз - скрытый объект

  ksHPTilt              = 12; // наклон


{$ALIGN OFF}
type
//-------------------------------------------------------------------------------
// Структура параметров для горячих точек
// ---
PHotPointDescription = ^HotPointDescription;
HotPointDescription  = record
  // положение точки в системе координат объекта
  x : Double;
  y : Double;
  // текстовая строка (однострочная), расположенная около hot point'а
  // Внимание!!! Копия не снимается.
  //             Текст должен быть статическим хотя бы на время
  //             работы с библиотечным элементом
  text       : PAnsiChar;
  // описание мышиного курсора при прохождении над точкой
  cursorId   : Integer;
  cursorInst : HINST;
  enableJoin : Integer; // 0 - отключить объединение горячих точек с другими хотточками, 1 - разрешить объединение горячих точек с горячими точами других объектов
end;

//-------------------------------------------------------------------------------
// Структура параметров для горячих точек для дополнительного интерфейса
// ---
PHotPointDescription1 = ^HotPointDescription1;
HotPointDescription1  = record
  // текстовая строка (однострочная), расположенная около hot point'а
  text                  : PWideChar;  // текст для UNICODE вместо HotPointDescription::text (удаляется)
  bitmapId              : Integer;    // идентификатор битмапа характерной точки
  bitmapIdMove          : Integer;    // идентификатор битмапа характерной точки при прохождении над точкой
  bitmapIdSelect        : Integer;    // идентификатор битмапа характерной точки при ее селектировании
  bitmapInst            : HINST;
  bitmapCO              : Integer;    // система координат, в которой отрисовывается битмар 0 - СК листа, 1 - СК вида, 2 - СК владельца
  enableJoin            : Integer;    // 0 - отключить объединение горячих точек с другими хотточками, 1 - разрешить объединение горячих точек с горячими точами других объектов
  hotPointAngle         : Double;     // Угол смешения для отображения горячих точек
  hotPointOffset        : Double;     // Величина смещения горячих точек
  enableRotate          : Integer;    // 0 - запретить поворот хот-точки, 1 - запретить поворот хот-точки,- -1 по умолчанию ( поворот разрешен только для ksHPTriangleDisplaced )
  bitmapFont            : PWideChar;  // Шрифт для шрифтовых хот-точек
  fontSymbolColor       : COLORREF;   // Цвет для шрифтовых хот-точек
  fontSymbolScale       : Double;     // масштабирование для шрифтовых хот-точек
  hotPointOffsetType    : Integer;    // 1 величина смещения задана в абсолютных единицай, 0 в условных
  fontSymbolMoveColor   : COLORREF;   // Цвет для шрифтовых хот-точек при перемещении
  fontSymbolSelectColor : COLORREF;   // Цвет для шрифтовых хот-точек при селектировании
end;

//-------------------------------------------------------------------------------
// Структура параметров свойства отображаемого в окне свойств
// ---
PPropertyParam = ^PropertyParam;
PropertyParam  = record
  propertyType        : Integer;     // Тип свойства
  propertyId          : Integer;     // Идентификатор свойсва ( Используется для загрузки имени свойства, списка значений, иконок )
  propertyInstance    : HINST;       // Модуль ресурсов для загрузки параметров свойства ( имя, список значений ...)
  displayPropertyName : PWideChar;   // Обображаемое имя свойства ( необязательное )
  propertyValue       : OleVariant;  // Текущее значение
  propertyMinValue    : Double;      // Минимальное значение
  propertyMaxValue    : Double;      // Максимальное значение
  isDefCpyProp        : Integer;     // Будет отмечено для копирования
  enable              : Integer;     // Признак доступности для изменения
  emptyValue          : Integer;     // Значение не задано
  additionData        : OleVariant;  // Дополнительные данные для свойства ( в зависимости от типа контрола второе значение или список значений )
  additionText        : PWideChar;   // Дополнительный текст
  summList            : Integer;     // TRUE - объединять списки, FALSE - пересекать списки
  readOnly            : Integer;     // TRUE - свойство доступно только для чтения
  visible             : Integer;     // FALSE - свойство скрыто и не будет отображаться в окне свойств
  sameProxyType       : Integer;     // FALSE - свойство не будет отображаться в окне свойств при групповом выделении

end;

{$ALIGN ON}

//-------------------------------------------------------------------------------
// Интерфейс горячих точек
// ---
PPILibHPObject = ^PILibHPObject;
PILibHPObject  = ^ILibHPObject;
ILibHPObject   = interface
['{234EBFE0-477B-11D4-A840-00504E05BD01}']
//public
  // подготовиться к редактированию (Mouse L Btn Down)
  function LibHotPnt_Prepare( index : Integer ): LongBool; stdcall; //virtual; abstract;

  // завершить редактирование (Mouse L Btn Up  )
  // success = TRUE  - нормальное завершение сдвига
  //         = FALSE - во время сдвига нажали [Esc]
  function LibHotPnt_Complete( index : Integer; success : LongBool ): LongBool; stdcall; //virtual; abstract;

  // получить список hot point'ов
  // Внимание!!! Память под элементы уже выделена до вызова функции.
  //             Количество элементов в массиве points предварительно определяется
  //             в функции LibHotPnt_Count()
  function LibHotPnt_Get( point : PHotPointDescription;
                          index : Integer ) : LongBool; stdcall; //virtual; abstract;

  // изменилось положение hot point'а
  function LibHotPnt_Set( point : PHotPointDescription;
                                    index : Integer ) : LongBool; stdcall; //virtual; abstract;

  // получить текст для отображения курсором
  // Внимание!!! С присланной строки снимается копия,
  //             сама исходная строка не удаляется.
  function LibHotPnt_GetCursorText( index : Integer;
                                    Var text  : PAnsiChar ) : LongBool; stdcall; //virtual; abstract;

  // Получить меню ассоциированое с данным библиотечным элементом
  // Внимание!!! Присланное меню будет модифицированно в системе.
  //             Присланное меню будет уничтожено вызовом функции DestroyMenu()
  function LibHotPnt_GetMenu : Integer; stdcall; //virtual; abstract;

  // Выполнить команду из меню, присланного по LibHotPnt_GetMenu()
  // return = TRUE  - что то изменилось и требуется укладка в UNDO и пересчет Hot point'ов
  //        = FALSE - команда не обработана
  function LibHotPnt_ExecuteCommand( id : Integer ) : LongBool; stdcall; //virtual; abstract;

end;


//-------------------------------------------------------------------------------
// Дополнительный интерфейс горячих точек. Расширение интерфейса ILibHPObject
// ---
PPILibHPObject1 = ^PILibHPObject1;
PILibHPObject1  = ^ILibHPObject1;
ILibHPObject1   = interface
['{c8632527-f69f-4e22-9414-5f6433c33d07}']
  // подготовиться к редактированию (Mouse L Btn Down)
  // получить текущее описание hot point
  // Внимание!!! 1. Функция вызывается в цикле для каждой точки (увеличивая значение
  //                index), пока не вернёт false
  //             2. Значения координат необходимо устанавливать в собственной
  //                системе координат объекта
  function LibHotPnt_GetEx( point : PHotPointDescription1; index : Integer ): LongBool; stdcall; //virtual; abstract;

  // получить текст для отображения курсором  текст для UNICODE вместо ILibHPObject::LibHotPnt_GetCursorText
  // Внимание!!! С присланной строки снимается копия,
  //             сама исходная строка не удаляется.
  function LibHotPnt_GetCursorTextEx( index : Integer ): PWideChar; stdcall; //virtual; abstract;
  // Получить popup-меню ассоциированое с данным библиотечным элементом, если index = -1 и
  //                     и ассоциированое с данной hot-точкой, если index > -1
  // Внимание!!! Присланное меню будет модифицированно в системе.
  //             Присланное меню будет уничтожено вызовом функции DestroyMenu()
  // На самом деле ф-ия должна возвращать HMENU
  function LibHotPnt_GetMenuEx( index : Integer ) : LongBool; stdcall;   //virtual; abstract;

  // Установить состояния команд из меню, присланного по LibHotPnt_GetMenu() или LibHotPnt_GetMenuEx
  // TRUE - команда из меню доступна
  // FALSE - команда из меню не доступна
  function LibHotPnt_UpdateCommand( id : Integer ) : LongBool; stdcall;  //virtual; abstract;

  // Селектировали hot point
  function LibHotPnt_Select( index : Integer ): LongBool; stdcall;       //virtual; abstract;

  // Расселектировали hot point
  function LibHotPnt_Unselect( index : Integer ): LongBool; stdcall;     //virtual; abstract;

end;

//-------------------------------------------------------------------------------
// Интерфейс внеших воздействий
// ---
PPILibExternalObject = ^PILibExternalObject;
PILibExternalObject  = ^IILibExternalObject;
IILibExternalObject   = interface
['{234EBFE0-477B-11D4-A841-00504E05BD01}']
  function Lib_Move():       LongBool; stdcall;
  function Lib_Rotate():     LongBool; stdcall;
  function Lib_Transform():  LongBool; stdcall;
  function Lib_Delete():     LongBool; stdcall;
  function Lib_Restore():    LongBool; stdcall;
  function Lib_Deform():     LongBool; stdcall;
  function Lib_AddToModel(): LongBool; stdcall;
end;

//-------------------------------------------------------------------------------
// Интерфейс внешнего библиотечного объекта
// ---
PPILibraryObject = ^PILibraryObject;
PILibraryObject  = ^ILibraryObject;
ILibraryObject   = interface
['{D92C71C4-A818-42ae-BF7B-FF140E6CFA97}']
  function GetVersion() : Integer; stdcall; { return LB_VERSION; }
end;


//-------------------------------------------------------------------------------
// Интерфейс объекта со свойствами отображаемыми в окне свойств
// ---
PPILibPropertyObject = ^PILibPropertyObject;
PILibPropertyObject  = ^ILibPropertyObject;
ILibPropertyObject   = interface(ILibraryObject)
['{2DAA7C6C-3868-497b-BEC9-767E687687D8}']
  // Имя группы объектов, по умолчанию макроэлементы
  function GetGroupName(): PWideChar; stdcall;
  // Добавить свойство в список свойств
  function GetProperty( index : Integer; param : PPropertyParam ): LongBool; stdcall;
  // Обновить параметры свойства
  function UpdateProperty( param : PPropertyParam ): LongBool; stdcall;
  // Установить новое значение для свойства
  function ApplyProperty( param : PPropertyParam ): LongBool; stdcall;
  // Событие запуска внешнего редактирования для пользовательского свойства /*ksOPControlExternalEdit*/
  function OnChoiceProperty( param : PPropertyParam ): LongBool; stdcall;
  // Завершение редактирования свойств объекта
  function EndEditProperty(): LongBool; stdcall;
end;

implementation

end.
