

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 8.01.0622 */
/* at Tue Jan 19 06:14:07 2038
 */
/* Compiler settings for D:/shared/workspace/KOMPAS/_RELEASES/releases-v21-x86/KOMPAS/Source/API/API5/API5.odl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 8.01.0622 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif /* __RPCNDR_H_VERSION__ */


#ifndef __kAPI5_h__
#define __kAPI5_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __KompasObject_FWD_DEFINED__
#define __KompasObject_FWD_DEFINED__
typedef interface KompasObject KompasObject;

#endif 	/* __KompasObject_FWD_DEFINED__ */


#ifndef __ksDocument2D_FWD_DEFINED__
#define __ksDocument2D_FWD_DEFINED__
typedef interface ksDocument2D ksDocument2D;

#endif 	/* __ksDocument2D_FWD_DEFINED__ */


#ifndef __ksDocument3D_FWD_DEFINED__
#define __ksDocument3D_FWD_DEFINED__
typedef interface ksDocument3D ksDocument3D;

#endif 	/* __ksDocument3D_FWD_DEFINED__ */


#ifndef __ksFeature_FWD_DEFINED__
#define __ksFeature_FWD_DEFINED__
typedef interface ksFeature ksFeature;

#endif 	/* __ksFeature_FWD_DEFINED__ */


#ifndef __ksFeatureCollection_FWD_DEFINED__
#define __ksFeatureCollection_FWD_DEFINED__
typedef interface ksFeatureCollection ksFeatureCollection;

#endif 	/* __ksFeatureCollection_FWD_DEFINED__ */


#ifndef __ksAttribute3D_FWD_DEFINED__
#define __ksAttribute3D_FWD_DEFINED__
typedef interface ksAttribute3D ksAttribute3D;

#endif 	/* __ksAttribute3D_FWD_DEFINED__ */


#ifndef __ksAttribute3DCollection_FWD_DEFINED__
#define __ksAttribute3DCollection_FWD_DEFINED__
typedef interface ksAttribute3DCollection ksAttribute3DCollection;

#endif 	/* __ksAttribute3DCollection_FWD_DEFINED__ */


#ifndef __ksComponentPositioner_FWD_DEFINED__
#define __ksComponentPositioner_FWD_DEFINED__
typedef interface ksComponentPositioner ksComponentPositioner;

#endif 	/* __ksComponentPositioner_FWD_DEFINED__ */


#ifndef __ksPlacement_FWD_DEFINED__
#define __ksPlacement_FWD_DEFINED__
typedef interface ksPlacement ksPlacement;

#endif 	/* __ksPlacement_FWD_DEFINED__ */


#ifndef __ksKompasObjectNotify_FWD_DEFINED__
#define __ksKompasObjectNotify_FWD_DEFINED__
typedef interface ksKompasObjectNotify ksKompasObjectNotify;

#endif 	/* __ksKompasObjectNotify_FWD_DEFINED__ */


#ifndef __ksDocumentFileNotify_FWD_DEFINED__
#define __ksDocumentFileNotify_FWD_DEFINED__
typedef interface ksDocumentFileNotify ksDocumentFileNotify;

#endif 	/* __ksDocumentFileNotify_FWD_DEFINED__ */


#ifndef __ksDocument2DNotify_FWD_DEFINED__
#define __ksDocument2DNotify_FWD_DEFINED__
typedef interface ksDocument2DNotify ksDocument2DNotify;

#endif 	/* __ksDocument2DNotify_FWD_DEFINED__ */


#ifndef __ksObject2DNotify_FWD_DEFINED__
#define __ksObject2DNotify_FWD_DEFINED__
typedef interface ksObject2DNotify ksObject2DNotify;

#endif 	/* __ksObject2DNotify_FWD_DEFINED__ */


#ifndef __ksObject3DNotify_FWD_DEFINED__
#define __ksObject3DNotify_FWD_DEFINED__
typedef interface ksObject3DNotify ksObject3DNotify;

#endif 	/* __ksObject3DNotify_FWD_DEFINED__ */


#ifndef __ksObject2DNotifyResult_FWD_DEFINED__
#define __ksObject2DNotifyResult_FWD_DEFINED__
typedef interface ksObject2DNotifyResult ksObject2DNotifyResult;

#endif 	/* __ksObject2DNotifyResult_FWD_DEFINED__ */


#ifndef __ksObject3DNotifyResult_FWD_DEFINED__
#define __ksObject3DNotifyResult_FWD_DEFINED__
typedef interface ksObject3DNotifyResult ksObject3DNotifyResult;

#endif 	/* __ksObject3DNotifyResult_FWD_DEFINED__ */


#ifndef __ksDocument3DNotifyResult_FWD_DEFINED__
#define __ksDocument3DNotifyResult_FWD_DEFINED__
typedef interface ksDocument3DNotifyResult ksDocument3DNotifyResult;

#endif 	/* __ksDocument3DNotifyResult_FWD_DEFINED__ */


#ifndef __ksSelectionMngNotify_FWD_DEFINED__
#define __ksSelectionMngNotify_FWD_DEFINED__
typedef interface ksSelectionMngNotify ksSelectionMngNotify;

#endif 	/* __ksSelectionMngNotify_FWD_DEFINED__ */


#ifndef __ksSpecRoughParam_FWD_DEFINED__
#define __ksSpecRoughParam_FWD_DEFINED__
typedef interface ksSpecRoughParam ksSpecRoughParam;

#endif 	/* __ksSpecRoughParam_FWD_DEFINED__ */


#ifndef __ksEllipseParam_FWD_DEFINED__
#define __ksEllipseParam_FWD_DEFINED__
typedef interface ksEllipseParam ksEllipseParam;

#endif 	/* __ksEllipseParam_FWD_DEFINED__ */


#ifndef __ksEllipseArcParam_FWD_DEFINED__
#define __ksEllipseArcParam_FWD_DEFINED__
typedef interface ksEllipseArcParam ksEllipseArcParam;

#endif 	/* __ksEllipseArcParam_FWD_DEFINED__ */


#ifndef __ksEllipseArcParam1_FWD_DEFINED__
#define __ksEllipseArcParam1_FWD_DEFINED__
typedef interface ksEllipseArcParam1 ksEllipseArcParam1;

#endif 	/* __ksEllipseArcParam1_FWD_DEFINED__ */


#ifndef __ksEquidistantParam_FWD_DEFINED__
#define __ksEquidistantParam_FWD_DEFINED__
typedef interface ksEquidistantParam ksEquidistantParam;

#endif 	/* __ksEquidistantParam_FWD_DEFINED__ */


#ifndef __ksParagraphParam_FWD_DEFINED__
#define __ksParagraphParam_FWD_DEFINED__
typedef interface ksParagraphParam ksParagraphParam;

#endif 	/* __ksParagraphParam_FWD_DEFINED__ */


#ifndef __ksTextItemParam_FWD_DEFINED__
#define __ksTextItemParam_FWD_DEFINED__
typedef interface ksTextItemParam ksTextItemParam;

#endif 	/* __ksTextItemParam_FWD_DEFINED__ */


#ifndef __ksTextLineParam_FWD_DEFINED__
#define __ksTextLineParam_FWD_DEFINED__
typedef interface ksTextLineParam ksTextLineParam;

#endif 	/* __ksTextLineParam_FWD_DEFINED__ */


#ifndef __ksTextItemFont_FWD_DEFINED__
#define __ksTextItemFont_FWD_DEFINED__
typedef interface ksTextItemFont ksTextItemFont;

#endif 	/* __ksTextItemFont_FWD_DEFINED__ */


#ifndef __ksCornerParam_FWD_DEFINED__
#define __ksCornerParam_FWD_DEFINED__
typedef interface ksCornerParam ksCornerParam;

#endif 	/* __ksCornerParam_FWD_DEFINED__ */


#ifndef __ksContourParam_FWD_DEFINED__
#define __ksContourParam_FWD_DEFINED__
typedef interface ksContourParam ksContourParam;

#endif 	/* __ksContourParam_FWD_DEFINED__ */


#ifndef __ksLayerParam_FWD_DEFINED__
#define __ksLayerParam_FWD_DEFINED__
typedef interface ksLayerParam ksLayerParam;

#endif 	/* __ksLayerParam_FWD_DEFINED__ */


#ifndef __ksLineParam_FWD_DEFINED__
#define __ksLineParam_FWD_DEFINED__
typedef interface ksLineParam ksLineParam;

#endif 	/* __ksLineParam_FWD_DEFINED__ */


#ifndef __ksRegularPolygonParam_FWD_DEFINED__
#define __ksRegularPolygonParam_FWD_DEFINED__
typedef interface ksRegularPolygonParam ksRegularPolygonParam;

#endif 	/* __ksRegularPolygonParam_FWD_DEFINED__ */


#ifndef __ksRectangleParam_FWD_DEFINED__
#define __ksRectangleParam_FWD_DEFINED__
typedef interface ksRectangleParam ksRectangleParam;

#endif 	/* __ksRectangleParam_FWD_DEFINED__ */


#ifndef __ksBaseParam_FWD_DEFINED__
#define __ksBaseParam_FWD_DEFINED__
typedef interface ksBaseParam ksBaseParam;

#endif 	/* __ksBaseParam_FWD_DEFINED__ */


#ifndef __ksLtVariant_FWD_DEFINED__
#define __ksLtVariant_FWD_DEFINED__
typedef interface ksLtVariant ksLtVariant;

#endif 	/* __ksLtVariant_FWD_DEFINED__ */


#ifndef __ksUserParam_FWD_DEFINED__
#define __ksUserParam_FWD_DEFINED__
typedef interface ksUserParam ksUserParam;

#endif 	/* __ksUserParam_FWD_DEFINED__ */


#ifndef __ksMathPointParam_FWD_DEFINED__
#define __ksMathPointParam_FWD_DEFINED__
typedef interface ksMathPointParam ksMathPointParam;

#endif 	/* __ksMathPointParam_FWD_DEFINED__ */


#ifndef __ksCurvePicture_FWD_DEFINED__
#define __ksCurvePicture_FWD_DEFINED__
typedef interface ksCurvePicture ksCurvePicture;

#endif 	/* __ksCurvePicture_FWD_DEFINED__ */


#ifndef __ksCurvePattern_FWD_DEFINED__
#define __ksCurvePattern_FWD_DEFINED__
typedef interface ksCurvePattern ksCurvePattern;

#endif 	/* __ksCurvePattern_FWD_DEFINED__ */


#ifndef __ksTAN_FWD_DEFINED__
#define __ksTAN_FWD_DEFINED__
typedef interface ksTAN ksTAN;

#endif 	/* __ksTAN_FWD_DEFINED__ */


#ifndef __ksCON_FWD_DEFINED__
#define __ksCON_FWD_DEFINED__
typedef interface ksCON ksCON;

#endif 	/* __ksCON_FWD_DEFINED__ */


#ifndef __ksInertiaParam_FWD_DEFINED__
#define __ksInertiaParam_FWD_DEFINED__
typedef interface ksInertiaParam ksInertiaParam;

#endif 	/* __ksInertiaParam_FWD_DEFINED__ */


#ifndef __ksMassInertiaParam_FWD_DEFINED__
#define __ksMassInertiaParam_FWD_DEFINED__
typedef interface ksMassInertiaParam ksMassInertiaParam;

#endif 	/* __ksMassInertiaParam_FWD_DEFINED__ */


#ifndef __ksMathematic2D_FWD_DEFINED__
#define __ksMathematic2D_FWD_DEFINED__
typedef interface ksMathematic2D ksMathematic2D;

#endif 	/* __ksMathematic2D_FWD_DEFINED__ */


#ifndef __ksDynamicArray_FWD_DEFINED__
#define __ksDynamicArray_FWD_DEFINED__
typedef interface ksDynamicArray ksDynamicArray;

#endif 	/* __ksDynamicArray_FWD_DEFINED__ */


#ifndef __ksRDimDrawingParam_FWD_DEFINED__
#define __ksRDimDrawingParam_FWD_DEFINED__
typedef interface ksRDimDrawingParam ksRDimDrawingParam;

#endif 	/* __ksRDimDrawingParam_FWD_DEFINED__ */


#ifndef __ksRDimSourceParam_FWD_DEFINED__
#define __ksRDimSourceParam_FWD_DEFINED__
typedef interface ksRDimSourceParam ksRDimSourceParam;

#endif 	/* __ksRDimSourceParam_FWD_DEFINED__ */


#ifndef __ksRDimParam_FWD_DEFINED__
#define __ksRDimParam_FWD_DEFINED__
typedef interface ksRDimParam ksRDimParam;

#endif 	/* __ksRDimParam_FWD_DEFINED__ */


#ifndef __ksLineSegParam_FWD_DEFINED__
#define __ksLineSegParam_FWD_DEFINED__
typedef interface ksLineSegParam ksLineSegParam;

#endif 	/* __ksLineSegParam_FWD_DEFINED__ */


#ifndef __ksCircleParam_FWD_DEFINED__
#define __ksCircleParam_FWD_DEFINED__
typedef interface ksCircleParam ksCircleParam;

#endif 	/* __ksCircleParam_FWD_DEFINED__ */


#ifndef __ksArcByAngleParam_FWD_DEFINED__
#define __ksArcByAngleParam_FWD_DEFINED__
typedef interface ksArcByAngleParam ksArcByAngleParam;

#endif 	/* __ksArcByAngleParam_FWD_DEFINED__ */


#ifndef __ksArcByPointParam_FWD_DEFINED__
#define __ksArcByPointParam_FWD_DEFINED__
typedef interface ksArcByPointParam ksArcByPointParam;

#endif 	/* __ksArcByPointParam_FWD_DEFINED__ */


#ifndef __ksPointParam_FWD_DEFINED__
#define __ksPointParam_FWD_DEFINED__
typedef interface ksPointParam ksPointParam;

#endif 	/* __ksPointParam_FWD_DEFINED__ */


#ifndef __ksHatchParam_FWD_DEFINED__
#define __ksHatchParam_FWD_DEFINED__
typedef interface ksHatchParam ksHatchParam;

#endif 	/* __ksHatchParam_FWD_DEFINED__ */


#ifndef __ksTextParam_FWD_DEFINED__
#define __ksTextParam_FWD_DEFINED__
typedef interface ksTextParam ksTextParam;

#endif 	/* __ksTextParam_FWD_DEFINED__ */


#ifndef __ksNurbsPointParam_FWD_DEFINED__
#define __ksNurbsPointParam_FWD_DEFINED__
typedef interface ksNurbsPointParam ksNurbsPointParam;

#endif 	/* __ksNurbsPointParam_FWD_DEFINED__ */


#ifndef __ksDoubleValue_FWD_DEFINED__
#define __ksDoubleValue_FWD_DEFINED__
typedef interface ksDoubleValue ksDoubleValue;

#endif 	/* __ksDoubleValue_FWD_DEFINED__ */


#ifndef __ksNurbsParam_FWD_DEFINED__
#define __ksNurbsParam_FWD_DEFINED__
typedef interface ksNurbsParam ksNurbsParam;

#endif 	/* __ksNurbsParam_FWD_DEFINED__ */


#ifndef __ksConicArcParam_FWD_DEFINED__
#define __ksConicArcParam_FWD_DEFINED__
typedef interface ksConicArcParam ksConicArcParam;

#endif 	/* __ksConicArcParam_FWD_DEFINED__ */


#ifndef __ksCentreParam_FWD_DEFINED__
#define __ksCentreParam_FWD_DEFINED__
typedef interface ksCentreParam ksCentreParam;

#endif 	/* __ksCentreParam_FWD_DEFINED__ */


#ifndef __ksPlacementParam_FWD_DEFINED__
#define __ksPlacementParam_FWD_DEFINED__
typedef interface ksPlacementParam ksPlacementParam;

#endif 	/* __ksPlacementParam_FWD_DEFINED__ */


#ifndef __ksRasterParam_FWD_DEFINED__
#define __ksRasterParam_FWD_DEFINED__
typedef interface ksRasterParam ksRasterParam;

#endif 	/* __ksRasterParam_FWD_DEFINED__ */


#ifndef __ksPolylineParam_FWD_DEFINED__
#define __ksPolylineParam_FWD_DEFINED__
typedef interface ksPolylineParam ksPolylineParam;

#endif 	/* __ksPolylineParam_FWD_DEFINED__ */


#ifndef __ksInsertFragmentParam_FWD_DEFINED__
#define __ksInsertFragmentParam_FWD_DEFINED__
typedef interface ksInsertFragmentParam ksInsertFragmentParam;

#endif 	/* __ksInsertFragmentParam_FWD_DEFINED__ */


#ifndef __ksViewParam_FWD_DEFINED__
#define __ksViewParam_FWD_DEFINED__
typedef interface ksViewParam ksViewParam;

#endif 	/* __ksViewParam_FWD_DEFINED__ */


#ifndef __ksLBreakDimSource_FWD_DEFINED__
#define __ksLBreakDimSource_FWD_DEFINED__
typedef interface ksLBreakDimSource ksLBreakDimSource;

#endif 	/* __ksLBreakDimSource_FWD_DEFINED__ */


#ifndef __ksBreakDimDrawing_FWD_DEFINED__
#define __ksBreakDimDrawing_FWD_DEFINED__
typedef interface ksBreakDimDrawing ksBreakDimDrawing;

#endif 	/* __ksBreakDimDrawing_FWD_DEFINED__ */


#ifndef __ksLBreakDimParam_FWD_DEFINED__
#define __ksLBreakDimParam_FWD_DEFINED__
typedef interface ksLBreakDimParam ksLBreakDimParam;

#endif 	/* __ksLBreakDimParam_FWD_DEFINED__ */


#ifndef __ksABreakDimParam_FWD_DEFINED__
#define __ksABreakDimParam_FWD_DEFINED__
typedef interface ksABreakDimParam ksABreakDimParam;

#endif 	/* __ksABreakDimParam_FWD_DEFINED__ */


#ifndef __ksInsertFragmentParamEx_FWD_DEFINED__
#define __ksInsertFragmentParamEx_FWD_DEFINED__
typedef interface ksInsertFragmentParamEx ksInsertFragmentParamEx;

#endif 	/* __ksInsertFragmentParamEx_FWD_DEFINED__ */


#ifndef __ksBezierParam_FWD_DEFINED__
#define __ksBezierParam_FWD_DEFINED__
typedef interface ksBezierParam ksBezierParam;

#endif 	/* __ksBezierParam_FWD_DEFINED__ */


#ifndef __ksBezierPointParam_FWD_DEFINED__
#define __ksBezierPointParam_FWD_DEFINED__
typedef interface ksBezierPointParam ksBezierPointParam;

#endif 	/* __ksBezierPointParam_FWD_DEFINED__ */


#ifndef __ksDimTextParam_FWD_DEFINED__
#define __ksDimTextParam_FWD_DEFINED__
typedef interface ksDimTextParam ksDimTextParam;

#endif 	/* __ksDimTextParam_FWD_DEFINED__ */


#ifndef __ksLDimSourceParam_FWD_DEFINED__
#define __ksLDimSourceParam_FWD_DEFINED__
typedef interface ksLDimSourceParam ksLDimSourceParam;

#endif 	/* __ksLDimSourceParam_FWD_DEFINED__ */


#ifndef __ksDimDrawingParam_FWD_DEFINED__
#define __ksDimDrawingParam_FWD_DEFINED__
typedef interface ksDimDrawingParam ksDimDrawingParam;

#endif 	/* __ksDimDrawingParam_FWD_DEFINED__ */


#ifndef __ksLDimParam_FWD_DEFINED__
#define __ksLDimParam_FWD_DEFINED__
typedef interface ksLDimParam ksLDimParam;

#endif 	/* __ksLDimParam_FWD_DEFINED__ */


#ifndef __ksADimSourceParam_FWD_DEFINED__
#define __ksADimSourceParam_FWD_DEFINED__
typedef interface ksADimSourceParam ksADimSourceParam;

#endif 	/* __ksADimSourceParam_FWD_DEFINED__ */


#ifndef __ksDimensionPartsParam_FWD_DEFINED__
#define __ksDimensionPartsParam_FWD_DEFINED__
typedef interface ksDimensionPartsParam ksDimensionPartsParam;

#endif 	/* __ksDimensionPartsParam_FWD_DEFINED__ */


#ifndef __ksADimParam_FWD_DEFINED__
#define __ksADimParam_FWD_DEFINED__
typedef interface ksADimParam ksADimParam;

#endif 	/* __ksADimParam_FWD_DEFINED__ */


#ifndef __ksRBreakDrawingParam_FWD_DEFINED__
#define __ksRBreakDrawingParam_FWD_DEFINED__
typedef interface ksRBreakDrawingParam ksRBreakDrawingParam;

#endif 	/* __ksRBreakDrawingParam_FWD_DEFINED__ */


#ifndef __ksRBreakDimParam_FWD_DEFINED__
#define __ksRBreakDimParam_FWD_DEFINED__
typedef interface ksRBreakDimParam ksRBreakDimParam;

#endif 	/* __ksRBreakDimParam_FWD_DEFINED__ */


#ifndef __ksQualityItemParam_FWD_DEFINED__
#define __ksQualityItemParam_FWD_DEFINED__
typedef interface ksQualityItemParam ksQualityItemParam;

#endif 	/* __ksQualityItemParam_FWD_DEFINED__ */


#ifndef __ksQualityContensParam_FWD_DEFINED__
#define __ksQualityContensParam_FWD_DEFINED__
typedef interface ksQualityContensParam ksQualityContensParam;

#endif 	/* __ksQualityContensParam_FWD_DEFINED__ */


#ifndef __ksIterator_FWD_DEFINED__
#define __ksIterator_FWD_DEFINED__
typedef interface ksIterator ksIterator;

#endif 	/* __ksIterator_FWD_DEFINED__ */


#ifndef __ksFragment_FWD_DEFINED__
#define __ksFragment_FWD_DEFINED__
typedef interface ksFragment ksFragment;

#endif 	/* __ksFragment_FWD_DEFINED__ */


#ifndef __ksFragmentLibrary_FWD_DEFINED__
#define __ksFragmentLibrary_FWD_DEFINED__
typedef interface ksFragmentLibrary ksFragmentLibrary;

#endif 	/* __ksFragmentLibrary_FWD_DEFINED__ */


#ifndef __ksTechnicalDemandParam_FWD_DEFINED__
#define __ksTechnicalDemandParam_FWD_DEFINED__
typedef interface ksTechnicalDemandParam ksTechnicalDemandParam;

#endif 	/* __ksTechnicalDemandParam_FWD_DEFINED__ */


#ifndef __ksOrdinatedSourceParam_FWD_DEFINED__
#define __ksOrdinatedSourceParam_FWD_DEFINED__
typedef interface ksOrdinatedSourceParam ksOrdinatedSourceParam;

#endif 	/* __ksOrdinatedSourceParam_FWD_DEFINED__ */


#ifndef __ksOrdinatedDimParam_FWD_DEFINED__
#define __ksOrdinatedDimParam_FWD_DEFINED__
typedef interface ksOrdinatedDimParam ksOrdinatedDimParam;

#endif 	/* __ksOrdinatedDimParam_FWD_DEFINED__ */


#ifndef __ksOrdinatedDrawingParam_FWD_DEFINED__
#define __ksOrdinatedDrawingParam_FWD_DEFINED__
typedef interface ksOrdinatedDrawingParam ksOrdinatedDrawingParam;

#endif 	/* __ksOrdinatedDrawingParam_FWD_DEFINED__ */


#ifndef __ksSheetSize_FWD_DEFINED__
#define __ksSheetSize_FWD_DEFINED__
typedef interface ksSheetSize ksSheetSize;

#endif 	/* __ksSheetSize_FWD_DEFINED__ */


#ifndef __ksStandartSheet_FWD_DEFINED__
#define __ksStandartSheet_FWD_DEFINED__
typedef interface ksStandartSheet ksStandartSheet;

#endif 	/* __ksStandartSheet_FWD_DEFINED__ */


#ifndef __ksSheetPar_FWD_DEFINED__
#define __ksSheetPar_FWD_DEFINED__
typedef interface ksSheetPar ksSheetPar;

#endif 	/* __ksSheetPar_FWD_DEFINED__ */


#ifndef __ksDocumentParam_FWD_DEFINED__
#define __ksDocumentParam_FWD_DEFINED__
typedef interface ksDocumentParam ksDocumentParam;

#endif 	/* __ksDocumentParam_FWD_DEFINED__ */


#ifndef __ksDimensionsOptions_FWD_DEFINED__
#define __ksDimensionsOptions_FWD_DEFINED__
typedef interface ksDimensionsOptions ksDimensionsOptions;

#endif 	/* __ksDimensionsOptions_FWD_DEFINED__ */


#ifndef __ksSnapOptions_FWD_DEFINED__
#define __ksSnapOptions_FWD_DEFINED__
typedef interface ksSnapOptions ksSnapOptions;

#endif 	/* __ksSnapOptions_FWD_DEFINED__ */


#ifndef __ksLibraryStyleParam_FWD_DEFINED__
#define __ksLibraryStyleParam_FWD_DEFINED__
typedef interface ksLibraryStyleParam ksLibraryStyleParam;

#endif 	/* __ksLibraryStyleParam_FWD_DEFINED__ */


#ifndef __ksStampNotify_FWD_DEFINED__
#define __ksStampNotify_FWD_DEFINED__
typedef interface ksStampNotify ksStampNotify;

#endif 	/* __ksStampNotify_FWD_DEFINED__ */


#ifndef __ksStamp_FWD_DEFINED__
#define __ksStamp_FWD_DEFINED__
typedef interface ksStamp ksStamp;

#endif 	/* __ksStamp_FWD_DEFINED__ */


#ifndef __ksSheetOptions_FWD_DEFINED__
#define __ksSheetOptions_FWD_DEFINED__
typedef interface ksSheetOptions ksSheetOptions;

#endif 	/* __ksSheetOptions_FWD_DEFINED__ */


#ifndef __ksCurvePatternEx_FWD_DEFINED__
#define __ksCurvePatternEx_FWD_DEFINED__
typedef interface ksCurvePatternEx ksCurvePatternEx;

#endif 	/* __ksCurvePatternEx_FWD_DEFINED__ */


#ifndef __ksCurveStyleParam_FWD_DEFINED__
#define __ksCurveStyleParam_FWD_DEFINED__
typedef interface ksCurveStyleParam ksCurveStyleParam;

#endif 	/* __ksCurveStyleParam_FWD_DEFINED__ */


#ifndef __ksTextStyleParam_FWD_DEFINED__
#define __ksTextStyleParam_FWD_DEFINED__
typedef interface ksTextStyleParam ksTextStyleParam;

#endif 	/* __ksTextStyleParam_FWD_DEFINED__ */


#ifndef __ksHatchLineParam_FWD_DEFINED__
#define __ksHatchLineParam_FWD_DEFINED__
typedef interface ksHatchLineParam ksHatchLineParam;

#endif 	/* __ksHatchLineParam_FWD_DEFINED__ */


#ifndef __ksHatchStyleParam_FWD_DEFINED__
#define __ksHatchStyleParam_FWD_DEFINED__
typedef interface ksHatchStyleParam ksHatchStyleParam;

#endif 	/* __ksHatchStyleParam_FWD_DEFINED__ */


#ifndef __ksRectParam_FWD_DEFINED__
#define __ksRectParam_FWD_DEFINED__
typedef interface ksRectParam ksRectParam;

#endif 	/* __ksRectParam_FWD_DEFINED__ */


#ifndef __ksShelfPar_FWD_DEFINED__
#define __ksShelfPar_FWD_DEFINED__
typedef interface ksShelfPar ksShelfPar;

#endif 	/* __ksShelfPar_FWD_DEFINED__ */


#ifndef __ksRoughPar_FWD_DEFINED__
#define __ksRoughPar_FWD_DEFINED__
typedef interface ksRoughPar ksRoughPar;

#endif 	/* __ksRoughPar_FWD_DEFINED__ */


#ifndef __ksRoughParam_FWD_DEFINED__
#define __ksRoughParam_FWD_DEFINED__
typedef interface ksRoughParam ksRoughParam;

#endif 	/* __ksRoughParam_FWD_DEFINED__ */


#ifndef __ksChar255_FWD_DEFINED__
#define __ksChar255_FWD_DEFINED__
typedef interface ksChar255 ksChar255;

#endif 	/* __ksChar255_FWD_DEFINED__ */


#ifndef __ksLeaderParam_FWD_DEFINED__
#define __ksLeaderParam_FWD_DEFINED__
typedef interface ksLeaderParam ksLeaderParam;

#endif 	/* __ksLeaderParam_FWD_DEFINED__ */


#ifndef __ksPosLeaderParam_FWD_DEFINED__
#define __ksPosLeaderParam_FWD_DEFINED__
typedef interface ksPosLeaderParam ksPosLeaderParam;

#endif 	/* __ksPosLeaderParam_FWD_DEFINED__ */


#ifndef __ksBrandLeaderParam_FWD_DEFINED__
#define __ksBrandLeaderParam_FWD_DEFINED__
typedef interface ksBrandLeaderParam ksBrandLeaderParam;

#endif 	/* __ksBrandLeaderParam_FWD_DEFINED__ */


#ifndef __ksMarkerLeaderParam_FWD_DEFINED__
#define __ksMarkerLeaderParam_FWD_DEFINED__
typedef interface ksMarkerLeaderParam ksMarkerLeaderParam;

#endif 	/* __ksMarkerLeaderParam_FWD_DEFINED__ */


#ifndef __ksType1_FWD_DEFINED__
#define __ksType1_FWD_DEFINED__
typedef interface ksType1 ksType1;

#endif 	/* __ksType1_FWD_DEFINED__ */


#ifndef __ksType2_FWD_DEFINED__
#define __ksType2_FWD_DEFINED__
typedef interface ksType2 ksType2;

#endif 	/* __ksType2_FWD_DEFINED__ */


#ifndef __ksType3_FWD_DEFINED__
#define __ksType3_FWD_DEFINED__
typedef interface ksType3 ksType3;

#endif 	/* __ksType3_FWD_DEFINED__ */


#ifndef __ksType5_FWD_DEFINED__
#define __ksType5_FWD_DEFINED__
typedef interface ksType5 ksType5;

#endif 	/* __ksType5_FWD_DEFINED__ */


#ifndef __ksType6_FWD_DEFINED__
#define __ksType6_FWD_DEFINED__
typedef interface ksType6 ksType6;

#endif 	/* __ksType6_FWD_DEFINED__ */


#ifndef __ksPhantom_FWD_DEFINED__
#define __ksPhantom_FWD_DEFINED__
typedef interface ksPhantom ksPhantom;

#endif 	/* __ksPhantom_FWD_DEFINED__ */


#ifndef __ksRequestInfo_FWD_DEFINED__
#define __ksRequestInfo_FWD_DEFINED__
typedef interface ksRequestInfo ksRequestInfo;

#endif 	/* __ksRequestInfo_FWD_DEFINED__ */


#ifndef __ksViewPointerParam_FWD_DEFINED__
#define __ksViewPointerParam_FWD_DEFINED__
typedef interface ksViewPointerParam ksViewPointerParam;

#endif 	/* __ksViewPointerParam_FWD_DEFINED__ */


#ifndef __ksCutLineParam_FWD_DEFINED__
#define __ksCutLineParam_FWD_DEFINED__
typedef interface ksCutLineParam ksCutLineParam;

#endif 	/* __ksCutLineParam_FWD_DEFINED__ */


#ifndef __ksToleranceBranch_FWD_DEFINED__
#define __ksToleranceBranch_FWD_DEFINED__
typedef interface ksToleranceBranch ksToleranceBranch;

#endif 	/* __ksToleranceBranch_FWD_DEFINED__ */


#ifndef __ksToleranceParam_FWD_DEFINED__
#define __ksToleranceParam_FWD_DEFINED__
typedef interface ksToleranceParam ksToleranceParam;

#endif 	/* __ksToleranceParam_FWD_DEFINED__ */


#ifndef __ksSpcColumnParam_FWD_DEFINED__
#define __ksSpcColumnParam_FWD_DEFINED__
typedef interface ksSpcColumnParam ksSpcColumnParam;

#endif 	/* __ksSpcColumnParam_FWD_DEFINED__ */


#ifndef __ksRecordTypeAttrParam_FWD_DEFINED__
#define __ksRecordTypeAttrParam_FWD_DEFINED__
typedef interface ksRecordTypeAttrParam ksRecordTypeAttrParam;

#endif 	/* __ksRecordTypeAttrParam_FWD_DEFINED__ */


#ifndef __ksNumberTypeAttrParam_FWD_DEFINED__
#define __ksNumberTypeAttrParam_FWD_DEFINED__
typedef interface ksNumberTypeAttrParam ksNumberTypeAttrParam;

#endif 	/* __ksNumberTypeAttrParam_FWD_DEFINED__ */


#ifndef __ksSpcStyleColumnParam_FWD_DEFINED__
#define __ksSpcStyleColumnParam_FWD_DEFINED__
typedef interface ksSpcStyleColumnParam ksSpcStyleColumnParam;

#endif 	/* __ksSpcStyleColumnParam_FWD_DEFINED__ */


#ifndef __ksSpcStyleSectionParam_FWD_DEFINED__
#define __ksSpcStyleSectionParam_FWD_DEFINED__
typedef interface ksSpcStyleSectionParam ksSpcStyleSectionParam;

#endif 	/* __ksSpcStyleSectionParam_FWD_DEFINED__ */


#ifndef __ksSpcSubSectionParam_FWD_DEFINED__
#define __ksSpcSubSectionParam_FWD_DEFINED__
typedef interface ksSpcSubSectionParam ksSpcSubSectionParam;

#endif 	/* __ksSpcSubSectionParam_FWD_DEFINED__ */


#ifndef __ksSpcTuningSectionParam_FWD_DEFINED__
#define __ksSpcTuningSectionParam_FWD_DEFINED__
typedef interface ksSpcTuningSectionParam ksSpcTuningSectionParam;

#endif 	/* __ksSpcTuningSectionParam_FWD_DEFINED__ */


#ifndef __ksSpcTuningStyleParam_FWD_DEFINED__
#define __ksSpcTuningStyleParam_FWD_DEFINED__
typedef interface ksSpcTuningStyleParam ksSpcTuningStyleParam;

#endif 	/* __ksSpcTuningStyleParam_FWD_DEFINED__ */


#ifndef __ksSpcStyleParam_FWD_DEFINED__
#define __ksSpcStyleParam_FWD_DEFINED__
typedef interface ksSpcStyleParam ksSpcStyleParam;

#endif 	/* __ksSpcStyleParam_FWD_DEFINED__ */


#ifndef __ksSpcDescrParam_FWD_DEFINED__
#define __ksSpcDescrParam_FWD_DEFINED__
typedef interface ksSpcDescrParam ksSpcDescrParam;

#endif 	/* __ksSpcDescrParam_FWD_DEFINED__ */


#ifndef __ksDocAttachedSpcParam_FWD_DEFINED__
#define __ksDocAttachedSpcParam_FWD_DEFINED__
typedef interface ksDocAttachedSpcParam ksDocAttachedSpcParam;

#endif 	/* __ksDocAttachedSpcParam_FWD_DEFINED__ */


#ifndef __ksSpcObjParam_FWD_DEFINED__
#define __ksSpcObjParam_FWD_DEFINED__
typedef interface ksSpcObjParam ksSpcObjParam;

#endif 	/* __ksSpcObjParam_FWD_DEFINED__ */


#ifndef __ksLibStyle_FWD_DEFINED__
#define __ksLibStyle_FWD_DEFINED__
typedef interface ksLibStyle ksLibStyle;

#endif 	/* __ksLibStyle_FWD_DEFINED__ */


#ifndef __ksDataBaseObject_FWD_DEFINED__
#define __ksDataBaseObject_FWD_DEFINED__
typedef interface ksDataBaseObject ksDataBaseObject;

#endif 	/* __ksDataBaseObject_FWD_DEFINED__ */


#ifndef __ksSpcDocumentNotify_FWD_DEFINED__
#define __ksSpcDocumentNotify_FWD_DEFINED__
typedef interface ksSpcDocumentNotify ksSpcDocumentNotify;

#endif 	/* __ksSpcDocumentNotify_FWD_DEFINED__ */


#ifndef __ksSpcDocument_FWD_DEFINED__
#define __ksSpcDocument_FWD_DEFINED__
typedef interface ksSpcDocument ksSpcDocument;

#endif 	/* __ksSpcDocument_FWD_DEFINED__ */


#ifndef __ksSpcObjectNotify_FWD_DEFINED__
#define __ksSpcObjectNotify_FWD_DEFINED__
typedef interface ksSpcObjectNotify ksSpcObjectNotify;

#endif 	/* __ksSpcObjectNotify_FWD_DEFINED__ */


#ifndef __ksSpecificationNotify_FWD_DEFINED__
#define __ksSpecificationNotify_FWD_DEFINED__
typedef interface ksSpecificationNotify ksSpecificationNotify;

#endif 	/* __ksSpecificationNotify_FWD_DEFINED__ */


#ifndef __ksSpecification_FWD_DEFINED__
#define __ksSpecification_FWD_DEFINED__
typedef interface ksSpecification ksSpecification;

#endif 	/* __ksSpecification_FWD_DEFINED__ */


#ifndef __ksDocumentTxt_FWD_DEFINED__
#define __ksDocumentTxt_FWD_DEFINED__
typedef interface ksDocumentTxt ksDocumentTxt;

#endif 	/* __ksDocumentTxt_FWD_DEFINED__ */


#ifndef __ksAttributeTypeParam_FWD_DEFINED__
#define __ksAttributeTypeParam_FWD_DEFINED__
typedef interface ksAttributeTypeParam ksAttributeTypeParam;

#endif 	/* __ksAttributeTypeParam_FWD_DEFINED__ */


#ifndef __ksColumnInfoParam_FWD_DEFINED__
#define __ksColumnInfoParam_FWD_DEFINED__
typedef interface ksColumnInfoParam ksColumnInfoParam;

#endif 	/* __ksColumnInfoParam_FWD_DEFINED__ */


#ifndef __ksAttributeParam_FWD_DEFINED__
#define __ksAttributeParam_FWD_DEFINED__
typedef interface ksAttributeParam ksAttributeParam;

#endif 	/* __ksAttributeParam_FWD_DEFINED__ */


#ifndef __ksVariable_FWD_DEFINED__
#define __ksVariable_FWD_DEFINED__
typedef interface ksVariable ksVariable;

#endif 	/* __ksVariable_FWD_DEFINED__ */


#ifndef __ksLibraryAttrTypeParam_FWD_DEFINED__
#define __ksLibraryAttrTypeParam_FWD_DEFINED__
typedef interface ksLibraryAttrTypeParam ksLibraryAttrTypeParam;

#endif 	/* __ksLibraryAttrTypeParam_FWD_DEFINED__ */


#ifndef __ksAttributeObject_FWD_DEFINED__
#define __ksAttributeObject_FWD_DEFINED__
typedef interface ksAttributeObject ksAttributeObject;

#endif 	/* __ksAttributeObject_FWD_DEFINED__ */


#ifndef __ksRequestInfo3D_FWD_DEFINED__
#define __ksRequestInfo3D_FWD_DEFINED__
typedef interface ksRequestInfo3D ksRequestInfo3D;

#endif 	/* __ksRequestInfo3D_FWD_DEFINED__ */


#ifndef __ksMateConstraint_FWD_DEFINED__
#define __ksMateConstraint_FWD_DEFINED__
typedef interface ksMateConstraint ksMateConstraint;

#endif 	/* __ksMateConstraint_FWD_DEFINED__ */


#ifndef __ksDefaultObject_FWD_DEFINED__
#define __ksDefaultObject_FWD_DEFINED__
typedef interface ksDefaultObject ksDefaultObject;

#endif 	/* __ksDefaultObject_FWD_DEFINED__ */


#ifndef __ksEntity_FWD_DEFINED__
#define __ksEntity_FWD_DEFINED__
typedef interface ksEntity ksEntity;

#endif 	/* __ksEntity_FWD_DEFINED__ */


#ifndef __ksPart_FWD_DEFINED__
#define __ksPart_FWD_DEFINED__
typedef interface ksPart ksPart;

#endif 	/* __ksPart_FWD_DEFINED__ */


#ifndef __ksDocument3DNotify_FWD_DEFINED__
#define __ksDocument3DNotify_FWD_DEFINED__
typedef interface ksDocument3DNotify ksDocument3DNotify;

#endif 	/* __ksDocument3DNotify_FWD_DEFINED__ */


#ifndef __ksModelLibrary_FWD_DEFINED__
#define __ksModelLibrary_FWD_DEFINED__
typedef interface ksModelLibrary ksModelLibrary;

#endif 	/* __ksModelLibrary_FWD_DEFINED__ */


#ifndef __ksEntityCollection_FWD_DEFINED__
#define __ksEntityCollection_FWD_DEFINED__
typedef interface ksEntityCollection ksEntityCollection;

#endif 	/* __ksEntityCollection_FWD_DEFINED__ */


#ifndef __ksVariableCollection_FWD_DEFINED__
#define __ksVariableCollection_FWD_DEFINED__
typedef interface ksVariableCollection ksVariableCollection;

#endif 	/* __ksVariableCollection_FWD_DEFINED__ */


#ifndef __ksMateConstraintCollection_FWD_DEFINED__
#define __ksMateConstraintCollection_FWD_DEFINED__
typedef interface ksMateConstraintCollection ksMateConstraintCollection;

#endif 	/* __ksMateConstraintCollection_FWD_DEFINED__ */


#ifndef __ksPartCollection_FWD_DEFINED__
#define __ksPartCollection_FWD_DEFINED__
typedef interface ksPartCollection ksPartCollection;

#endif 	/* __ksPartCollection_FWD_DEFINED__ */


#ifndef __ksMeshPartArrayDefinition_FWD_DEFINED__
#define __ksMeshPartArrayDefinition_FWD_DEFINED__
typedef interface ksMeshPartArrayDefinition ksMeshPartArrayDefinition;

#endif 	/* __ksMeshPartArrayDefinition_FWD_DEFINED__ */


#ifndef __ksCircularPartArrayDefinition_FWD_DEFINED__
#define __ksCircularPartArrayDefinition_FWD_DEFINED__
typedef interface ksCircularPartArrayDefinition ksCircularPartArrayDefinition;

#endif 	/* __ksCircularPartArrayDefinition_FWD_DEFINED__ */


#ifndef __ksCurvePartArrayDefinition_FWD_DEFINED__
#define __ksCurvePartArrayDefinition_FWD_DEFINED__
typedef interface ksCurvePartArrayDefinition ksCurvePartArrayDefinition;

#endif 	/* __ksCurvePartArrayDefinition_FWD_DEFINED__ */


#ifndef __ksDerivativePartArrayDefinition_FWD_DEFINED__
#define __ksDerivativePartArrayDefinition_FWD_DEFINED__
typedef interface ksDerivativePartArrayDefinition ksDerivativePartArrayDefinition;

#endif 	/* __ksDerivativePartArrayDefinition_FWD_DEFINED__ */


#ifndef __ksAxis2PlanesDefinition_FWD_DEFINED__
#define __ksAxis2PlanesDefinition_FWD_DEFINED__
typedef interface ksAxis2PlanesDefinition ksAxis2PlanesDefinition;

#endif 	/* __ksAxis2PlanesDefinition_FWD_DEFINED__ */


#ifndef __ksAxisOperationsDefinition_FWD_DEFINED__
#define __ksAxisOperationsDefinition_FWD_DEFINED__
typedef interface ksAxisOperationsDefinition ksAxisOperationsDefinition;

#endif 	/* __ksAxisOperationsDefinition_FWD_DEFINED__ */


#ifndef __ksAxis2PointsDefinition_FWD_DEFINED__
#define __ksAxis2PointsDefinition_FWD_DEFINED__
typedef interface ksAxis2PointsDefinition ksAxis2PointsDefinition;

#endif 	/* __ksAxis2PointsDefinition_FWD_DEFINED__ */


#ifndef __ksAxisEdgeDefinition_FWD_DEFINED__
#define __ksAxisEdgeDefinition_FWD_DEFINED__
typedef interface ksAxisEdgeDefinition ksAxisEdgeDefinition;

#endif 	/* __ksAxisEdgeDefinition_FWD_DEFINED__ */


#ifndef __ksMeshCopyDefinition_FWD_DEFINED__
#define __ksMeshCopyDefinition_FWD_DEFINED__
typedef interface ksMeshCopyDefinition ksMeshCopyDefinition;

#endif 	/* __ksMeshCopyDefinition_FWD_DEFINED__ */


#ifndef __ksCircularCopyDefinition_FWD_DEFINED__
#define __ksCircularCopyDefinition_FWD_DEFINED__
typedef interface ksCircularCopyDefinition ksCircularCopyDefinition;

#endif 	/* __ksCircularCopyDefinition_FWD_DEFINED__ */


#ifndef __ksCurveCopyDefinition_FWD_DEFINED__
#define __ksCurveCopyDefinition_FWD_DEFINED__
typedef interface ksCurveCopyDefinition ksCurveCopyDefinition;

#endif 	/* __ksCurveCopyDefinition_FWD_DEFINED__ */


#ifndef __ksMirrorCopyDefinition_FWD_DEFINED__
#define __ksMirrorCopyDefinition_FWD_DEFINED__
typedef interface ksMirrorCopyDefinition ksMirrorCopyDefinition;

#endif 	/* __ksMirrorCopyDefinition_FWD_DEFINED__ */


#ifndef __ksMirrorCopyAllDefinition_FWD_DEFINED__
#define __ksMirrorCopyAllDefinition_FWD_DEFINED__
typedef interface ksMirrorCopyAllDefinition ksMirrorCopyAllDefinition;

#endif 	/* __ksMirrorCopyAllDefinition_FWD_DEFINED__ */


#ifndef __ksConicSpiralDefinition_FWD_DEFINED__
#define __ksConicSpiralDefinition_FWD_DEFINED__
typedef interface ksConicSpiralDefinition ksConicSpiralDefinition;

#endif 	/* __ksConicSpiralDefinition_FWD_DEFINED__ */


#ifndef __ksCylindricSpiralDefinition_FWD_DEFINED__
#define __ksCylindricSpiralDefinition_FWD_DEFINED__
typedef interface ksCylindricSpiralDefinition ksCylindricSpiralDefinition;

#endif 	/* __ksCylindricSpiralDefinition_FWD_DEFINED__ */


#ifndef __ksPolyLineDefinition_FWD_DEFINED__
#define __ksPolyLineDefinition_FWD_DEFINED__
typedef interface ksPolyLineDefinition ksPolyLineDefinition;

#endif 	/* __ksPolyLineDefinition_FWD_DEFINED__ */


#ifndef __ksSplineDefinition_FWD_DEFINED__
#define __ksSplineDefinition_FWD_DEFINED__
typedef interface ksSplineDefinition ksSplineDefinition;

#endif 	/* __ksSplineDefinition_FWD_DEFINED__ */


#ifndef __ksBaseExtrusionDefinition_FWD_DEFINED__
#define __ksBaseExtrusionDefinition_FWD_DEFINED__
typedef interface ksBaseExtrusionDefinition ksBaseExtrusionDefinition;

#endif 	/* __ksBaseExtrusionDefinition_FWD_DEFINED__ */


#ifndef __ksBossExtrusionDefinition_FWD_DEFINED__
#define __ksBossExtrusionDefinition_FWD_DEFINED__
typedef interface ksBossExtrusionDefinition ksBossExtrusionDefinition;

#endif 	/* __ksBossExtrusionDefinition_FWD_DEFINED__ */


#ifndef __ksCutExtrusionDefinition_FWD_DEFINED__
#define __ksCutExtrusionDefinition_FWD_DEFINED__
typedef interface ksCutExtrusionDefinition ksCutExtrusionDefinition;

#endif 	/* __ksCutExtrusionDefinition_FWD_DEFINED__ */


#ifndef __ksExtrusionSurfaceDefinition_FWD_DEFINED__
#define __ksExtrusionSurfaceDefinition_FWD_DEFINED__
typedef interface ksExtrusionSurfaceDefinition ksExtrusionSurfaceDefinition;

#endif 	/* __ksExtrusionSurfaceDefinition_FWD_DEFINED__ */


#ifndef __ksFaceDefinition_FWD_DEFINED__
#define __ksFaceDefinition_FWD_DEFINED__
typedef interface ksFaceDefinition ksFaceDefinition;

#endif 	/* __ksFaceDefinition_FWD_DEFINED__ */


#ifndef __ksEdgeDefinition_FWD_DEFINED__
#define __ksEdgeDefinition_FWD_DEFINED__
typedef interface ksEdgeDefinition ksEdgeDefinition;

#endif 	/* __ksEdgeDefinition_FWD_DEFINED__ */


#ifndef __ksChamferDefinition_FWD_DEFINED__
#define __ksChamferDefinition_FWD_DEFINED__
typedef interface ksChamferDefinition ksChamferDefinition;

#endif 	/* __ksChamferDefinition_FWD_DEFINED__ */


#ifndef __ksFilletDefinition_FWD_DEFINED__
#define __ksFilletDefinition_FWD_DEFINED__
typedef interface ksFilletDefinition ksFilletDefinition;

#endif 	/* __ksFilletDefinition_FWD_DEFINED__ */


#ifndef __ksBaseLoftDefinition_FWD_DEFINED__
#define __ksBaseLoftDefinition_FWD_DEFINED__
typedef interface ksBaseLoftDefinition ksBaseLoftDefinition;

#endif 	/* __ksBaseLoftDefinition_FWD_DEFINED__ */


#ifndef __ksBossLoftDefinition_FWD_DEFINED__
#define __ksBossLoftDefinition_FWD_DEFINED__
typedef interface ksBossLoftDefinition ksBossLoftDefinition;

#endif 	/* __ksBossLoftDefinition_FWD_DEFINED__ */


#ifndef __ksCutLoftDefinition_FWD_DEFINED__
#define __ksCutLoftDefinition_FWD_DEFINED__
typedef interface ksCutLoftDefinition ksCutLoftDefinition;

#endif 	/* __ksCutLoftDefinition_FWD_DEFINED__ */


#ifndef __ksLoftSurfaceDefinition_FWD_DEFINED__
#define __ksLoftSurfaceDefinition_FWD_DEFINED__
typedef interface ksLoftSurfaceDefinition ksLoftSurfaceDefinition;

#endif 	/* __ksLoftSurfaceDefinition_FWD_DEFINED__ */


#ifndef __ksInclineDefinition_FWD_DEFINED__
#define __ksInclineDefinition_FWD_DEFINED__
typedef interface ksInclineDefinition ksInclineDefinition;

#endif 	/* __ksInclineDefinition_FWD_DEFINED__ */


#ifndef __ksShellDefinition_FWD_DEFINED__
#define __ksShellDefinition_FWD_DEFINED__
typedef interface ksShellDefinition ksShellDefinition;

#endif 	/* __ksShellDefinition_FWD_DEFINED__ */


#ifndef __ksBaseEvolutionDefinition_FWD_DEFINED__
#define __ksBaseEvolutionDefinition_FWD_DEFINED__
typedef interface ksBaseEvolutionDefinition ksBaseEvolutionDefinition;

#endif 	/* __ksBaseEvolutionDefinition_FWD_DEFINED__ */


#ifndef __ksBossEvolutionDefinition_FWD_DEFINED__
#define __ksBossEvolutionDefinition_FWD_DEFINED__
typedef interface ksBossEvolutionDefinition ksBossEvolutionDefinition;

#endif 	/* __ksBossEvolutionDefinition_FWD_DEFINED__ */


#ifndef __ksCutEvolutionDefinition_FWD_DEFINED__
#define __ksCutEvolutionDefinition_FWD_DEFINED__
typedef interface ksCutEvolutionDefinition ksCutEvolutionDefinition;

#endif 	/* __ksCutEvolutionDefinition_FWD_DEFINED__ */


#ifndef __ksEvolutionSurfaceDefinition_FWD_DEFINED__
#define __ksEvolutionSurfaceDefinition_FWD_DEFINED__
typedef interface ksEvolutionSurfaceDefinition ksEvolutionSurfaceDefinition;

#endif 	/* __ksEvolutionSurfaceDefinition_FWD_DEFINED__ */


#ifndef __ksRibDefinition_FWD_DEFINED__
#define __ksRibDefinition_FWD_DEFINED__
typedef interface ksRibDefinition ksRibDefinition;

#endif 	/* __ksRibDefinition_FWD_DEFINED__ */


#ifndef __ksCutByPlaneDefinition_FWD_DEFINED__
#define __ksCutByPlaneDefinition_FWD_DEFINED__
typedef interface ksCutByPlaneDefinition ksCutByPlaneDefinition;

#endif 	/* __ksCutByPlaneDefinition_FWD_DEFINED__ */


#ifndef __ksCutBySketchDefinition_FWD_DEFINED__
#define __ksCutBySketchDefinition_FWD_DEFINED__
typedef interface ksCutBySketchDefinition ksCutBySketchDefinition;

#endif 	/* __ksCutBySketchDefinition_FWD_DEFINED__ */


#ifndef __ksPlaneOffsetDefinition_FWD_DEFINED__
#define __ksPlaneOffsetDefinition_FWD_DEFINED__
typedef interface ksPlaneOffsetDefinition ksPlaneOffsetDefinition;

#endif 	/* __ksPlaneOffsetDefinition_FWD_DEFINED__ */


#ifndef __ksPlaneAngleDefinition_FWD_DEFINED__
#define __ksPlaneAngleDefinition_FWD_DEFINED__
typedef interface ksPlaneAngleDefinition ksPlaneAngleDefinition;

#endif 	/* __ksPlaneAngleDefinition_FWD_DEFINED__ */


#ifndef __ksPlane3PointsDefinition_FWD_DEFINED__
#define __ksPlane3PointsDefinition_FWD_DEFINED__
typedef interface ksPlane3PointsDefinition ksPlane3PointsDefinition;

#endif 	/* __ksPlane3PointsDefinition_FWD_DEFINED__ */


#ifndef __ksPlaneNormalToSurfaceDefinition_FWD_DEFINED__
#define __ksPlaneNormalToSurfaceDefinition_FWD_DEFINED__
typedef interface ksPlaneNormalToSurfaceDefinition ksPlaneNormalToSurfaceDefinition;

#endif 	/* __ksPlaneNormalToSurfaceDefinition_FWD_DEFINED__ */


#ifndef __ksPlaneTangentToSurfaceDefinition_FWD_DEFINED__
#define __ksPlaneTangentToSurfaceDefinition_FWD_DEFINED__
typedef interface ksPlaneTangentToSurfaceDefinition ksPlaneTangentToSurfaceDefinition;

#endif 	/* __ksPlaneTangentToSurfaceDefinition_FWD_DEFINED__ */


#ifndef __ksPlaneEdgePointDefinition_FWD_DEFINED__
#define __ksPlaneEdgePointDefinition_FWD_DEFINED__
typedef interface ksPlaneEdgePointDefinition ksPlaneEdgePointDefinition;

#endif 	/* __ksPlaneEdgePointDefinition_FWD_DEFINED__ */


#ifndef __ksPlaneParallelDefinition_FWD_DEFINED__
#define __ksPlaneParallelDefinition_FWD_DEFINED__
typedef interface ksPlaneParallelDefinition ksPlaneParallelDefinition;

#endif 	/* __ksPlaneParallelDefinition_FWD_DEFINED__ */


#ifndef __ksPlanePerpendicularDefinition_FWD_DEFINED__
#define __ksPlanePerpendicularDefinition_FWD_DEFINED__
typedef interface ksPlanePerpendicularDefinition ksPlanePerpendicularDefinition;

#endif 	/* __ksPlanePerpendicularDefinition_FWD_DEFINED__ */


#ifndef __ksPlaneLineToEdgeDefinition_FWD_DEFINED__
#define __ksPlaneLineToEdgeDefinition_FWD_DEFINED__
typedef interface ksPlaneLineToEdgeDefinition ksPlaneLineToEdgeDefinition;

#endif 	/* __ksPlaneLineToEdgeDefinition_FWD_DEFINED__ */


#ifndef __ksPlaneLineToPlaneDefinition_FWD_DEFINED__
#define __ksPlaneLineToPlaneDefinition_FWD_DEFINED__
typedef interface ksPlaneLineToPlaneDefinition ksPlaneLineToPlaneDefinition;

#endif 	/* __ksPlaneLineToPlaneDefinition_FWD_DEFINED__ */


#ifndef __ksThinParam_FWD_DEFINED__
#define __ksThinParam_FWD_DEFINED__
typedef interface ksThinParam ksThinParam;

#endif 	/* __ksThinParam_FWD_DEFINED__ */


#ifndef __ksExtrusionParam_FWD_DEFINED__
#define __ksExtrusionParam_FWD_DEFINED__
typedef interface ksExtrusionParam ksExtrusionParam;

#endif 	/* __ksExtrusionParam_FWD_DEFINED__ */


#ifndef __ksRotatedParam_FWD_DEFINED__
#define __ksRotatedParam_FWD_DEFINED__
typedef interface ksRotatedParam ksRotatedParam;

#endif 	/* __ksRotatedParam_FWD_DEFINED__ */


#ifndef __ksColorParam_FWD_DEFINED__
#define __ksColorParam_FWD_DEFINED__
typedef interface ksColorParam ksColorParam;

#endif 	/* __ksColorParam_FWD_DEFINED__ */


#ifndef __ksBaseRotatedDefinition_FWD_DEFINED__
#define __ksBaseRotatedDefinition_FWD_DEFINED__
typedef interface ksBaseRotatedDefinition ksBaseRotatedDefinition;

#endif 	/* __ksBaseRotatedDefinition_FWD_DEFINED__ */


#ifndef __ksBossRotatedDefinition_FWD_DEFINED__
#define __ksBossRotatedDefinition_FWD_DEFINED__
typedef interface ksBossRotatedDefinition ksBossRotatedDefinition;

#endif 	/* __ksBossRotatedDefinition_FWD_DEFINED__ */


#ifndef __ksCutRotatedDefinition_FWD_DEFINED__
#define __ksCutRotatedDefinition_FWD_DEFINED__
typedef interface ksCutRotatedDefinition ksCutRotatedDefinition;

#endif 	/* __ksCutRotatedDefinition_FWD_DEFINED__ */


#ifndef __ksRotatedSurfaceDefinition_FWD_DEFINED__
#define __ksRotatedSurfaceDefinition_FWD_DEFINED__
typedef interface ksRotatedSurfaceDefinition ksRotatedSurfaceDefinition;

#endif 	/* __ksRotatedSurfaceDefinition_FWD_DEFINED__ */


#ifndef __ksSketchDefinition_FWD_DEFINED__
#define __ksSketchDefinition_FWD_DEFINED__
typedef interface ksSketchDefinition ksSketchDefinition;

#endif 	/* __ksSketchDefinition_FWD_DEFINED__ */


#ifndef __ksRasterFormatParam_FWD_DEFINED__
#define __ksRasterFormatParam_FWD_DEFINED__
typedef interface ksRasterFormatParam ksRasterFormatParam;

#endif 	/* __ksRasterFormatParam_FWD_DEFINED__ */


#ifndef __ksAdditionFormatParam_FWD_DEFINED__
#define __ksAdditionFormatParam_FWD_DEFINED__
typedef interface ksAdditionFormatParam ksAdditionFormatParam;

#endif 	/* __ksAdditionFormatParam_FWD_DEFINED__ */


#ifndef __ksConstraintParam_FWD_DEFINED__
#define __ksConstraintParam_FWD_DEFINED__
typedef interface ksConstraintParam ksConstraintParam;

#endif 	/* __ksConstraintParam_FWD_DEFINED__ */


#ifndef __ksImportedSurfaceDefinition_FWD_DEFINED__
#define __ksImportedSurfaceDefinition_FWD_DEFINED__
typedef interface ksImportedSurfaceDefinition ksImportedSurfaceDefinition;

#endif 	/* __ksImportedSurfaceDefinition_FWD_DEFINED__ */


#ifndef __ksFaceCollection_FWD_DEFINED__
#define __ksFaceCollection_FWD_DEFINED__
typedef interface ksFaceCollection ksFaceCollection;

#endif 	/* __ksFaceCollection_FWD_DEFINED__ */


#ifndef __ksVertexDefinition_FWD_DEFINED__
#define __ksVertexDefinition_FWD_DEFINED__
typedef interface ksVertexDefinition ksVertexDefinition;

#endif 	/* __ksVertexDefinition_FWD_DEFINED__ */


#ifndef __ksTessellation_FWD_DEFINED__
#define __ksTessellation_FWD_DEFINED__
typedef interface ksTessellation ksTessellation;

#endif 	/* __ksTessellation_FWD_DEFINED__ */


#ifndef __ksFacet_FWD_DEFINED__
#define __ksFacet_FWD_DEFINED__
typedef interface ksFacet ksFacet;

#endif 	/* __ksFacet_FWD_DEFINED__ */


#ifndef __ksMeasurer_FWD_DEFINED__
#define __ksMeasurer_FWD_DEFINED__
typedef interface ksMeasurer ksMeasurer;

#endif 	/* __ksMeasurer_FWD_DEFINED__ */


#ifndef __ksBodyCollection_FWD_DEFINED__
#define __ksBodyCollection_FWD_DEFINED__
typedef interface ksBodyCollection ksBodyCollection;

#endif 	/* __ksBodyCollection_FWD_DEFINED__ */


#ifndef __ksBody_FWD_DEFINED__
#define __ksBody_FWD_DEFINED__
typedef interface ksBody ksBody;

#endif 	/* __ksBody_FWD_DEFINED__ */


#ifndef __ksSurface_FWD_DEFINED__
#define __ksSurface_FWD_DEFINED__
typedef interface ksSurface ksSurface;

#endif 	/* __ksSurface_FWD_DEFINED__ */


#ifndef __ksEdgeCollection_FWD_DEFINED__
#define __ksEdgeCollection_FWD_DEFINED__
typedef interface ksEdgeCollection ksEdgeCollection;

#endif 	/* __ksEdgeCollection_FWD_DEFINED__ */


#ifndef __ksOrientedEdge_FWD_DEFINED__
#define __ksOrientedEdge_FWD_DEFINED__
typedef interface ksOrientedEdge ksOrientedEdge;

#endif 	/* __ksOrientedEdge_FWD_DEFINED__ */


#ifndef __ksOrientedEdgeCollection_FWD_DEFINED__
#define __ksOrientedEdgeCollection_FWD_DEFINED__
typedef interface ksOrientedEdgeCollection ksOrientedEdgeCollection;

#endif 	/* __ksOrientedEdgeCollection_FWD_DEFINED__ */


#ifndef __ksLoop_FWD_DEFINED__
#define __ksLoop_FWD_DEFINED__
typedef interface ksLoop ksLoop;

#endif 	/* __ksLoop_FWD_DEFINED__ */


#ifndef __ksLoopCollection_FWD_DEFINED__
#define __ksLoopCollection_FWD_DEFINED__
typedef interface ksLoopCollection ksLoopCollection;

#endif 	/* __ksLoopCollection_FWD_DEFINED__ */


#ifndef __ksCurve3D_FWD_DEFINED__
#define __ksCurve3D_FWD_DEFINED__
typedef interface ksCurve3D ksCurve3D;

#endif 	/* __ksCurve3D_FWD_DEFINED__ */


#ifndef __ksLineSeg3dParam_FWD_DEFINED__
#define __ksLineSeg3dParam_FWD_DEFINED__
typedef interface ksLineSeg3dParam ksLineSeg3dParam;

#endif 	/* __ksLineSeg3dParam_FWD_DEFINED__ */


#ifndef __ksCircle3dParam_FWD_DEFINED__
#define __ksCircle3dParam_FWD_DEFINED__
typedef interface ksCircle3dParam ksCircle3dParam;

#endif 	/* __ksCircle3dParam_FWD_DEFINED__ */


#ifndef __ksEllipse3dParam_FWD_DEFINED__
#define __ksEllipse3dParam_FWD_DEFINED__
typedef interface ksEllipse3dParam ksEllipse3dParam;

#endif 	/* __ksEllipse3dParam_FWD_DEFINED__ */


#ifndef __ksPlaneParam_FWD_DEFINED__
#define __ksPlaneParam_FWD_DEFINED__
typedef interface ksPlaneParam ksPlaneParam;

#endif 	/* __ksPlaneParam_FWD_DEFINED__ */


#ifndef __ksConeParam_FWD_DEFINED__
#define __ksConeParam_FWD_DEFINED__
typedef interface ksConeParam ksConeParam;

#endif 	/* __ksConeParam_FWD_DEFINED__ */


#ifndef __ksCylinderParam_FWD_DEFINED__
#define __ksCylinderParam_FWD_DEFINED__
typedef interface ksCylinderParam ksCylinderParam;

#endif 	/* __ksCylinderParam_FWD_DEFINED__ */


#ifndef __ksSphereParam_FWD_DEFINED__
#define __ksSphereParam_FWD_DEFINED__
typedef interface ksSphereParam ksSphereParam;

#endif 	/* __ksSphereParam_FWD_DEFINED__ */


#ifndef __ksTorusParam_FWD_DEFINED__
#define __ksTorusParam_FWD_DEFINED__
typedef interface ksTorusParam ksTorusParam;

#endif 	/* __ksTorusParam_FWD_DEFINED__ */


#ifndef __ksNurbsPoint3dParam_FWD_DEFINED__
#define __ksNurbsPoint3dParam_FWD_DEFINED__
typedef interface ksNurbsPoint3dParam ksNurbsPoint3dParam;

#endif 	/* __ksNurbsPoint3dParam_FWD_DEFINED__ */


#ifndef __ksNurbsSurfaceParam_FWD_DEFINED__
#define __ksNurbsSurfaceParam_FWD_DEFINED__
typedef interface ksNurbsSurfaceParam ksNurbsSurfaceParam;

#endif 	/* __ksNurbsSurfaceParam_FWD_DEFINED__ */


#ifndef __ksNurbs3dParam_FWD_DEFINED__
#define __ksNurbs3dParam_FWD_DEFINED__
typedef interface ksNurbs3dParam ksNurbs3dParam;

#endif 	/* __ksNurbs3dParam_FWD_DEFINED__ */


#ifndef __ksNurbsKnotCollection_FWD_DEFINED__
#define __ksNurbsKnotCollection_FWD_DEFINED__
typedef interface ksNurbsKnotCollection ksNurbsKnotCollection;

#endif 	/* __ksNurbsKnotCollection_FWD_DEFINED__ */


#ifndef __ksNurbsPoint3dCollCollection_FWD_DEFINED__
#define __ksNurbsPoint3dCollCollection_FWD_DEFINED__
typedef interface ksNurbsPoint3dCollCollection ksNurbsPoint3dCollCollection;

#endif 	/* __ksNurbsPoint3dCollCollection_FWD_DEFINED__ */


#ifndef __ksNurbsPoint3dCollection_FWD_DEFINED__
#define __ksNurbsPoint3dCollection_FWD_DEFINED__
typedef interface ksNurbsPoint3dCollection ksNurbsPoint3dCollection;

#endif 	/* __ksNurbsPoint3dCollection_FWD_DEFINED__ */


#ifndef __ksViewProjection_FWD_DEFINED__
#define __ksViewProjection_FWD_DEFINED__
typedef interface ksViewProjection ksViewProjection;

#endif 	/* __ksViewProjection_FWD_DEFINED__ */


#ifndef __ksViewProjectionCollection_FWD_DEFINED__
#define __ksViewProjectionCollection_FWD_DEFINED__
typedef interface ksViewProjectionCollection ksViewProjectionCollection;

#endif 	/* __ksViewProjectionCollection_FWD_DEFINED__ */


#ifndef __ksSelectionMng_FWD_DEFINED__
#define __ksSelectionMng_FWD_DEFINED__
typedef interface ksSelectionMng ksSelectionMng;

#endif 	/* __ksSelectionMng_FWD_DEFINED__ */


#ifndef __ksChooseMng_FWD_DEFINED__
#define __ksChooseMng_FWD_DEFINED__
typedef interface ksChooseMng ksChooseMng;

#endif 	/* __ksChooseMng_FWD_DEFINED__ */


#ifndef __ksArc3dParam_FWD_DEFINED__
#define __ksArc3dParam_FWD_DEFINED__
typedef interface ksArc3dParam ksArc3dParam;

#endif 	/* __ksArc3dParam_FWD_DEFINED__ */


#ifndef __ksTreeNodeParam_FWD_DEFINED__
#define __ksTreeNodeParam_FWD_DEFINED__
typedef interface ksTreeNodeParam ksTreeNodeParam;

#endif 	/* __ksTreeNodeParam_FWD_DEFINED__ */


#ifndef __ksAssociationViewParam_FWD_DEFINED__
#define __ksAssociationViewParam_FWD_DEFINED__
typedef interface ksAssociationViewParam ksAssociationViewParam;

#endif 	/* __ksAssociationViewParam_FWD_DEFINED__ */


#ifndef __ksViewColorParam_FWD_DEFINED__
#define __ksViewColorParam_FWD_DEFINED__
typedef interface ksViewColorParam ksViewColorParam;

#endif 	/* __ksViewColorParam_FWD_DEFINED__ */


#ifndef __ksAxisLineParam_FWD_DEFINED__
#define __ksAxisLineParam_FWD_DEFINED__
typedef interface ksAxisLineParam ksAxisLineParam;

#endif 	/* __ksAxisLineParam_FWD_DEFINED__ */


#ifndef __ksTextDocumentParam_FWD_DEFINED__
#define __ksTextDocumentParam_FWD_DEFINED__
typedef interface ksTextDocumentParam ksTextDocumentParam;

#endif 	/* __ksTextDocumentParam_FWD_DEFINED__ */


#ifndef __ksRemoteElementParam_FWD_DEFINED__
#define __ksRemoteElementParam_FWD_DEFINED__
typedef interface ksRemoteElementParam ksRemoteElementParam;

#endif 	/* __ksRemoteElementParam_FWD_DEFINED__ */


#ifndef __ksDeletedCopyCollection_FWD_DEFINED__
#define __ksDeletedCopyCollection_FWD_DEFINED__
typedef interface ksDeletedCopyCollection ksDeletedCopyCollection;

#endif 	/* __ksDeletedCopyCollection_FWD_DEFINED__ */


#ifndef __ksCopyObjectParam_FWD_DEFINED__
#define __ksCopyObjectParam_FWD_DEFINED__
typedef interface ksCopyObjectParam ksCopyObjectParam;

#endif 	/* __ksCopyObjectParam_FWD_DEFINED__ */


#ifndef __ksThreadDefinition_FWD_DEFINED__
#define __ksThreadDefinition_FWD_DEFINED__
typedef interface ksThreadDefinition ksThreadDefinition;

#endif 	/* __ksThreadDefinition_FWD_DEFINED__ */


#ifndef __ksOverlapObjectOptions_FWD_DEFINED__
#define __ksOverlapObjectOptions_FWD_DEFINED__
typedef interface ksOverlapObjectOptions ksOverlapObjectOptions;

#endif 	/* __ksOverlapObjectOptions_FWD_DEFINED__ */


#ifndef __ksObjectsFilter3D_FWD_DEFINED__
#define __ksObjectsFilter3D_FWD_DEFINED__
typedef interface ksObjectsFilter3D ksObjectsFilter3D;

#endif 	/* __ksObjectsFilter3D_FWD_DEFINED__ */


#ifndef __ksParametrizationParam_FWD_DEFINED__
#define __ksParametrizationParam_FWD_DEFINED__
typedef interface ksParametrizationParam ksParametrizationParam;

#endif 	/* __ksParametrizationParam_FWD_DEFINED__ */


#ifndef __ksMacro3DDefinition_FWD_DEFINED__
#define __ksMacro3DDefinition_FWD_DEFINED__
typedef interface ksMacro3DDefinition ksMacro3DDefinition;

#endif 	/* __ksMacro3DDefinition_FWD_DEFINED__ */


#ifndef __ksAxisConefaceDefinition_FWD_DEFINED__
#define __ksAxisConefaceDefinition_FWD_DEFINED__
typedef interface ksAxisConefaceDefinition ksAxisConefaceDefinition;

#endif 	/* __ksAxisConefaceDefinition_FWD_DEFINED__ */


#ifndef __ksUnionComponentsDefinition_FWD_DEFINED__
#define __ksUnionComponentsDefinition_FWD_DEFINED__
typedef interface ksUnionComponentsDefinition ksUnionComponentsDefinition;

#endif 	/* __ksUnionComponentsDefinition_FWD_DEFINED__ */


#ifndef __ksMoldCavityDefinition_FWD_DEFINED__
#define __ksMoldCavityDefinition_FWD_DEFINED__
typedef interface ksMoldCavityDefinition ksMoldCavityDefinition;

#endif 	/* __ksMoldCavityDefinition_FWD_DEFINED__ */


#ifndef __ksCoordinate3dCollection_FWD_DEFINED__
#define __ksCoordinate3dCollection_FWD_DEFINED__
typedef interface ksCoordinate3dCollection ksCoordinate3dCollection;

#endif 	/* __ksCoordinate3dCollection_FWD_DEFINED__ */


#ifndef __ksIntersectionResult_FWD_DEFINED__
#define __ksIntersectionResult_FWD_DEFINED__
typedef interface ksIntersectionResult ksIntersectionResult;

#endif 	/* __ksIntersectionResult_FWD_DEFINED__ */


#ifndef __ksPlaneMiddleDefinition_FWD_DEFINED__
#define __ksPlaneMiddleDefinition_FWD_DEFINED__
typedef interface ksPlaneMiddleDefinition ksPlaneMiddleDefinition;

#endif 	/* __ksPlaneMiddleDefinition_FWD_DEFINED__ */


#ifndef __ksControlPointDefinition_FWD_DEFINED__
#define __ksControlPointDefinition_FWD_DEFINED__
typedef interface ksControlPointDefinition ksControlPointDefinition;

#endif 	/* __ksControlPointDefinition_FWD_DEFINED__ */


#ifndef __ksConjunctivePointDefinition_FWD_DEFINED__
#define __ksConjunctivePointDefinition_FWD_DEFINED__
typedef interface ksConjunctivePointDefinition ksConjunctivePointDefinition;

#endif 	/* __ksConjunctivePointDefinition_FWD_DEFINED__ */


#ifndef __ksChooseBodies_FWD_DEFINED__
#define __ksChooseBodies_FWD_DEFINED__
typedef interface ksChooseBodies ksChooseBodies;

#endif 	/* __ksChooseBodies_FWD_DEFINED__ */


#ifndef __ksAggregateDefinition_FWD_DEFINED__
#define __ksAggregateDefinition_FWD_DEFINED__
typedef interface ksAggregateDefinition ksAggregateDefinition;

#endif 	/* __ksAggregateDefinition_FWD_DEFINED__ */


#ifndef __ksPolyLineVertexParam_FWD_DEFINED__
#define __ksPolyLineVertexParam_FWD_DEFINED__
typedef interface ksPolyLineVertexParam ksPolyLineVertexParam;

#endif 	/* __ksPolyLineVertexParam_FWD_DEFINED__ */


#ifndef __ksChangeLeaderParam_FWD_DEFINED__
#define __ksChangeLeaderParam_FWD_DEFINED__
typedef interface ksChangeLeaderParam ksChangeLeaderParam;

#endif 	/* __ksChangeLeaderParam_FWD_DEFINED__ */


#ifndef __Application_FWD_DEFINED__
#define __Application_FWD_DEFINED__

#ifdef __cplusplus
typedef class Application Application;
#else
typedef struct Application Application;
#endif /* __cplusplus */

#endif 	/* __Application_FWD_DEFINED__ */


#ifndef __KompasInvisible5_FWD_DEFINED__
#define __KompasInvisible5_FWD_DEFINED__

#ifdef __cplusplus
typedef class KompasInvisible5 KompasInvisible5;
#else
typedef struct KompasInvisible5 KompasInvisible5;
#endif /* __cplusplus */

#endif 	/* __KompasInvisible5_FWD_DEFINED__ */


#ifndef __Document2DNotify_FWD_DEFINED__
#define __Document2DNotify_FWD_DEFINED__

#ifdef __cplusplus
typedef class Document2DNotify Document2DNotify;
#else
typedef struct Document2DNotify Document2DNotify;
#endif /* __cplusplus */

#endif 	/* __Document2DNotify_FWD_DEFINED__ */


#ifndef __Object2DNotify_FWD_DEFINED__
#define __Object2DNotify_FWD_DEFINED__

#ifdef __cplusplus
typedef class Object2DNotify Object2DNotify;
#else
typedef struct Object2DNotify Object2DNotify;
#endif /* __cplusplus */

#endif 	/* __Object2DNotify_FWD_DEFINED__ */


#ifndef __Object3DNotify_FWD_DEFINED__
#define __Object3DNotify_FWD_DEFINED__

#ifdef __cplusplus
typedef class Object3DNotify Object3DNotify;
#else
typedef struct Object3DNotify Object3DNotify;
#endif /* __cplusplus */

#endif 	/* __Object3DNotify_FWD_DEFINED__ */


#ifndef __Object2DNotifyResult_FWD_DEFINED__
#define __Object2DNotifyResult_FWD_DEFINED__

#ifdef __cplusplus
typedef class Object2DNotifyResult Object2DNotifyResult;
#else
typedef struct Object2DNotifyResult Object2DNotifyResult;
#endif /* __cplusplus */

#endif 	/* __Object2DNotifyResult_FWD_DEFINED__ */


#ifndef __FeatureCollection_FWD_DEFINED__
#define __FeatureCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class FeatureCollection FeatureCollection;
#else
typedef struct FeatureCollection FeatureCollection;
#endif /* __cplusplus */

#endif 	/* __FeatureCollection_FWD_DEFINED__ */


#ifndef __Placement_FWD_DEFINED__
#define __Placement_FWD_DEFINED__

#ifdef __cplusplus
typedef class Placement Placement;
#else
typedef struct Placement Placement;
#endif /* __cplusplus */

#endif 	/* __Placement_FWD_DEFINED__ */


#ifndef __Object3DNotifyResult_FWD_DEFINED__
#define __Object3DNotifyResult_FWD_DEFINED__

#ifdef __cplusplus
typedef class Object3DNotifyResult Object3DNotifyResult;
#else
typedef struct Object3DNotifyResult Object3DNotifyResult;
#endif /* __cplusplus */

#endif 	/* __Object3DNotifyResult_FWD_DEFINED__ */


#ifndef __Document3DNotifyResult_FWD_DEFINED__
#define __Document3DNotifyResult_FWD_DEFINED__

#ifdef __cplusplus
typedef class Document3DNotifyResult Document3DNotifyResult;
#else
typedef struct Document3DNotifyResult Document3DNotifyResult;
#endif /* __cplusplus */

#endif 	/* __Document3DNotifyResult_FWD_DEFINED__ */


#ifndef __SelectionMngNotify_FWD_DEFINED__
#define __SelectionMngNotify_FWD_DEFINED__

#ifdef __cplusplus
typedef class SelectionMngNotify SelectionMngNotify;
#else
typedef struct SelectionMngNotify SelectionMngNotify;
#endif /* __cplusplus */

#endif 	/* __SelectionMngNotify_FWD_DEFINED__ */


#ifndef __Document2D_FWD_DEFINED__
#define __Document2D_FWD_DEFINED__

#ifdef __cplusplus
typedef class Document2D Document2D;
#else
typedef struct Document2D Document2D;
#endif /* __cplusplus */

#endif 	/* __Document2D_FWD_DEFINED__ */


#ifndef __SpecRoughParam_FWD_DEFINED__
#define __SpecRoughParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class SpecRoughParam SpecRoughParam;
#else
typedef struct SpecRoughParam SpecRoughParam;
#endif /* __cplusplus */

#endif 	/* __SpecRoughParam_FWD_DEFINED__ */


#ifndef __EllipseParam_FWD_DEFINED__
#define __EllipseParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class EllipseParam EllipseParam;
#else
typedef struct EllipseParam EllipseParam;
#endif /* __cplusplus */

#endif 	/* __EllipseParam_FWD_DEFINED__ */


#ifndef __EllipseArcParam_FWD_DEFINED__
#define __EllipseArcParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class EllipseArcParam EllipseArcParam;
#else
typedef struct EllipseArcParam EllipseArcParam;
#endif /* __cplusplus */

#endif 	/* __EllipseArcParam_FWD_DEFINED__ */


#ifndef __EllipseArcParam1_FWD_DEFINED__
#define __EllipseArcParam1_FWD_DEFINED__

#ifdef __cplusplus
typedef class EllipseArcParam1 EllipseArcParam1;
#else
typedef struct EllipseArcParam1 EllipseArcParam1;
#endif /* __cplusplus */

#endif 	/* __EllipseArcParam1_FWD_DEFINED__ */


#ifndef __EquidistantParam_FWD_DEFINED__
#define __EquidistantParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class EquidistantParam EquidistantParam;
#else
typedef struct EquidistantParam EquidistantParam;
#endif /* __cplusplus */

#endif 	/* __EquidistantParam_FWD_DEFINED__ */


#ifndef __ParagraphParam_FWD_DEFINED__
#define __ParagraphParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ParagraphParam ParagraphParam;
#else
typedef struct ParagraphParam ParagraphParam;
#endif /* __cplusplus */

#endif 	/* __ParagraphParam_FWD_DEFINED__ */


#ifndef __TextItemParam_FWD_DEFINED__
#define __TextItemParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextItemParam TextItemParam;
#else
typedef struct TextItemParam TextItemParam;
#endif /* __cplusplus */

#endif 	/* __TextItemParam_FWD_DEFINED__ */


#ifndef __TextLineParam_FWD_DEFINED__
#define __TextLineParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextLineParam TextLineParam;
#else
typedef struct TextLineParam TextLineParam;
#endif /* __cplusplus */

#endif 	/* __TextLineParam_FWD_DEFINED__ */


#ifndef __TextItemFont_FWD_DEFINED__
#define __TextItemFont_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextItemFont TextItemFont;
#else
typedef struct TextItemFont TextItemFont;
#endif /* __cplusplus */

#endif 	/* __TextItemFont_FWD_DEFINED__ */


#ifndef __CornerParam_FWD_DEFINED__
#define __CornerParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class CornerParam CornerParam;
#else
typedef struct CornerParam CornerParam;
#endif /* __cplusplus */

#endif 	/* __CornerParam_FWD_DEFINED__ */


#ifndef __ContourParam_FWD_DEFINED__
#define __ContourParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ContourParam ContourParam;
#else
typedef struct ContourParam ContourParam;
#endif /* __cplusplus */

#endif 	/* __ContourParam_FWD_DEFINED__ */


#ifndef __LayerParam_FWD_DEFINED__
#define __LayerParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class LayerParam LayerParam;
#else
typedef struct LayerParam LayerParam;
#endif /* __cplusplus */

#endif 	/* __LayerParam_FWD_DEFINED__ */


#ifndef __LineParam_FWD_DEFINED__
#define __LineParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class LineParam LineParam;
#else
typedef struct LineParam LineParam;
#endif /* __cplusplus */

#endif 	/* __LineParam_FWD_DEFINED__ */


#ifndef __RegularPolygonParam_FWD_DEFINED__
#define __RegularPolygonParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class RegularPolygonParam RegularPolygonParam;
#else
typedef struct RegularPolygonParam RegularPolygonParam;
#endif /* __cplusplus */

#endif 	/* __RegularPolygonParam_FWD_DEFINED__ */


#ifndef __RectangleParam_FWD_DEFINED__
#define __RectangleParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class RectangleParam RectangleParam;
#else
typedef struct RectangleParam RectangleParam;
#endif /* __cplusplus */

#endif 	/* __RectangleParam_FWD_DEFINED__ */


#ifndef __BaseParam_FWD_DEFINED__
#define __BaseParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class BaseParam BaseParam;
#else
typedef struct BaseParam BaseParam;
#endif /* __cplusplus */

#endif 	/* __BaseParam_FWD_DEFINED__ */


#ifndef __LtVariant_FWD_DEFINED__
#define __LtVariant_FWD_DEFINED__

#ifdef __cplusplus
typedef class LtVariant LtVariant;
#else
typedef struct LtVariant LtVariant;
#endif /* __cplusplus */

#endif 	/* __LtVariant_FWD_DEFINED__ */


#ifndef __UserParam_FWD_DEFINED__
#define __UserParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class UserParam UserParam;
#else
typedef struct UserParam UserParam;
#endif /* __cplusplus */

#endif 	/* __UserParam_FWD_DEFINED__ */


#ifndef __MathPointParam_FWD_DEFINED__
#define __MathPointParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class MathPointParam MathPointParam;
#else
typedef struct MathPointParam MathPointParam;
#endif /* __cplusplus */

#endif 	/* __MathPointParam_FWD_DEFINED__ */


#ifndef __CurvePicture_FWD_DEFINED__
#define __CurvePicture_FWD_DEFINED__

#ifdef __cplusplus
typedef class CurvePicture CurvePicture;
#else
typedef struct CurvePicture CurvePicture;
#endif /* __cplusplus */

#endif 	/* __CurvePicture_FWD_DEFINED__ */


#ifndef __CurvePattern_FWD_DEFINED__
#define __CurvePattern_FWD_DEFINED__

#ifdef __cplusplus
typedef class CurvePattern CurvePattern;
#else
typedef struct CurvePattern CurvePattern;
#endif /* __cplusplus */

#endif 	/* __CurvePattern_FWD_DEFINED__ */


#ifndef __TAN_FWD_DEFINED__
#define __TAN_FWD_DEFINED__

#ifdef __cplusplus
typedef class TAN TAN;
#else
typedef struct TAN TAN;
#endif /* __cplusplus */

#endif 	/* __TAN_FWD_DEFINED__ */


#ifndef __CON_FWD_DEFINED__
#define __CON_FWD_DEFINED__

#ifdef __cplusplus
typedef class CON CON;
#else
typedef struct CON CON;
#endif /* __cplusplus */

#endif 	/* __CON_FWD_DEFINED__ */


#ifndef __InertiaParam_FWD_DEFINED__
#define __InertiaParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class InertiaParam InertiaParam;
#else
typedef struct InertiaParam InertiaParam;
#endif /* __cplusplus */

#endif 	/* __InertiaParam_FWD_DEFINED__ */


#ifndef __MassInertiaParam_FWD_DEFINED__
#define __MassInertiaParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class MassInertiaParam MassInertiaParam;
#else
typedef struct MassInertiaParam MassInertiaParam;
#endif /* __cplusplus */

#endif 	/* __MassInertiaParam_FWD_DEFINED__ */


#ifndef __Mathematic2D_FWD_DEFINED__
#define __Mathematic2D_FWD_DEFINED__

#ifdef __cplusplus
typedef class Mathematic2D Mathematic2D;
#else
typedef struct Mathematic2D Mathematic2D;
#endif /* __cplusplus */

#endif 	/* __Mathematic2D_FWD_DEFINED__ */


#ifndef __DynamicArray_FWD_DEFINED__
#define __DynamicArray_FWD_DEFINED__

#ifdef __cplusplus
typedef class DynamicArray DynamicArray;
#else
typedef struct DynamicArray DynamicArray;
#endif /* __cplusplus */

#endif 	/* __DynamicArray_FWD_DEFINED__ */


#ifndef __RDimDrawingParam_FWD_DEFINED__
#define __RDimDrawingParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class RDimDrawingParam RDimDrawingParam;
#else
typedef struct RDimDrawingParam RDimDrawingParam;
#endif /* __cplusplus */

#endif 	/* __RDimDrawingParam_FWD_DEFINED__ */


#ifndef __RDimSourceParam_FWD_DEFINED__
#define __RDimSourceParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class RDimSourceParam RDimSourceParam;
#else
typedef struct RDimSourceParam RDimSourceParam;
#endif /* __cplusplus */

#endif 	/* __RDimSourceParam_FWD_DEFINED__ */


#ifndef __RDimParam_FWD_DEFINED__
#define __RDimParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class RDimParam RDimParam;
#else
typedef struct RDimParam RDimParam;
#endif /* __cplusplus */

#endif 	/* __RDimParam_FWD_DEFINED__ */


#ifndef __LineSegParam_FWD_DEFINED__
#define __LineSegParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class LineSegParam LineSegParam;
#else
typedef struct LineSegParam LineSegParam;
#endif /* __cplusplus */

#endif 	/* __LineSegParam_FWD_DEFINED__ */


#ifndef __CircleParam_FWD_DEFINED__
#define __CircleParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class CircleParam CircleParam;
#else
typedef struct CircleParam CircleParam;
#endif /* __cplusplus */

#endif 	/* __CircleParam_FWD_DEFINED__ */


#ifndef __ArcByAngleParam_FWD_DEFINED__
#define __ArcByAngleParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ArcByAngleParam ArcByAngleParam;
#else
typedef struct ArcByAngleParam ArcByAngleParam;
#endif /* __cplusplus */

#endif 	/* __ArcByAngleParam_FWD_DEFINED__ */


#ifndef __ArcByPointParam_FWD_DEFINED__
#define __ArcByPointParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ArcByPointParam ArcByPointParam;
#else
typedef struct ArcByPointParam ArcByPointParam;
#endif /* __cplusplus */

#endif 	/* __ArcByPointParam_FWD_DEFINED__ */


#ifndef __PointParam_FWD_DEFINED__
#define __PointParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class PointParam PointParam;
#else
typedef struct PointParam PointParam;
#endif /* __cplusplus */

#endif 	/* __PointParam_FWD_DEFINED__ */


#ifndef __HatchParam_FWD_DEFINED__
#define __HatchParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class HatchParam HatchParam;
#else
typedef struct HatchParam HatchParam;
#endif /* __cplusplus */

#endif 	/* __HatchParam_FWD_DEFINED__ */


#ifndef __TextParam_FWD_DEFINED__
#define __TextParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextParam TextParam;
#else
typedef struct TextParam TextParam;
#endif /* __cplusplus */

#endif 	/* __TextParam_FWD_DEFINED__ */


#ifndef __NurbsPointParam_FWD_DEFINED__
#define __NurbsPointParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class NurbsPointParam NurbsPointParam;
#else
typedef struct NurbsPointParam NurbsPointParam;
#endif /* __cplusplus */

#endif 	/* __NurbsPointParam_FWD_DEFINED__ */


#ifndef __DoubleValue_FWD_DEFINED__
#define __DoubleValue_FWD_DEFINED__

#ifdef __cplusplus
typedef class DoubleValue DoubleValue;
#else
typedef struct DoubleValue DoubleValue;
#endif /* __cplusplus */

#endif 	/* __DoubleValue_FWD_DEFINED__ */


#ifndef __NurbsParam_FWD_DEFINED__
#define __NurbsParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class NurbsParam NurbsParam;
#else
typedef struct NurbsParam NurbsParam;
#endif /* __cplusplus */

#endif 	/* __NurbsParam_FWD_DEFINED__ */


#ifndef __ConicArcParam_FWD_DEFINED__
#define __ConicArcParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ConicArcParam ConicArcParam;
#else
typedef struct ConicArcParam ConicArcParam;
#endif /* __cplusplus */

#endif 	/* __ConicArcParam_FWD_DEFINED__ */


#ifndef __CentreParam_FWD_DEFINED__
#define __CentreParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class CentreParam CentreParam;
#else
typedef struct CentreParam CentreParam;
#endif /* __cplusplus */

#endif 	/* __CentreParam_FWD_DEFINED__ */


#ifndef __PlacementParam_FWD_DEFINED__
#define __PlacementParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class PlacementParam PlacementParam;
#else
typedef struct PlacementParam PlacementParam;
#endif /* __cplusplus */

#endif 	/* __PlacementParam_FWD_DEFINED__ */


#ifndef __RasterParam_FWD_DEFINED__
#define __RasterParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class RasterParam RasterParam;
#else
typedef struct RasterParam RasterParam;
#endif /* __cplusplus */

#endif 	/* __RasterParam_FWD_DEFINED__ */


#ifndef __PolylineParam_FWD_DEFINED__
#define __PolylineParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class PolylineParam PolylineParam;
#else
typedef struct PolylineParam PolylineParam;
#endif /* __cplusplus */

#endif 	/* __PolylineParam_FWD_DEFINED__ */


#ifndef __InsertFragmentParam_FWD_DEFINED__
#define __InsertFragmentParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class InsertFragmentParam InsertFragmentParam;
#else
typedef struct InsertFragmentParam InsertFragmentParam;
#endif /* __cplusplus */

#endif 	/* __InsertFragmentParam_FWD_DEFINED__ */


#ifndef __ViewParam_FWD_DEFINED__
#define __ViewParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ViewParam ViewParam;
#else
typedef struct ViewParam ViewParam;
#endif /* __cplusplus */

#endif 	/* __ViewParam_FWD_DEFINED__ */


#ifndef __LBreakDimSource_FWD_DEFINED__
#define __LBreakDimSource_FWD_DEFINED__

#ifdef __cplusplus
typedef class LBreakDimSource LBreakDimSource;
#else
typedef struct LBreakDimSource LBreakDimSource;
#endif /* __cplusplus */

#endif 	/* __LBreakDimSource_FWD_DEFINED__ */


#ifndef __BreakDimDrawing_FWD_DEFINED__
#define __BreakDimDrawing_FWD_DEFINED__

#ifdef __cplusplus
typedef class BreakDimDrawing BreakDimDrawing;
#else
typedef struct BreakDimDrawing BreakDimDrawing;
#endif /* __cplusplus */

#endif 	/* __BreakDimDrawing_FWD_DEFINED__ */


#ifndef __LBreakDimParam_FWD_DEFINED__
#define __LBreakDimParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class LBreakDimParam LBreakDimParam;
#else
typedef struct LBreakDimParam LBreakDimParam;
#endif /* __cplusplus */

#endif 	/* __LBreakDimParam_FWD_DEFINED__ */


#ifndef __ABreakDimParam_FWD_DEFINED__
#define __ABreakDimParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ABreakDimParam ABreakDimParam;
#else
typedef struct ABreakDimParam ABreakDimParam;
#endif /* __cplusplus */

#endif 	/* __ABreakDimParam_FWD_DEFINED__ */


#ifndef __InsertFragmentParamEx_FWD_DEFINED__
#define __InsertFragmentParamEx_FWD_DEFINED__

#ifdef __cplusplus
typedef class InsertFragmentParamEx InsertFragmentParamEx;
#else
typedef struct InsertFragmentParamEx InsertFragmentParamEx;
#endif /* __cplusplus */

#endif 	/* __InsertFragmentParamEx_FWD_DEFINED__ */


#ifndef __BezierParam_FWD_DEFINED__
#define __BezierParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class BezierParam BezierParam;
#else
typedef struct BezierParam BezierParam;
#endif /* __cplusplus */

#endif 	/* __BezierParam_FWD_DEFINED__ */


#ifndef __BezierPointParam_FWD_DEFINED__
#define __BezierPointParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class BezierPointParam BezierPointParam;
#else
typedef struct BezierPointParam BezierPointParam;
#endif /* __cplusplus */

#endif 	/* __BezierPointParam_FWD_DEFINED__ */


#ifndef __DimTextParam_FWD_DEFINED__
#define __DimTextParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class DimTextParam DimTextParam;
#else
typedef struct DimTextParam DimTextParam;
#endif /* __cplusplus */

#endif 	/* __DimTextParam_FWD_DEFINED__ */


#ifndef __LDimSourceParam_FWD_DEFINED__
#define __LDimSourceParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class LDimSourceParam LDimSourceParam;
#else
typedef struct LDimSourceParam LDimSourceParam;
#endif /* __cplusplus */

#endif 	/* __LDimSourceParam_FWD_DEFINED__ */


#ifndef __DimDrawingParam_FWD_DEFINED__
#define __DimDrawingParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class DimDrawingParam DimDrawingParam;
#else
typedef struct DimDrawingParam DimDrawingParam;
#endif /* __cplusplus */

#endif 	/* __DimDrawingParam_FWD_DEFINED__ */


#ifndef __LDimParam_FWD_DEFINED__
#define __LDimParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class LDimParam LDimParam;
#else
typedef struct LDimParam LDimParam;
#endif /* __cplusplus */

#endif 	/* __LDimParam_FWD_DEFINED__ */


#ifndef __ADimSourceParam_FWD_DEFINED__
#define __ADimSourceParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ADimSourceParam ADimSourceParam;
#else
typedef struct ADimSourceParam ADimSourceParam;
#endif /* __cplusplus */

#endif 	/* __ADimSourceParam_FWD_DEFINED__ */


#ifndef __DimensionPartsParam_FWD_DEFINED__
#define __DimensionPartsParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class DimensionPartsParam DimensionPartsParam;
#else
typedef struct DimensionPartsParam DimensionPartsParam;
#endif /* __cplusplus */

#endif 	/* __DimensionPartsParam_FWD_DEFINED__ */


#ifndef __ADimParam_FWD_DEFINED__
#define __ADimParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ADimParam ADimParam;
#else
typedef struct ADimParam ADimParam;
#endif /* __cplusplus */

#endif 	/* __ADimParam_FWD_DEFINED__ */


#ifndef __RBreakDrawingParam_FWD_DEFINED__
#define __RBreakDrawingParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class RBreakDrawingParam RBreakDrawingParam;
#else
typedef struct RBreakDrawingParam RBreakDrawingParam;
#endif /* __cplusplus */

#endif 	/* __RBreakDrawingParam_FWD_DEFINED__ */


#ifndef __RBreakDimParam_FWD_DEFINED__
#define __RBreakDimParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class RBreakDimParam RBreakDimParam;
#else
typedef struct RBreakDimParam RBreakDimParam;
#endif /* __cplusplus */

#endif 	/* __RBreakDimParam_FWD_DEFINED__ */


#ifndef __QualityItemParam_FWD_DEFINED__
#define __QualityItemParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class QualityItemParam QualityItemParam;
#else
typedef struct QualityItemParam QualityItemParam;
#endif /* __cplusplus */

#endif 	/* __QualityItemParam_FWD_DEFINED__ */


#ifndef __QualityContensParam_FWD_DEFINED__
#define __QualityContensParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class QualityContensParam QualityContensParam;
#else
typedef struct QualityContensParam QualityContensParam;
#endif /* __cplusplus */

#endif 	/* __QualityContensParam_FWD_DEFINED__ */


#ifndef __Iterator_FWD_DEFINED__
#define __Iterator_FWD_DEFINED__

#ifdef __cplusplus
typedef class Iterator Iterator;
#else
typedef struct Iterator Iterator;
#endif /* __cplusplus */

#endif 	/* __Iterator_FWD_DEFINED__ */


#ifndef __Fragment_FWD_DEFINED__
#define __Fragment_FWD_DEFINED__

#ifdef __cplusplus
typedef class Fragment Fragment;
#else
typedef struct Fragment Fragment;
#endif /* __cplusplus */

#endif 	/* __Fragment_FWD_DEFINED__ */


#ifndef __FragmentLib_FWD_DEFINED__
#define __FragmentLib_FWD_DEFINED__

#ifdef __cplusplus
typedef class FragmentLib FragmentLib;
#else
typedef struct FragmentLib FragmentLib;
#endif /* __cplusplus */

#endif 	/* __FragmentLib_FWD_DEFINED__ */


#ifndef __TechnicalDemandParam_FWD_DEFINED__
#define __TechnicalDemandParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class TechnicalDemandParam TechnicalDemandParam;
#else
typedef struct TechnicalDemandParam TechnicalDemandParam;
#endif /* __cplusplus */

#endif 	/* __TechnicalDemandParam_FWD_DEFINED__ */


#ifndef __OrdinatedSourceParam_FWD_DEFINED__
#define __OrdinatedSourceParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class OrdinatedSourceParam OrdinatedSourceParam;
#else
typedef struct OrdinatedSourceParam OrdinatedSourceParam;
#endif /* __cplusplus */

#endif 	/* __OrdinatedSourceParam_FWD_DEFINED__ */


#ifndef __OrdinatedDimParam_FWD_DEFINED__
#define __OrdinatedDimParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class OrdinatedDimParam OrdinatedDimParam;
#else
typedef struct OrdinatedDimParam OrdinatedDimParam;
#endif /* __cplusplus */

#endif 	/* __OrdinatedDimParam_FWD_DEFINED__ */


#ifndef __OrdinatedDrawingParam_FWD_DEFINED__
#define __OrdinatedDrawingParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class OrdinatedDrawingParam OrdinatedDrawingParam;
#else
typedef struct OrdinatedDrawingParam OrdinatedDrawingParam;
#endif /* __cplusplus */

#endif 	/* __OrdinatedDrawingParam_FWD_DEFINED__ */


#ifndef __SheetSize_FWD_DEFINED__
#define __SheetSize_FWD_DEFINED__

#ifdef __cplusplus
typedef class SheetSize SheetSize;
#else
typedef struct SheetSize SheetSize;
#endif /* __cplusplus */

#endif 	/* __SheetSize_FWD_DEFINED__ */


#ifndef __StandartSheet_FWD_DEFINED__
#define __StandartSheet_FWD_DEFINED__

#ifdef __cplusplus
typedef class StandartSheet StandartSheet;
#else
typedef struct StandartSheet StandartSheet;
#endif /* __cplusplus */

#endif 	/* __StandartSheet_FWD_DEFINED__ */


#ifndef __SheetPar_FWD_DEFINED__
#define __SheetPar_FWD_DEFINED__

#ifdef __cplusplus
typedef class SheetPar SheetPar;
#else
typedef struct SheetPar SheetPar;
#endif /* __cplusplus */

#endif 	/* __SheetPar_FWD_DEFINED__ */


#ifndef __DocumentParam_FWD_DEFINED__
#define __DocumentParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocumentParam DocumentParam;
#else
typedef struct DocumentParam DocumentParam;
#endif /* __cplusplus */

#endif 	/* __DocumentParam_FWD_DEFINED__ */


#ifndef __DimensionsOptions_FWD_DEFINED__
#define __DimensionsOptions_FWD_DEFINED__

#ifdef __cplusplus
typedef class DimensionsOptions DimensionsOptions;
#else
typedef struct DimensionsOptions DimensionsOptions;
#endif /* __cplusplus */

#endif 	/* __DimensionsOptions_FWD_DEFINED__ */


#ifndef __SnapOptions_FWD_DEFINED__
#define __SnapOptions_FWD_DEFINED__

#ifdef __cplusplus
typedef class SnapOptions SnapOptions;
#else
typedef struct SnapOptions SnapOptions;
#endif /* __cplusplus */

#endif 	/* __SnapOptions_FWD_DEFINED__ */


#ifndef __LibraryStyleParam_FWD_DEFINED__
#define __LibraryStyleParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class LibraryStyleParam LibraryStyleParam;
#else
typedef struct LibraryStyleParam LibraryStyleParam;
#endif /* __cplusplus */

#endif 	/* __LibraryStyleParam_FWD_DEFINED__ */


#ifndef __Stamp_FWD_DEFINED__
#define __Stamp_FWD_DEFINED__

#ifdef __cplusplus
typedef class Stamp Stamp;
#else
typedef struct Stamp Stamp;
#endif /* __cplusplus */

#endif 	/* __Stamp_FWD_DEFINED__ */


#ifndef __SheetOptions_FWD_DEFINED__
#define __SheetOptions_FWD_DEFINED__

#ifdef __cplusplus
typedef class SheetOptions SheetOptions;
#else
typedef struct SheetOptions SheetOptions;
#endif /* __cplusplus */

#endif 	/* __SheetOptions_FWD_DEFINED__ */


#ifndef __CurvePatternEx_FWD_DEFINED__
#define __CurvePatternEx_FWD_DEFINED__

#ifdef __cplusplus
typedef class CurvePatternEx CurvePatternEx;
#else
typedef struct CurvePatternEx CurvePatternEx;
#endif /* __cplusplus */

#endif 	/* __CurvePatternEx_FWD_DEFINED__ */


#ifndef __CurveStyleParam_FWD_DEFINED__
#define __CurveStyleParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class CurveStyleParam CurveStyleParam;
#else
typedef struct CurveStyleParam CurveStyleParam;
#endif /* __cplusplus */

#endif 	/* __CurveStyleParam_FWD_DEFINED__ */


#ifndef __TextStyleParam_FWD_DEFINED__
#define __TextStyleParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextStyleParam TextStyleParam;
#else
typedef struct TextStyleParam TextStyleParam;
#endif /* __cplusplus */

#endif 	/* __TextStyleParam_FWD_DEFINED__ */


#ifndef __HatchLineParam_FWD_DEFINED__
#define __HatchLineParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class HatchLineParam HatchLineParam;
#else
typedef struct HatchLineParam HatchLineParam;
#endif /* __cplusplus */

#endif 	/* __HatchLineParam_FWD_DEFINED__ */


#ifndef __HatchStyleParam_FWD_DEFINED__
#define __HatchStyleParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class HatchStyleParam HatchStyleParam;
#else
typedef struct HatchStyleParam HatchStyleParam;
#endif /* __cplusplus */

#endif 	/* __HatchStyleParam_FWD_DEFINED__ */


#ifndef __RectParam_FWD_DEFINED__
#define __RectParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class RectParam RectParam;
#else
typedef struct RectParam RectParam;
#endif /* __cplusplus */

#endif 	/* __RectParam_FWD_DEFINED__ */


#ifndef __ShelfPar_FWD_DEFINED__
#define __ShelfPar_FWD_DEFINED__

#ifdef __cplusplus
typedef class ShelfPar ShelfPar;
#else
typedef struct ShelfPar ShelfPar;
#endif /* __cplusplus */

#endif 	/* __ShelfPar_FWD_DEFINED__ */


#ifndef __RoughPar_FWD_DEFINED__
#define __RoughPar_FWD_DEFINED__

#ifdef __cplusplus
typedef class RoughPar RoughPar;
#else
typedef struct RoughPar RoughPar;
#endif /* __cplusplus */

#endif 	/* __RoughPar_FWD_DEFINED__ */


#ifndef __RoughParam_FWD_DEFINED__
#define __RoughParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class RoughParam RoughParam;
#else
typedef struct RoughParam RoughParam;
#endif /* __cplusplus */

#endif 	/* __RoughParam_FWD_DEFINED__ */


#ifndef __Char255_FWD_DEFINED__
#define __Char255_FWD_DEFINED__

#ifdef __cplusplus
typedef class Char255 Char255;
#else
typedef struct Char255 Char255;
#endif /* __cplusplus */

#endif 	/* __Char255_FWD_DEFINED__ */


#ifndef __LeaderParam_FWD_DEFINED__
#define __LeaderParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class LeaderParam LeaderParam;
#else
typedef struct LeaderParam LeaderParam;
#endif /* __cplusplus */

#endif 	/* __LeaderParam_FWD_DEFINED__ */


#ifndef __PosLeaderParam_FWD_DEFINED__
#define __PosLeaderParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class PosLeaderParam PosLeaderParam;
#else
typedef struct PosLeaderParam PosLeaderParam;
#endif /* __cplusplus */

#endif 	/* __PosLeaderParam_FWD_DEFINED__ */


#ifndef __BrandLeaderParam_FWD_DEFINED__
#define __BrandLeaderParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class BrandLeaderParam BrandLeaderParam;
#else
typedef struct BrandLeaderParam BrandLeaderParam;
#endif /* __cplusplus */

#endif 	/* __BrandLeaderParam_FWD_DEFINED__ */


#ifndef __MarkerLeaderParam_FWD_DEFINED__
#define __MarkerLeaderParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class MarkerLeaderParam MarkerLeaderParam;
#else
typedef struct MarkerLeaderParam MarkerLeaderParam;
#endif /* __cplusplus */

#endif 	/* __MarkerLeaderParam_FWD_DEFINED__ */


#ifndef __Type1_FWD_DEFINED__
#define __Type1_FWD_DEFINED__

#ifdef __cplusplus
typedef class Type1 Type1;
#else
typedef struct Type1 Type1;
#endif /* __cplusplus */

#endif 	/* __Type1_FWD_DEFINED__ */


#ifndef __Type2_FWD_DEFINED__
#define __Type2_FWD_DEFINED__

#ifdef __cplusplus
typedef class Type2 Type2;
#else
typedef struct Type2 Type2;
#endif /* __cplusplus */

#endif 	/* __Type2_FWD_DEFINED__ */


#ifndef __Type3_FWD_DEFINED__
#define __Type3_FWD_DEFINED__

#ifdef __cplusplus
typedef class Type3 Type3;
#else
typedef struct Type3 Type3;
#endif /* __cplusplus */

#endif 	/* __Type3_FWD_DEFINED__ */


#ifndef __Type5_FWD_DEFINED__
#define __Type5_FWD_DEFINED__

#ifdef __cplusplus
typedef class Type5 Type5;
#else
typedef struct Type5 Type5;
#endif /* __cplusplus */

#endif 	/* __Type5_FWD_DEFINED__ */


#ifndef __Type6_FWD_DEFINED__
#define __Type6_FWD_DEFINED__

#ifdef __cplusplus
typedef class Type6 Type6;
#else
typedef struct Type6 Type6;
#endif /* __cplusplus */

#endif 	/* __Type6_FWD_DEFINED__ */


#ifndef __Phantom_FWD_DEFINED__
#define __Phantom_FWD_DEFINED__

#ifdef __cplusplus
typedef class Phantom Phantom;
#else
typedef struct Phantom Phantom;
#endif /* __cplusplus */

#endif 	/* __Phantom_FWD_DEFINED__ */


#ifndef __RequestInfo_FWD_DEFINED__
#define __RequestInfo_FWD_DEFINED__

#ifdef __cplusplus
typedef class RequestInfo RequestInfo;
#else
typedef struct RequestInfo RequestInfo;
#endif /* __cplusplus */

#endif 	/* __RequestInfo_FWD_DEFINED__ */


#ifndef __ViewPointerParam_FWD_DEFINED__
#define __ViewPointerParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ViewPointerParam ViewPointerParam;
#else
typedef struct ViewPointerParam ViewPointerParam;
#endif /* __cplusplus */

#endif 	/* __ViewPointerParam_FWD_DEFINED__ */


#ifndef __CutLineParam_FWD_DEFINED__
#define __CutLineParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class CutLineParam CutLineParam;
#else
typedef struct CutLineParam CutLineParam;
#endif /* __cplusplus */

#endif 	/* __CutLineParam_FWD_DEFINED__ */


#ifndef __ToleranceBranch_FWD_DEFINED__
#define __ToleranceBranch_FWD_DEFINED__

#ifdef __cplusplus
typedef class ToleranceBranch ToleranceBranch;
#else
typedef struct ToleranceBranch ToleranceBranch;
#endif /* __cplusplus */

#endif 	/* __ToleranceBranch_FWD_DEFINED__ */


#ifndef __ToleranceParam_FWD_DEFINED__
#define __ToleranceParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ToleranceParam ToleranceParam;
#else
typedef struct ToleranceParam ToleranceParam;
#endif /* __cplusplus */

#endif 	/* __ToleranceParam_FWD_DEFINED__ */


#ifndef __SpcColumnParam_FWD_DEFINED__
#define __SpcColumnParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class SpcColumnParam SpcColumnParam;
#else
typedef struct SpcColumnParam SpcColumnParam;
#endif /* __cplusplus */

#endif 	/* __SpcColumnParam_FWD_DEFINED__ */


#ifndef __RecordTypeAttrParam_FWD_DEFINED__
#define __RecordTypeAttrParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class RecordTypeAttrParam RecordTypeAttrParam;
#else
typedef struct RecordTypeAttrParam RecordTypeAttrParam;
#endif /* __cplusplus */

#endif 	/* __RecordTypeAttrParam_FWD_DEFINED__ */


#ifndef __NumberTypeAttrParam_FWD_DEFINED__
#define __NumberTypeAttrParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class NumberTypeAttrParam NumberTypeAttrParam;
#else
typedef struct NumberTypeAttrParam NumberTypeAttrParam;
#endif /* __cplusplus */

#endif 	/* __NumberTypeAttrParam_FWD_DEFINED__ */


#ifndef __SpcStyleColumnParam_FWD_DEFINED__
#define __SpcStyleColumnParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class SpcStyleColumnParam SpcStyleColumnParam;
#else
typedef struct SpcStyleColumnParam SpcStyleColumnParam;
#endif /* __cplusplus */

#endif 	/* __SpcStyleColumnParam_FWD_DEFINED__ */


#ifndef __SpcStyleSectionParam_FWD_DEFINED__
#define __SpcStyleSectionParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class SpcStyleSectionParam SpcStyleSectionParam;
#else
typedef struct SpcStyleSectionParam SpcStyleSectionParam;
#endif /* __cplusplus */

#endif 	/* __SpcStyleSectionParam_FWD_DEFINED__ */


#ifndef __SpcSubSectionParam_FWD_DEFINED__
#define __SpcSubSectionParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class SpcSubSectionParam SpcSubSectionParam;
#else
typedef struct SpcSubSectionParam SpcSubSectionParam;
#endif /* __cplusplus */

#endif 	/* __SpcSubSectionParam_FWD_DEFINED__ */


#ifndef __SpcTuningSectionParam_FWD_DEFINED__
#define __SpcTuningSectionParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class SpcTuningSectionParam SpcTuningSectionParam;
#else
typedef struct SpcTuningSectionParam SpcTuningSectionParam;
#endif /* __cplusplus */

#endif 	/* __SpcTuningSectionParam_FWD_DEFINED__ */


#ifndef __SpcTuningStyleParam_FWD_DEFINED__
#define __SpcTuningStyleParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class SpcTuningStyleParam SpcTuningStyleParam;
#else
typedef struct SpcTuningStyleParam SpcTuningStyleParam;
#endif /* __cplusplus */

#endif 	/* __SpcTuningStyleParam_FWD_DEFINED__ */


#ifndef __SpcStyleParam_FWD_DEFINED__
#define __SpcStyleParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class SpcStyleParam SpcStyleParam;
#else
typedef struct SpcStyleParam SpcStyleParam;
#endif /* __cplusplus */

#endif 	/* __SpcStyleParam_FWD_DEFINED__ */


#ifndef __SpcDescrParam_FWD_DEFINED__
#define __SpcDescrParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class SpcDescrParam SpcDescrParam;
#else
typedef struct SpcDescrParam SpcDescrParam;
#endif /* __cplusplus */

#endif 	/* __SpcDescrParam_FWD_DEFINED__ */


#ifndef __DocAttachedSpcParam_FWD_DEFINED__
#define __DocAttachedSpcParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocAttachedSpcParam DocAttachedSpcParam;
#else
typedef struct DocAttachedSpcParam DocAttachedSpcParam;
#endif /* __cplusplus */

#endif 	/* __DocAttachedSpcParam_FWD_DEFINED__ */


#ifndef __SpcObjParam_FWD_DEFINED__
#define __SpcObjParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class SpcObjParam SpcObjParam;
#else
typedef struct SpcObjParam SpcObjParam;
#endif /* __cplusplus */

#endif 	/* __SpcObjParam_FWD_DEFINED__ */


#ifndef __LibStyle_FWD_DEFINED__
#define __LibStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class LibStyle LibStyle;
#else
typedef struct LibStyle LibStyle;
#endif /* __cplusplus */

#endif 	/* __LibStyle_FWD_DEFINED__ */


#ifndef __DataBaseObject_FWD_DEFINED__
#define __DataBaseObject_FWD_DEFINED__

#ifdef __cplusplus
typedef class DataBaseObject DataBaseObject;
#else
typedef struct DataBaseObject DataBaseObject;
#endif /* __cplusplus */

#endif 	/* __DataBaseObject_FWD_DEFINED__ */


#ifndef __SpcDocumentNotify_FWD_DEFINED__
#define __SpcDocumentNotify_FWD_DEFINED__

#ifdef __cplusplus
typedef class SpcDocumentNotify SpcDocumentNotify;
#else
typedef struct SpcDocumentNotify SpcDocumentNotify;
#endif /* __cplusplus */

#endif 	/* __SpcDocumentNotify_FWD_DEFINED__ */


#ifndef __SpcDocument_FWD_DEFINED__
#define __SpcDocument_FWD_DEFINED__

#ifdef __cplusplus
typedef class SpcDocument SpcDocument;
#else
typedef struct SpcDocument SpcDocument;
#endif /* __cplusplus */

#endif 	/* __SpcDocument_FWD_DEFINED__ */


#ifndef __SpcObjectNotify_FWD_DEFINED__
#define __SpcObjectNotify_FWD_DEFINED__

#ifdef __cplusplus
typedef class SpcObjectNotify SpcObjectNotify;
#else
typedef struct SpcObjectNotify SpcObjectNotify;
#endif /* __cplusplus */

#endif 	/* __SpcObjectNotify_FWD_DEFINED__ */


#ifndef __Specification_FWD_DEFINED__
#define __Specification_FWD_DEFINED__

#ifdef __cplusplus
typedef class Specification Specification;
#else
typedef struct Specification Specification;
#endif /* __cplusplus */

#endif 	/* __Specification_FWD_DEFINED__ */


#ifndef __DocumentTxt_FWD_DEFINED__
#define __DocumentTxt_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocumentTxt DocumentTxt;
#else
typedef struct DocumentTxt DocumentTxt;
#endif /* __cplusplus */

#endif 	/* __DocumentTxt_FWD_DEFINED__ */


#ifndef __AttributeTypeParam_FWD_DEFINED__
#define __AttributeTypeParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class AttributeTypeParam AttributeTypeParam;
#else
typedef struct AttributeTypeParam AttributeTypeParam;
#endif /* __cplusplus */

#endif 	/* __AttributeTypeParam_FWD_DEFINED__ */


#ifndef __ColumnInfoParam_FWD_DEFINED__
#define __ColumnInfoParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ColumnInfoParam ColumnInfoParam;
#else
typedef struct ColumnInfoParam ColumnInfoParam;
#endif /* __cplusplus */

#endif 	/* __ColumnInfoParam_FWD_DEFINED__ */


#ifndef __AttributeParam_FWD_DEFINED__
#define __AttributeParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class AttributeParam AttributeParam;
#else
typedef struct AttributeParam AttributeParam;
#endif /* __cplusplus */

#endif 	/* __AttributeParam_FWD_DEFINED__ */


#ifndef __Variable_FWD_DEFINED__
#define __Variable_FWD_DEFINED__

#ifdef __cplusplus
typedef class Variable Variable;
#else
typedef struct Variable Variable;
#endif /* __cplusplus */

#endif 	/* __Variable_FWD_DEFINED__ */


#ifndef __LibraryAttrTypeParam_FWD_DEFINED__
#define __LibraryAttrTypeParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class LibraryAttrTypeParam LibraryAttrTypeParam;
#else
typedef struct LibraryAttrTypeParam LibraryAttrTypeParam;
#endif /* __cplusplus */

#endif 	/* __LibraryAttrTypeParam_FWD_DEFINED__ */


#ifndef __AttributeObject_FWD_DEFINED__
#define __AttributeObject_FWD_DEFINED__

#ifdef __cplusplus
typedef class AttributeObject AttributeObject;
#else
typedef struct AttributeObject AttributeObject;
#endif /* __cplusplus */

#endif 	/* __AttributeObject_FWD_DEFINED__ */


#ifndef __RequestInfo3D_FWD_DEFINED__
#define __RequestInfo3D_FWD_DEFINED__

#ifdef __cplusplus
typedef class RequestInfo3D RequestInfo3D;
#else
typedef struct RequestInfo3D RequestInfo3D;
#endif /* __cplusplus */

#endif 	/* __RequestInfo3D_FWD_DEFINED__ */


#ifndef __MateConstraint_FWD_DEFINED__
#define __MateConstraint_FWD_DEFINED__

#ifdef __cplusplus
typedef class MateConstraint MateConstraint;
#else
typedef struct MateConstraint MateConstraint;
#endif /* __cplusplus */

#endif 	/* __MateConstraint_FWD_DEFINED__ */


#ifndef __DefaultObject_FWD_DEFINED__
#define __DefaultObject_FWD_DEFINED__

#ifdef __cplusplus
typedef class DefaultObject DefaultObject;
#else
typedef struct DefaultObject DefaultObject;
#endif /* __cplusplus */

#endif 	/* __DefaultObject_FWD_DEFINED__ */


#ifndef __Entity_FWD_DEFINED__
#define __Entity_FWD_DEFINED__

#ifdef __cplusplus
typedef class Entity Entity;
#else
typedef struct Entity Entity;
#endif /* __cplusplus */

#endif 	/* __Entity_FWD_DEFINED__ */


#ifndef __Part_FWD_DEFINED__
#define __Part_FWD_DEFINED__

#ifdef __cplusplus
typedef class Part Part;
#else
typedef struct Part Part;
#endif /* __cplusplus */

#endif 	/* __Part_FWD_DEFINED__ */


#ifndef __Document3DNotify_FWD_DEFINED__
#define __Document3DNotify_FWD_DEFINED__

#ifdef __cplusplus
typedef class Document3DNotify Document3DNotify;
#else
typedef struct Document3DNotify Document3DNotify;
#endif /* __cplusplus */

#endif 	/* __Document3DNotify_FWD_DEFINED__ */


#ifndef __Document3D_FWD_DEFINED__
#define __Document3D_FWD_DEFINED__

#ifdef __cplusplus
typedef class Document3D Document3D;
#else
typedef struct Document3D Document3D;
#endif /* __cplusplus */

#endif 	/* __Document3D_FWD_DEFINED__ */


#ifndef __ModelLibrary_FWD_DEFINED__
#define __ModelLibrary_FWD_DEFINED__

#ifdef __cplusplus
typedef class ModelLibrary ModelLibrary;
#else
typedef struct ModelLibrary ModelLibrary;
#endif /* __cplusplus */

#endif 	/* __ModelLibrary_FWD_DEFINED__ */


#ifndef __EntityCollection_FWD_DEFINED__
#define __EntityCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class EntityCollection EntityCollection;
#else
typedef struct EntityCollection EntityCollection;
#endif /* __cplusplus */

#endif 	/* __EntityCollection_FWD_DEFINED__ */


#ifndef __VariableCollection_FWD_DEFINED__
#define __VariableCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class VariableCollection VariableCollection;
#else
typedef struct VariableCollection VariableCollection;
#endif /* __cplusplus */

#endif 	/* __VariableCollection_FWD_DEFINED__ */


#ifndef __MateConstraintCollection_FWD_DEFINED__
#define __MateConstraintCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class MateConstraintCollection MateConstraintCollection;
#else
typedef struct MateConstraintCollection MateConstraintCollection;
#endif /* __cplusplus */

#endif 	/* __MateConstraintCollection_FWD_DEFINED__ */


#ifndef __PartCollection_FWD_DEFINED__
#define __PartCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class PartCollection PartCollection;
#else
typedef struct PartCollection PartCollection;
#endif /* __cplusplus */

#endif 	/* __PartCollection_FWD_DEFINED__ */


#ifndef __MeshPartArrayDefinition_FWD_DEFINED__
#define __MeshPartArrayDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class MeshPartArrayDefinition MeshPartArrayDefinition;
#else
typedef struct MeshPartArrayDefinition MeshPartArrayDefinition;
#endif /* __cplusplus */

#endif 	/* __MeshPartArrayDefinition_FWD_DEFINED__ */


#ifndef __CircularPartArrayDefinition_FWD_DEFINED__
#define __CircularPartArrayDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class CircularPartArrayDefinition CircularPartArrayDefinition;
#else
typedef struct CircularPartArrayDefinition CircularPartArrayDefinition;
#endif /* __cplusplus */

#endif 	/* __CircularPartArrayDefinition_FWD_DEFINED__ */


#ifndef __CurvePartArrayDefinition_FWD_DEFINED__
#define __CurvePartArrayDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class CurvePartArrayDefinition CurvePartArrayDefinition;
#else
typedef struct CurvePartArrayDefinition CurvePartArrayDefinition;
#endif /* __cplusplus */

#endif 	/* __CurvePartArrayDefinition_FWD_DEFINED__ */


#ifndef __DerivativePartArrayDefinition_FWD_DEFINED__
#define __DerivativePartArrayDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class DerivativePartArrayDefinition DerivativePartArrayDefinition;
#else
typedef struct DerivativePartArrayDefinition DerivativePartArrayDefinition;
#endif /* __cplusplus */

#endif 	/* __DerivativePartArrayDefinition_FWD_DEFINED__ */


#ifndef __Axis2PlanesDefinition_FWD_DEFINED__
#define __Axis2PlanesDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class Axis2PlanesDefinition Axis2PlanesDefinition;
#else
typedef struct Axis2PlanesDefinition Axis2PlanesDefinition;
#endif /* __cplusplus */

#endif 	/* __Axis2PlanesDefinition_FWD_DEFINED__ */


#ifndef __AxisOperationsDefinition_FWD_DEFINED__
#define __AxisOperationsDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class AxisOperationsDefinition AxisOperationsDefinition;
#else
typedef struct AxisOperationsDefinition AxisOperationsDefinition;
#endif /* __cplusplus */

#endif 	/* __AxisOperationsDefinition_FWD_DEFINED__ */


#ifndef __Axis2PointsDefinition_FWD_DEFINED__
#define __Axis2PointsDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class Axis2PointsDefinition Axis2PointsDefinition;
#else
typedef struct Axis2PointsDefinition Axis2PointsDefinition;
#endif /* __cplusplus */

#endif 	/* __Axis2PointsDefinition_FWD_DEFINED__ */


#ifndef __AxisEdgeDefinition_FWD_DEFINED__
#define __AxisEdgeDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class AxisEdgeDefinition AxisEdgeDefinition;
#else
typedef struct AxisEdgeDefinition AxisEdgeDefinition;
#endif /* __cplusplus */

#endif 	/* __AxisEdgeDefinition_FWD_DEFINED__ */


#ifndef __MeshCopyDefinition_FWD_DEFINED__
#define __MeshCopyDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class MeshCopyDefinition MeshCopyDefinition;
#else
typedef struct MeshCopyDefinition MeshCopyDefinition;
#endif /* __cplusplus */

#endif 	/* __MeshCopyDefinition_FWD_DEFINED__ */


#ifndef __CircularCopyDefinition_FWD_DEFINED__
#define __CircularCopyDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class CircularCopyDefinition CircularCopyDefinition;
#else
typedef struct CircularCopyDefinition CircularCopyDefinition;
#endif /* __cplusplus */

#endif 	/* __CircularCopyDefinition_FWD_DEFINED__ */


#ifndef __CurveCopyDefinition_FWD_DEFINED__
#define __CurveCopyDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class CurveCopyDefinition CurveCopyDefinition;
#else
typedef struct CurveCopyDefinition CurveCopyDefinition;
#endif /* __cplusplus */

#endif 	/* __CurveCopyDefinition_FWD_DEFINED__ */


#ifndef __MirrorCopyDefinition_FWD_DEFINED__
#define __MirrorCopyDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class MirrorCopyDefinition MirrorCopyDefinition;
#else
typedef struct MirrorCopyDefinition MirrorCopyDefinition;
#endif /* __cplusplus */

#endif 	/* __MirrorCopyDefinition_FWD_DEFINED__ */


#ifndef __MirrorCopyAllDefinition_FWD_DEFINED__
#define __MirrorCopyAllDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class MirrorCopyAllDefinition MirrorCopyAllDefinition;
#else
typedef struct MirrorCopyAllDefinition MirrorCopyAllDefinition;
#endif /* __cplusplus */

#endif 	/* __MirrorCopyAllDefinition_FWD_DEFINED__ */


#ifndef __ConicSpiralDefinition_FWD_DEFINED__
#define __ConicSpiralDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class ConicSpiralDefinition ConicSpiralDefinition;
#else
typedef struct ConicSpiralDefinition ConicSpiralDefinition;
#endif /* __cplusplus */

#endif 	/* __ConicSpiralDefinition_FWD_DEFINED__ */


#ifndef __CylindricSpiralDefinition_FWD_DEFINED__
#define __CylindricSpiralDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class CylindricSpiralDefinition CylindricSpiralDefinition;
#else
typedef struct CylindricSpiralDefinition CylindricSpiralDefinition;
#endif /* __cplusplus */

#endif 	/* __CylindricSpiralDefinition_FWD_DEFINED__ */


#ifndef __PolyLineDefinition_FWD_DEFINED__
#define __PolyLineDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class PolyLineDefinition PolyLineDefinition;
#else
typedef struct PolyLineDefinition PolyLineDefinition;
#endif /* __cplusplus */

#endif 	/* __PolyLineDefinition_FWD_DEFINED__ */


#ifndef __SplineDefinition_FWD_DEFINED__
#define __SplineDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class SplineDefinition SplineDefinition;
#else
typedef struct SplineDefinition SplineDefinition;
#endif /* __cplusplus */

#endif 	/* __SplineDefinition_FWD_DEFINED__ */


#ifndef __FaceDefinition_FWD_DEFINED__
#define __FaceDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class FaceDefinition FaceDefinition;
#else
typedef struct FaceDefinition FaceDefinition;
#endif /* __cplusplus */

#endif 	/* __FaceDefinition_FWD_DEFINED__ */


#ifndef __EdgeDefinition_FWD_DEFINED__
#define __EdgeDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class EdgeDefinition EdgeDefinition;
#else
typedef struct EdgeDefinition EdgeDefinition;
#endif /* __cplusplus */

#endif 	/* __EdgeDefinition_FWD_DEFINED__ */


#ifndef __ChamferDefinition_FWD_DEFINED__
#define __ChamferDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class ChamferDefinition ChamferDefinition;
#else
typedef struct ChamferDefinition ChamferDefinition;
#endif /* __cplusplus */

#endif 	/* __ChamferDefinition_FWD_DEFINED__ */


#ifndef __FilletDefinition_FWD_DEFINED__
#define __FilletDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class FilletDefinition FilletDefinition;
#else
typedef struct FilletDefinition FilletDefinition;
#endif /* __cplusplus */

#endif 	/* __FilletDefinition_FWD_DEFINED__ */


#ifndef __BaseExtrusionDefinition_FWD_DEFINED__
#define __BaseExtrusionDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class BaseExtrusionDefinition BaseExtrusionDefinition;
#else
typedef struct BaseExtrusionDefinition BaseExtrusionDefinition;
#endif /* __cplusplus */

#endif 	/* __BaseExtrusionDefinition_FWD_DEFINED__ */


#ifndef __BossExtrusionDefinition_FWD_DEFINED__
#define __BossExtrusionDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class BossExtrusionDefinition BossExtrusionDefinition;
#else
typedef struct BossExtrusionDefinition BossExtrusionDefinition;
#endif /* __cplusplus */

#endif 	/* __BossExtrusionDefinition_FWD_DEFINED__ */


#ifndef __CutExtrusionDefinition_FWD_DEFINED__
#define __CutExtrusionDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class CutExtrusionDefinition CutExtrusionDefinition;
#else
typedef struct CutExtrusionDefinition CutExtrusionDefinition;
#endif /* __cplusplus */

#endif 	/* __CutExtrusionDefinition_FWD_DEFINED__ */


#ifndef __ExtrusionSurfaceDefinition_FWD_DEFINED__
#define __ExtrusionSurfaceDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class ExtrusionSurfaceDefinition ExtrusionSurfaceDefinition;
#else
typedef struct ExtrusionSurfaceDefinition ExtrusionSurfaceDefinition;
#endif /* __cplusplus */

#endif 	/* __ExtrusionSurfaceDefinition_FWD_DEFINED__ */


#ifndef __BaseLoftDefinition_FWD_DEFINED__
#define __BaseLoftDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class BaseLoftDefinition BaseLoftDefinition;
#else
typedef struct BaseLoftDefinition BaseLoftDefinition;
#endif /* __cplusplus */

#endif 	/* __BaseLoftDefinition_FWD_DEFINED__ */


#ifndef __BossLoftDefinition_FWD_DEFINED__
#define __BossLoftDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class BossLoftDefinition BossLoftDefinition;
#else
typedef struct BossLoftDefinition BossLoftDefinition;
#endif /* __cplusplus */

#endif 	/* __BossLoftDefinition_FWD_DEFINED__ */


#ifndef __CutLoftDefinition_FWD_DEFINED__
#define __CutLoftDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class CutLoftDefinition CutLoftDefinition;
#else
typedef struct CutLoftDefinition CutLoftDefinition;
#endif /* __cplusplus */

#endif 	/* __CutLoftDefinition_FWD_DEFINED__ */


#ifndef __LoftSurfaceDefinition_FWD_DEFINED__
#define __LoftSurfaceDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class LoftSurfaceDefinition LoftSurfaceDefinition;
#else
typedef struct LoftSurfaceDefinition LoftSurfaceDefinition;
#endif /* __cplusplus */

#endif 	/* __LoftSurfaceDefinition_FWD_DEFINED__ */


#ifndef __InclineDefinition_FWD_DEFINED__
#define __InclineDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class InclineDefinition InclineDefinition;
#else
typedef struct InclineDefinition InclineDefinition;
#endif /* __cplusplus */

#endif 	/* __InclineDefinition_FWD_DEFINED__ */


#ifndef __ShellDefinition_FWD_DEFINED__
#define __ShellDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class ShellDefinition ShellDefinition;
#else
typedef struct ShellDefinition ShellDefinition;
#endif /* __cplusplus */

#endif 	/* __ShellDefinition_FWD_DEFINED__ */


#ifndef __BaseEvolutionDefinition_FWD_DEFINED__
#define __BaseEvolutionDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class BaseEvolutionDefinition BaseEvolutionDefinition;
#else
typedef struct BaseEvolutionDefinition BaseEvolutionDefinition;
#endif /* __cplusplus */

#endif 	/* __BaseEvolutionDefinition_FWD_DEFINED__ */


#ifndef __BossEvolutionDefinition_FWD_DEFINED__
#define __BossEvolutionDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class BossEvolutionDefinition BossEvolutionDefinition;
#else
typedef struct BossEvolutionDefinition BossEvolutionDefinition;
#endif /* __cplusplus */

#endif 	/* __BossEvolutionDefinition_FWD_DEFINED__ */


#ifndef __CutEvolutionDefinition_FWD_DEFINED__
#define __CutEvolutionDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class CutEvolutionDefinition CutEvolutionDefinition;
#else
typedef struct CutEvolutionDefinition CutEvolutionDefinition;
#endif /* __cplusplus */

#endif 	/* __CutEvolutionDefinition_FWD_DEFINED__ */


#ifndef __EvolutionSurfaceDefinition_FWD_DEFINED__
#define __EvolutionSurfaceDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class EvolutionSurfaceDefinition EvolutionSurfaceDefinition;
#else
typedef struct EvolutionSurfaceDefinition EvolutionSurfaceDefinition;
#endif /* __cplusplus */

#endif 	/* __EvolutionSurfaceDefinition_FWD_DEFINED__ */


#ifndef __RibDefinition_FWD_DEFINED__
#define __RibDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class RibDefinition RibDefinition;
#else
typedef struct RibDefinition RibDefinition;
#endif /* __cplusplus */

#endif 	/* __RibDefinition_FWD_DEFINED__ */


#ifndef __CutByPlaneDefinition_FWD_DEFINED__
#define __CutByPlaneDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class CutByPlaneDefinition CutByPlaneDefinition;
#else
typedef struct CutByPlaneDefinition CutByPlaneDefinition;
#endif /* __cplusplus */

#endif 	/* __CutByPlaneDefinition_FWD_DEFINED__ */


#ifndef __CutBySketchDefinition_FWD_DEFINED__
#define __CutBySketchDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class CutBySketchDefinition CutBySketchDefinition;
#else
typedef struct CutBySketchDefinition CutBySketchDefinition;
#endif /* __cplusplus */

#endif 	/* __CutBySketchDefinition_FWD_DEFINED__ */


#ifndef __PlaneOffsetDefinition_FWD_DEFINED__
#define __PlaneOffsetDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class PlaneOffsetDefinition PlaneOffsetDefinition;
#else
typedef struct PlaneOffsetDefinition PlaneOffsetDefinition;
#endif /* __cplusplus */

#endif 	/* __PlaneOffsetDefinition_FWD_DEFINED__ */


#ifndef __PlaneAngleDefinition_FWD_DEFINED__
#define __PlaneAngleDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class PlaneAngleDefinition PlaneAngleDefinition;
#else
typedef struct PlaneAngleDefinition PlaneAngleDefinition;
#endif /* __cplusplus */

#endif 	/* __PlaneAngleDefinition_FWD_DEFINED__ */


#ifndef __Plane3PointsDefinition_FWD_DEFINED__
#define __Plane3PointsDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class Plane3PointsDefinition Plane3PointsDefinition;
#else
typedef struct Plane3PointsDefinition Plane3PointsDefinition;
#endif /* __cplusplus */

#endif 	/* __Plane3PointsDefinition_FWD_DEFINED__ */


#ifndef __PlaneNormalToSurfaceDefinition_FWD_DEFINED__
#define __PlaneNormalToSurfaceDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class PlaneNormalToSurfaceDefinition PlaneNormalToSurfaceDefinition;
#else
typedef struct PlaneNormalToSurfaceDefinition PlaneNormalToSurfaceDefinition;
#endif /* __cplusplus */

#endif 	/* __PlaneNormalToSurfaceDefinition_FWD_DEFINED__ */


#ifndef __PlaneTangentToSurfaceDefinition_FWD_DEFINED__
#define __PlaneTangentToSurfaceDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class PlaneTangentToSurfaceDefinition PlaneTangentToSurfaceDefinition;
#else
typedef struct PlaneTangentToSurfaceDefinition PlaneTangentToSurfaceDefinition;
#endif /* __cplusplus */

#endif 	/* __PlaneTangentToSurfaceDefinition_FWD_DEFINED__ */


#ifndef __PlaneEdgePointDefinition_FWD_DEFINED__
#define __PlaneEdgePointDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class PlaneEdgePointDefinition PlaneEdgePointDefinition;
#else
typedef struct PlaneEdgePointDefinition PlaneEdgePointDefinition;
#endif /* __cplusplus */

#endif 	/* __PlaneEdgePointDefinition_FWD_DEFINED__ */


#ifndef __PlaneParallelDefinition_FWD_DEFINED__
#define __PlaneParallelDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class PlaneParallelDefinition PlaneParallelDefinition;
#else
typedef struct PlaneParallelDefinition PlaneParallelDefinition;
#endif /* __cplusplus */

#endif 	/* __PlaneParallelDefinition_FWD_DEFINED__ */


#ifndef __PlanePerpendicularDefinition_FWD_DEFINED__
#define __PlanePerpendicularDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class PlanePerpendicularDefinition PlanePerpendicularDefinition;
#else
typedef struct PlanePerpendicularDefinition PlanePerpendicularDefinition;
#endif /* __cplusplus */

#endif 	/* __PlanePerpendicularDefinition_FWD_DEFINED__ */


#ifndef __PlaneLineToEdgeDefinition_FWD_DEFINED__
#define __PlaneLineToEdgeDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class PlaneLineToEdgeDefinition PlaneLineToEdgeDefinition;
#else
typedef struct PlaneLineToEdgeDefinition PlaneLineToEdgeDefinition;
#endif /* __cplusplus */

#endif 	/* __PlaneLineToEdgeDefinition_FWD_DEFINED__ */


#ifndef __PlaneLineToPlaneDefinition_FWD_DEFINED__
#define __PlaneLineToPlaneDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class PlaneLineToPlaneDefinition PlaneLineToPlaneDefinition;
#else
typedef struct PlaneLineToPlaneDefinition PlaneLineToPlaneDefinition;
#endif /* __cplusplus */

#endif 	/* __PlaneLineToPlaneDefinition_FWD_DEFINED__ */


#ifndef __ThinParam_FWD_DEFINED__
#define __ThinParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ThinParam ThinParam;
#else
typedef struct ThinParam ThinParam;
#endif /* __cplusplus */

#endif 	/* __ThinParam_FWD_DEFINED__ */


#ifndef __ExtrusionParam_FWD_DEFINED__
#define __ExtrusionParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ExtrusionParam ExtrusionParam;
#else
typedef struct ExtrusionParam ExtrusionParam;
#endif /* __cplusplus */

#endif 	/* __ExtrusionParam_FWD_DEFINED__ */


#ifndef __RotatedParam_FWD_DEFINED__
#define __RotatedParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class RotatedParam RotatedParam;
#else
typedef struct RotatedParam RotatedParam;
#endif /* __cplusplus */

#endif 	/* __RotatedParam_FWD_DEFINED__ */


#ifndef __ColorParam_FWD_DEFINED__
#define __ColorParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ColorParam ColorParam;
#else
typedef struct ColorParam ColorParam;
#endif /* __cplusplus */

#endif 	/* __ColorParam_FWD_DEFINED__ */


#ifndef __BaseRotatedDefinition_FWD_DEFINED__
#define __BaseRotatedDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class BaseRotatedDefinition BaseRotatedDefinition;
#else
typedef struct BaseRotatedDefinition BaseRotatedDefinition;
#endif /* __cplusplus */

#endif 	/* __BaseRotatedDefinition_FWD_DEFINED__ */


#ifndef __BossRotatedDefinition_FWD_DEFINED__
#define __BossRotatedDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class BossRotatedDefinition BossRotatedDefinition;
#else
typedef struct BossRotatedDefinition BossRotatedDefinition;
#endif /* __cplusplus */

#endif 	/* __BossRotatedDefinition_FWD_DEFINED__ */


#ifndef __CutRotatedDefinition_FWD_DEFINED__
#define __CutRotatedDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class CutRotatedDefinition CutRotatedDefinition;
#else
typedef struct CutRotatedDefinition CutRotatedDefinition;
#endif /* __cplusplus */

#endif 	/* __CutRotatedDefinition_FWD_DEFINED__ */


#ifndef __RotatedSurfaceDefinition_FWD_DEFINED__
#define __RotatedSurfaceDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class RotatedSurfaceDefinition RotatedSurfaceDefinition;
#else
typedef struct RotatedSurfaceDefinition RotatedSurfaceDefinition;
#endif /* __cplusplus */

#endif 	/* __RotatedSurfaceDefinition_FWD_DEFINED__ */


#ifndef __SketchDefinition_FWD_DEFINED__
#define __SketchDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class SketchDefinition SketchDefinition;
#else
typedef struct SketchDefinition SketchDefinition;
#endif /* __cplusplus */

#endif 	/* __SketchDefinition_FWD_DEFINED__ */


#ifndef __RasterFormatParam_FWD_DEFINED__
#define __RasterFormatParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class RasterFormatParam RasterFormatParam;
#else
typedef struct RasterFormatParam RasterFormatParam;
#endif /* __cplusplus */

#endif 	/* __RasterFormatParam_FWD_DEFINED__ */


#ifndef __AdditionFormatParam_FWD_DEFINED__
#define __AdditionFormatParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class AdditionFormatParam AdditionFormatParam;
#else
typedef struct AdditionFormatParam AdditionFormatParam;
#endif /* __cplusplus */

#endif 	/* __AdditionFormatParam_FWD_DEFINED__ */


#ifndef __ConstraintParam_FWD_DEFINED__
#define __ConstraintParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ConstraintParam ConstraintParam;
#else
typedef struct ConstraintParam ConstraintParam;
#endif /* __cplusplus */

#endif 	/* __ConstraintParam_FWD_DEFINED__ */


#ifndef __ImportedSurfaceDefinition_FWD_DEFINED__
#define __ImportedSurfaceDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class ImportedSurfaceDefinition ImportedSurfaceDefinition;
#else
typedef struct ImportedSurfaceDefinition ImportedSurfaceDefinition;
#endif /* __cplusplus */

#endif 	/* __ImportedSurfaceDefinition_FWD_DEFINED__ */


#ifndef __FaceCollection_FWD_DEFINED__
#define __FaceCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class FaceCollection FaceCollection;
#else
typedef struct FaceCollection FaceCollection;
#endif /* __cplusplus */

#endif 	/* __FaceCollection_FWD_DEFINED__ */


#ifndef __VertexDefinition_FWD_DEFINED__
#define __VertexDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class VertexDefinition VertexDefinition;
#else
typedef struct VertexDefinition VertexDefinition;
#endif /* __cplusplus */

#endif 	/* __VertexDefinition_FWD_DEFINED__ */


#ifndef __Feature_FWD_DEFINED__
#define __Feature_FWD_DEFINED__

#ifdef __cplusplus
typedef class Feature Feature;
#else
typedef struct Feature Feature;
#endif /* __cplusplus */

#endif 	/* __Feature_FWD_DEFINED__ */


#ifndef __Tessellation_FWD_DEFINED__
#define __Tessellation_FWD_DEFINED__

#ifdef __cplusplus
typedef class Tessellation Tessellation;
#else
typedef struct Tessellation Tessellation;
#endif /* __cplusplus */

#endif 	/* __Tessellation_FWD_DEFINED__ */


#ifndef __Facet_FWD_DEFINED__
#define __Facet_FWD_DEFINED__

#ifdef __cplusplus
typedef class Facet Facet;
#else
typedef struct Facet Facet;
#endif /* __cplusplus */

#endif 	/* __Facet_FWD_DEFINED__ */


#ifndef __Measurer_FWD_DEFINED__
#define __Measurer_FWD_DEFINED__

#ifdef __cplusplus
typedef class Measurer Measurer;
#else
typedef struct Measurer Measurer;
#endif /* __cplusplus */

#endif 	/* __Measurer_FWD_DEFINED__ */


#ifndef __BodyCollection_FWD_DEFINED__
#define __BodyCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class BodyCollection BodyCollection;
#else
typedef struct BodyCollection BodyCollection;
#endif /* __cplusplus */

#endif 	/* __BodyCollection_FWD_DEFINED__ */


#ifndef __Body_FWD_DEFINED__
#define __Body_FWD_DEFINED__

#ifdef __cplusplus
typedef class Body Body;
#else
typedef struct Body Body;
#endif /* __cplusplus */

#endif 	/* __Body_FWD_DEFINED__ */


#ifndef __Surface_FWD_DEFINED__
#define __Surface_FWD_DEFINED__

#ifdef __cplusplus
typedef class Surface Surface;
#else
typedef struct Surface Surface;
#endif /* __cplusplus */

#endif 	/* __Surface_FWD_DEFINED__ */


#ifndef __EdgeCollection_FWD_DEFINED__
#define __EdgeCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class EdgeCollection EdgeCollection;
#else
typedef struct EdgeCollection EdgeCollection;
#endif /* __cplusplus */

#endif 	/* __EdgeCollection_FWD_DEFINED__ */


#ifndef __OrientedEdge_FWD_DEFINED__
#define __OrientedEdge_FWD_DEFINED__

#ifdef __cplusplus
typedef class OrientedEdge OrientedEdge;
#else
typedef struct OrientedEdge OrientedEdge;
#endif /* __cplusplus */

#endif 	/* __OrientedEdge_FWD_DEFINED__ */


#ifndef __OrientedEdgeCollection_FWD_DEFINED__
#define __OrientedEdgeCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class OrientedEdgeCollection OrientedEdgeCollection;
#else
typedef struct OrientedEdgeCollection OrientedEdgeCollection;
#endif /* __cplusplus */

#endif 	/* __OrientedEdgeCollection_FWD_DEFINED__ */


#ifndef __Loop_FWD_DEFINED__
#define __Loop_FWD_DEFINED__

#ifdef __cplusplus
typedef class Loop Loop;
#else
typedef struct Loop Loop;
#endif /* __cplusplus */

#endif 	/* __Loop_FWD_DEFINED__ */


#ifndef __LoopCollection_FWD_DEFINED__
#define __LoopCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class LoopCollection LoopCollection;
#else
typedef struct LoopCollection LoopCollection;
#endif /* __cplusplus */

#endif 	/* __LoopCollection_FWD_DEFINED__ */


#ifndef __Curve3D_FWD_DEFINED__
#define __Curve3D_FWD_DEFINED__

#ifdef __cplusplus
typedef class Curve3D Curve3D;
#else
typedef struct Curve3D Curve3D;
#endif /* __cplusplus */

#endif 	/* __Curve3D_FWD_DEFINED__ */


#ifndef __LineSeg3dParam_FWD_DEFINED__
#define __LineSeg3dParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class LineSeg3dParam LineSeg3dParam;
#else
typedef struct LineSeg3dParam LineSeg3dParam;
#endif /* __cplusplus */

#endif 	/* __LineSeg3dParam_FWD_DEFINED__ */


#ifndef __Circle3dParam_FWD_DEFINED__
#define __Circle3dParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class Circle3dParam Circle3dParam;
#else
typedef struct Circle3dParam Circle3dParam;
#endif /* __cplusplus */

#endif 	/* __Circle3dParam_FWD_DEFINED__ */


#ifndef __Ellipse3dParam_FWD_DEFINED__
#define __Ellipse3dParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class Ellipse3dParam Ellipse3dParam;
#else
typedef struct Ellipse3dParam Ellipse3dParam;
#endif /* __cplusplus */

#endif 	/* __Ellipse3dParam_FWD_DEFINED__ */


#ifndef __PlaneParam_FWD_DEFINED__
#define __PlaneParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class PlaneParam PlaneParam;
#else
typedef struct PlaneParam PlaneParam;
#endif /* __cplusplus */

#endif 	/* __PlaneParam_FWD_DEFINED__ */


#ifndef __ConeParam_FWD_DEFINED__
#define __ConeParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ConeParam ConeParam;
#else
typedef struct ConeParam ConeParam;
#endif /* __cplusplus */

#endif 	/* __ConeParam_FWD_DEFINED__ */


#ifndef __CylinderParam_FWD_DEFINED__
#define __CylinderParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class CylinderParam CylinderParam;
#else
typedef struct CylinderParam CylinderParam;
#endif /* __cplusplus */

#endif 	/* __CylinderParam_FWD_DEFINED__ */


#ifndef __SphereParam_FWD_DEFINED__
#define __SphereParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class SphereParam SphereParam;
#else
typedef struct SphereParam SphereParam;
#endif /* __cplusplus */

#endif 	/* __SphereParam_FWD_DEFINED__ */


#ifndef __TorusParam_FWD_DEFINED__
#define __TorusParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class TorusParam TorusParam;
#else
typedef struct TorusParam TorusParam;
#endif /* __cplusplus */

#endif 	/* __TorusParam_FWD_DEFINED__ */


#ifndef __NurbsPoint3dParam_FWD_DEFINED__
#define __NurbsPoint3dParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class NurbsPoint3dParam NurbsPoint3dParam;
#else
typedef struct NurbsPoint3dParam NurbsPoint3dParam;
#endif /* __cplusplus */

#endif 	/* __NurbsPoint3dParam_FWD_DEFINED__ */


#ifndef __NurbsSurfaceParam_FWD_DEFINED__
#define __NurbsSurfaceParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class NurbsSurfaceParam NurbsSurfaceParam;
#else
typedef struct NurbsSurfaceParam NurbsSurfaceParam;
#endif /* __cplusplus */

#endif 	/* __NurbsSurfaceParam_FWD_DEFINED__ */


#ifndef __Nurbs3dParam_FWD_DEFINED__
#define __Nurbs3dParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class Nurbs3dParam Nurbs3dParam;
#else
typedef struct Nurbs3dParam Nurbs3dParam;
#endif /* __cplusplus */

#endif 	/* __Nurbs3dParam_FWD_DEFINED__ */


#ifndef __NurbsKnotCollection_FWD_DEFINED__
#define __NurbsKnotCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class NurbsKnotCollection NurbsKnotCollection;
#else
typedef struct NurbsKnotCollection NurbsKnotCollection;
#endif /* __cplusplus */

#endif 	/* __NurbsKnotCollection_FWD_DEFINED__ */


#ifndef __NurbsPoint3dCollCollection_FWD_DEFINED__
#define __NurbsPoint3dCollCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class NurbsPoint3dCollCollection NurbsPoint3dCollCollection;
#else
typedef struct NurbsPoint3dCollCollection NurbsPoint3dCollCollection;
#endif /* __cplusplus */

#endif 	/* __NurbsPoint3dCollCollection_FWD_DEFINED__ */


#ifndef __NurbsPoint3dCollection_FWD_DEFINED__
#define __NurbsPoint3dCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class NurbsPoint3dCollection NurbsPoint3dCollection;
#else
typedef struct NurbsPoint3dCollection NurbsPoint3dCollection;
#endif /* __cplusplus */

#endif 	/* __NurbsPoint3dCollection_FWD_DEFINED__ */


#ifndef __ViewProjection_FWD_DEFINED__
#define __ViewProjection_FWD_DEFINED__

#ifdef __cplusplus
typedef class ViewProjection ViewProjection;
#else
typedef struct ViewProjection ViewProjection;
#endif /* __cplusplus */

#endif 	/* __ViewProjection_FWD_DEFINED__ */


#ifndef __ViewProjectionCollection_FWD_DEFINED__
#define __ViewProjectionCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class ViewProjectionCollection ViewProjectionCollection;
#else
typedef struct ViewProjectionCollection ViewProjectionCollection;
#endif /* __cplusplus */

#endif 	/* __ViewProjectionCollection_FWD_DEFINED__ */


#ifndef __SelectionMng_FWD_DEFINED__
#define __SelectionMng_FWD_DEFINED__

#ifdef __cplusplus
typedef class SelectionMng SelectionMng;
#else
typedef struct SelectionMng SelectionMng;
#endif /* __cplusplus */

#endif 	/* __SelectionMng_FWD_DEFINED__ */


#ifndef __ChooseMng_FWD_DEFINED__
#define __ChooseMng_FWD_DEFINED__

#ifdef __cplusplus
typedef class ChooseMng ChooseMng;
#else
typedef struct ChooseMng ChooseMng;
#endif /* __cplusplus */

#endif 	/* __ChooseMng_FWD_DEFINED__ */


#ifndef __Arc3dParam_FWD_DEFINED__
#define __Arc3dParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class Arc3dParam Arc3dParam;
#else
typedef struct Arc3dParam Arc3dParam;
#endif /* __cplusplus */

#endif 	/* __Arc3dParam_FWD_DEFINED__ */


#ifndef __TreeNodeParam_FWD_DEFINED__
#define __TreeNodeParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class TreeNodeParam TreeNodeParam;
#else
typedef struct TreeNodeParam TreeNodeParam;
#endif /* __cplusplus */

#endif 	/* __TreeNodeParam_FWD_DEFINED__ */


#ifndef __AssociationViewParam_FWD_DEFINED__
#define __AssociationViewParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class AssociationViewParam AssociationViewParam;
#else
typedef struct AssociationViewParam AssociationViewParam;
#endif /* __cplusplus */

#endif 	/* __AssociationViewParam_FWD_DEFINED__ */


#ifndef __ViewColorParam_FWD_DEFINED__
#define __ViewColorParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ViewColorParam ViewColorParam;
#else
typedef struct ViewColorParam ViewColorParam;
#endif /* __cplusplus */

#endif 	/* __ViewColorParam_FWD_DEFINED__ */


#ifndef __AxisLineParam_FWD_DEFINED__
#define __AxisLineParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class AxisLineParam AxisLineParam;
#else
typedef struct AxisLineParam AxisLineParam;
#endif /* __cplusplus */

#endif 	/* __AxisLineParam_FWD_DEFINED__ */


#ifndef __TextDocumentParam_FWD_DEFINED__
#define __TextDocumentParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextDocumentParam TextDocumentParam;
#else
typedef struct TextDocumentParam TextDocumentParam;
#endif /* __cplusplus */

#endif 	/* __TextDocumentParam_FWD_DEFINED__ */


#ifndef __RemoteElementParam_FWD_DEFINED__
#define __RemoteElementParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class RemoteElementParam RemoteElementParam;
#else
typedef struct RemoteElementParam RemoteElementParam;
#endif /* __cplusplus */

#endif 	/* __RemoteElementParam_FWD_DEFINED__ */


#ifndef __DeletedCopyCollection_FWD_DEFINED__
#define __DeletedCopyCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class DeletedCopyCollection DeletedCopyCollection;
#else
typedef struct DeletedCopyCollection DeletedCopyCollection;
#endif /* __cplusplus */

#endif 	/* __DeletedCopyCollection_FWD_DEFINED__ */


#ifndef __CopyObjectParam_FWD_DEFINED__
#define __CopyObjectParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class CopyObjectParam CopyObjectParam;
#else
typedef struct CopyObjectParam CopyObjectParam;
#endif /* __cplusplus */

#endif 	/* __CopyObjectParam_FWD_DEFINED__ */


#ifndef __ThreadDefinition_FWD_DEFINED__
#define __ThreadDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class ThreadDefinition ThreadDefinition;
#else
typedef struct ThreadDefinition ThreadDefinition;
#endif /* __cplusplus */

#endif 	/* __ThreadDefinition_FWD_DEFINED__ */


#ifndef __OverlapObjectOptions_FWD_DEFINED__
#define __OverlapObjectOptions_FWD_DEFINED__

#ifdef __cplusplus
typedef class OverlapObjectOptions OverlapObjectOptions;
#else
typedef struct OverlapObjectOptions OverlapObjectOptions;
#endif /* __cplusplus */

#endif 	/* __OverlapObjectOptions_FWD_DEFINED__ */


#ifndef __Attribute3D_FWD_DEFINED__
#define __Attribute3D_FWD_DEFINED__

#ifdef __cplusplus
typedef class Attribute3D Attribute3D;
#else
typedef struct Attribute3D Attribute3D;
#endif /* __cplusplus */

#endif 	/* __Attribute3D_FWD_DEFINED__ */


#ifndef __Attribute3DCollection_FWD_DEFINED__
#define __Attribute3DCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class Attribute3DCollection Attribute3DCollection;
#else
typedef struct Attribute3DCollection Attribute3DCollection;
#endif /* __cplusplus */

#endif 	/* __Attribute3DCollection_FWD_DEFINED__ */


#ifndef __ComponentPositioner_FWD_DEFINED__
#define __ComponentPositioner_FWD_DEFINED__

#ifdef __cplusplus
typedef class ComponentPositioner ComponentPositioner;
#else
typedef struct ComponentPositioner ComponentPositioner;
#endif /* __cplusplus */

#endif 	/* __ComponentPositioner_FWD_DEFINED__ */


#ifndef __ObjectsFilter3D_FWD_DEFINED__
#define __ObjectsFilter3D_FWD_DEFINED__

#ifdef __cplusplus
typedef class ObjectsFilter3D ObjectsFilter3D;
#else
typedef struct ObjectsFilter3D ObjectsFilter3D;
#endif /* __cplusplus */

#endif 	/* __ObjectsFilter3D_FWD_DEFINED__ */


#ifndef __ParametrizationParam_FWD_DEFINED__
#define __ParametrizationParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ParametrizationParam ParametrizationParam;
#else
typedef struct ParametrizationParam ParametrizationParam;
#endif /* __cplusplus */

#endif 	/* __ParametrizationParam_FWD_DEFINED__ */


#ifndef __Macro3DDefinition_FWD_DEFINED__
#define __Macro3DDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class Macro3DDefinition Macro3DDefinition;
#else
typedef struct Macro3DDefinition Macro3DDefinition;
#endif /* __cplusplus */

#endif 	/* __Macro3DDefinition_FWD_DEFINED__ */


#ifndef __AxisConefaceDefinition_FWD_DEFINED__
#define __AxisConefaceDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class AxisConefaceDefinition AxisConefaceDefinition;
#else
typedef struct AxisConefaceDefinition AxisConefaceDefinition;
#endif /* __cplusplus */

#endif 	/* __AxisConefaceDefinition_FWD_DEFINED__ */


#ifndef __UnionComponentsDefinition_FWD_DEFINED__
#define __UnionComponentsDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class UnionComponentsDefinition UnionComponentsDefinition;
#else
typedef struct UnionComponentsDefinition UnionComponentsDefinition;
#endif /* __cplusplus */

#endif 	/* __UnionComponentsDefinition_FWD_DEFINED__ */


#ifndef __MoldCavityDefinition_FWD_DEFINED__
#define __MoldCavityDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class MoldCavityDefinition MoldCavityDefinition;
#else
typedef struct MoldCavityDefinition MoldCavityDefinition;
#endif /* __cplusplus */

#endif 	/* __MoldCavityDefinition_FWD_DEFINED__ */


#ifndef __Coordinate3dCollection_FWD_DEFINED__
#define __Coordinate3dCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class Coordinate3dCollection Coordinate3dCollection;
#else
typedef struct Coordinate3dCollection Coordinate3dCollection;
#endif /* __cplusplus */

#endif 	/* __Coordinate3dCollection_FWD_DEFINED__ */


#ifndef __IntersectionResult_FWD_DEFINED__
#define __IntersectionResult_FWD_DEFINED__

#ifdef __cplusplus
typedef class IntersectionResult IntersectionResult;
#else
typedef struct IntersectionResult IntersectionResult;
#endif /* __cplusplus */

#endif 	/* __IntersectionResult_FWD_DEFINED__ */


#ifndef __PlaneMiddleDefinition_FWD_DEFINED__
#define __PlaneMiddleDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class PlaneMiddleDefinition PlaneMiddleDefinition;
#else
typedef struct PlaneMiddleDefinition PlaneMiddleDefinition;
#endif /* __cplusplus */

#endif 	/* __PlaneMiddleDefinition_FWD_DEFINED__ */


#ifndef __ControlPointDefinition_FWD_DEFINED__
#define __ControlPointDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class ControlPointDefinition ControlPointDefinition;
#else
typedef struct ControlPointDefinition ControlPointDefinition;
#endif /* __cplusplus */

#endif 	/* __ControlPointDefinition_FWD_DEFINED__ */


#ifndef __ConjunctivePointDefinition_FWD_DEFINED__
#define __ConjunctivePointDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class ConjunctivePointDefinition ConjunctivePointDefinition;
#else
typedef struct ConjunctivePointDefinition ConjunctivePointDefinition;
#endif /* __cplusplus */

#endif 	/* __ConjunctivePointDefinition_FWD_DEFINED__ */


#ifndef __ChooseBodies_FWD_DEFINED__
#define __ChooseBodies_FWD_DEFINED__

#ifdef __cplusplus
typedef class ChooseBodies ChooseBodies;
#else
typedef struct ChooseBodies ChooseBodies;
#endif /* __cplusplus */

#endif 	/* __ChooseBodies_FWD_DEFINED__ */


#ifndef __AggregateDefinition_FWD_DEFINED__
#define __AggregateDefinition_FWD_DEFINED__

#ifdef __cplusplus
typedef class AggregateDefinition AggregateDefinition;
#else
typedef struct AggregateDefinition AggregateDefinition;
#endif /* __cplusplus */

#endif 	/* __AggregateDefinition_FWD_DEFINED__ */


#ifndef __ChangeLeaderParam_FWD_DEFINED__
#define __ChangeLeaderParam_FWD_DEFINED__

#ifdef __cplusplus
typedef class ChangeLeaderParam ChangeLeaderParam;
#else
typedef struct ChangeLeaderParam ChangeLeaderParam;
#endif /* __cplusplus */

#endif 	/* __ChangeLeaderParam_FWD_DEFINED__ */


#ifndef __ksChooseParts_FWD_DEFINED__
#define __ksChooseParts_FWD_DEFINED__
typedef interface ksChooseParts ksChooseParts;

#endif 	/* __ksChooseParts_FWD_DEFINED__ */


#ifndef __ChooseParts_FWD_DEFINED__
#define __ChooseParts_FWD_DEFINED__

#ifdef __cplusplus
typedef class ChooseParts ChooseParts;
#else
typedef struct ChooseParts ChooseParts;
#endif /* __cplusplus */

#endif 	/* __ChooseParts_FWD_DEFINED__ */


#ifndef __ksBodyParts_FWD_DEFINED__
#define __ksBodyParts_FWD_DEFINED__
typedef interface ksBodyParts ksBodyParts;

#endif 	/* __ksBodyParts_FWD_DEFINED__ */


#ifndef __ksEmbodiment3D_FWD_DEFINED__
#define __ksEmbodiment3D_FWD_DEFINED__
typedef interface ksEmbodiment3D ksEmbodiment3D;

#endif 	/* __ksEmbodiment3D_FWD_DEFINED__ */


#ifndef __ksSnapInfo_FWD_DEFINED__
#define __ksSnapInfo_FWD_DEFINED__
typedef interface ksSnapInfo ksSnapInfo;

#endif 	/* __ksSnapInfo_FWD_DEFINED__ */


#ifndef __ksSaveToPreviusParam_FWD_DEFINED__
#define __ksSaveToPreviusParam_FWD_DEFINED__
typedef interface ksSaveToPreviusParam ksSaveToPreviusParam;

#endif 	/* __ksSaveToPreviusParam_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 



#ifndef __Kompas6API5_LIBRARY_DEFINED__
#define __Kompas6API5_LIBRARY_DEFINED__

/* library Kompas6API5 */
/* [version][uuid] */ 




























































































































































































































































































DEFINE_GUID(LIBID_Kompas6API5,0x0422828C,0xF174,0x495E,0xAC,0x5D,0xD3,0x10,0x14,0xDB,0xBE,0x87);

#ifndef __KompasObject_DISPINTERFACE_DEFINED__
#define __KompasObject_DISPINTERFACE_DEFINED__

/* dispinterface KompasObject */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_KompasObject,0xE36BC97C,0x39D6,0x4402,0x9C,0x25,0xC7,0x00,0x8A,0x21,0x7E,0x02);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E36BC97C-39D6-4402-9C25-C7008A217E02")
    KompasObject : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct KompasObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            KompasObject * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            KompasObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            KompasObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            KompasObject * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            KompasObject * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            KompasObject * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            KompasObject * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } KompasObjectVtbl;

    interface KompasObject
    {
        CONST_VTBL struct KompasObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define KompasObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define KompasObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define KompasObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define KompasObject_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define KompasObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define KompasObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define KompasObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __KompasObject_DISPINTERFACE_DEFINED__ */


#ifndef __ksDocument2D_DISPINTERFACE_DEFINED__
#define __ksDocument2D_DISPINTERFACE_DEFINED__

/* dispinterface ksDocument2D */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDocument2D,0xAF4E160D,0x5C89,0x4F21,0xB0,0xF2,0xD5,0x33,0x97,0xBD,0xAF,0x78);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("AF4E160D-5C89-4F21-B0F2-D53397BDAF78")
    ksDocument2D : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDocument2DVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDocument2D * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDocument2D * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDocument2D * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDocument2D * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDocument2D * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDocument2D * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDocument2D * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDocument2DVtbl;

    interface ksDocument2D
    {
        CONST_VTBL struct ksDocument2DVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDocument2D_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDocument2D_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDocument2D_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDocument2D_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDocument2D_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDocument2D_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDocument2D_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDocument2D_DISPINTERFACE_DEFINED__ */


#ifndef __ksDocument3D_DISPINTERFACE_DEFINED__
#define __ksDocument3D_DISPINTERFACE_DEFINED__

/* dispinterface ksDocument3D */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDocument3D,0x111CEFE1,0xA0A7,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("111CEFE1-A0A7-11D6-95CE-00C0262D30E3")
    ksDocument3D : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDocument3DVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDocument3D * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDocument3D * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDocument3D * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDocument3D * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDocument3D * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDocument3D * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDocument3D * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDocument3DVtbl;

    interface ksDocument3D
    {
        CONST_VTBL struct ksDocument3DVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDocument3D_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDocument3D_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDocument3D_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDocument3D_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDocument3D_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDocument3D_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDocument3D_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDocument3D_DISPINTERFACE_DEFINED__ */


#ifndef __ksFeature_DISPINTERFACE_DEFINED__
#define __ksFeature_DISPINTERFACE_DEFINED__

/* dispinterface ksFeature */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksFeature,0x088BF9A8,0x37D3,0x4b15,0xA7,0xCA,0x8C,0x52,0xFF,0x1D,0xBC,0x41);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("088BF9A8-37D3-4b15-A7CA-8C52FF1DBC41")
    ksFeature : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksFeatureVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksFeature * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksFeature * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksFeature * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksFeature * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksFeature * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksFeature * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksFeature * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksFeatureVtbl;

    interface ksFeature
    {
        CONST_VTBL struct ksFeatureVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksFeature_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksFeature_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksFeature_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksFeature_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksFeature_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksFeature_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksFeature_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksFeature_DISPINTERFACE_DEFINED__ */


#ifndef __ksFeatureCollection_DISPINTERFACE_DEFINED__
#define __ksFeatureCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksFeatureCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksFeatureCollection,0xCE6A46FF,0x02B4,0x4c7e,0xAF,0x50,0x3F,0x37,0x07,0xC8,0xB1,0x22);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("CE6A46FF-02B4-4c7e-AF50-3F3707C8B122")
    ksFeatureCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksFeatureCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksFeatureCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksFeatureCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksFeatureCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksFeatureCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksFeatureCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksFeatureCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksFeatureCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksFeatureCollectionVtbl;

    interface ksFeatureCollection
    {
        CONST_VTBL struct ksFeatureCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksFeatureCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksFeatureCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksFeatureCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksFeatureCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksFeatureCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksFeatureCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksFeatureCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksFeatureCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksAttribute3D_DISPINTERFACE_DEFINED__
#define __ksAttribute3D_DISPINTERFACE_DEFINED__

/* dispinterface ksAttribute3D */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksAttribute3D,0x3EEB2B43,0x56FF,0x49c0,0xAF,0xCF,0x69,0xE9,0x90,0xA7,0xD8,0x4C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3EEB2B43-56FF-49c0-AFCF-69E990A7D84C")
    ksAttribute3D : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksAttribute3DVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksAttribute3D * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksAttribute3D * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksAttribute3D * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksAttribute3D * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksAttribute3D * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksAttribute3D * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksAttribute3D * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksAttribute3DVtbl;

    interface ksAttribute3D
    {
        CONST_VTBL struct ksAttribute3DVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksAttribute3D_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksAttribute3D_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksAttribute3D_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksAttribute3D_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksAttribute3D_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksAttribute3D_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksAttribute3D_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksAttribute3D_DISPINTERFACE_DEFINED__ */


#ifndef __ksAttribute3DCollection_DISPINTERFACE_DEFINED__
#define __ksAttribute3DCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksAttribute3DCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksAttribute3DCollection,0xEB61A981,0xF63E,0x47e1,0xBE,0xE8,0x2D,0x16,0x12,0xC7,0x8E,0x78);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EB61A981-F63E-47e1-BEE8-2D1612C78E78")
    ksAttribute3DCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksAttribute3DCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksAttribute3DCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksAttribute3DCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksAttribute3DCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksAttribute3DCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksAttribute3DCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksAttribute3DCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksAttribute3DCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksAttribute3DCollectionVtbl;

    interface ksAttribute3DCollection
    {
        CONST_VTBL struct ksAttribute3DCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksAttribute3DCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksAttribute3DCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksAttribute3DCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksAttribute3DCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksAttribute3DCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksAttribute3DCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksAttribute3DCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksAttribute3DCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksComponentPositioner_DISPINTERFACE_DEFINED__
#define __ksComponentPositioner_DISPINTERFACE_DEFINED__

/* dispinterface ksComponentPositioner */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksComponentPositioner,0x508B5962,0xDF59,0x4cee,0x86,0x11,0xAD,0x10,0xFD,0xF0,0xC8,0x11);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("508B5962-DF59-4cee-8611-AD10FDF0C811")
    ksComponentPositioner : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksComponentPositionerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksComponentPositioner * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksComponentPositioner * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksComponentPositioner * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksComponentPositioner * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksComponentPositioner * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksComponentPositioner * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksComponentPositioner * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksComponentPositionerVtbl;

    interface ksComponentPositioner
    {
        CONST_VTBL struct ksComponentPositionerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksComponentPositioner_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksComponentPositioner_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksComponentPositioner_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksComponentPositioner_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksComponentPositioner_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksComponentPositioner_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksComponentPositioner_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksComponentPositioner_DISPINTERFACE_DEFINED__ */


#ifndef __ksPlacement_DISPINTERFACE_DEFINED__
#define __ksPlacement_DISPINTERFACE_DEFINED__

/* dispinterface ksPlacement */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPlacement,0x2DFACC64,0xC4A4,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("2DFACC64-C4A4-11D6-8734-00C0262CDD2C")
    ksPlacement : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPlacementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPlacement * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPlacement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPlacement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPlacement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPlacement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPlacement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPlacement * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPlacementVtbl;

    interface ksPlacement
    {
        CONST_VTBL struct ksPlacementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPlacement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPlacement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPlacement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPlacement_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPlacement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPlacement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPlacement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPlacement_DISPINTERFACE_DEFINED__ */


#ifndef __ksKompasObjectNotify_DISPINTERFACE_DEFINED__
#define __ksKompasObjectNotify_DISPINTERFACE_DEFINED__

/* dispinterface ksKompasObjectNotify */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksKompasObjectNotify,0xC7CB743A,0xC59D,0x4c27,0x8C,0xB6,0x97,0x1C,0x2A,0x39,0x3F,0x2F);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("C7CB743A-C59D-4c27-8CB6-971C2A393F2F")
    ksKompasObjectNotify : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksKompasObjectNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksKompasObjectNotify * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksKompasObjectNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksKompasObjectNotify * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksKompasObjectNotify * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksKompasObjectNotify * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksKompasObjectNotify * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksKompasObjectNotify * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksKompasObjectNotifyVtbl;

    interface ksKompasObjectNotify
    {
        CONST_VTBL struct ksKompasObjectNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksKompasObjectNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksKompasObjectNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksKompasObjectNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksKompasObjectNotify_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksKompasObjectNotify_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksKompasObjectNotify_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksKompasObjectNotify_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksKompasObjectNotify_DISPINTERFACE_DEFINED__ */


#ifndef __ksDocumentFileNotify_DISPINTERFACE_DEFINED__
#define __ksDocumentFileNotify_DISPINTERFACE_DEFINED__

/* dispinterface ksDocumentFileNotify */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDocumentFileNotify,0x324C1A45,0x67AD,0x41fb,0xBE,0x57,0x62,0x4F,0x93,0x06,0x46,0xF1);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("324C1A45-67AD-41fb-BE57-624F930646F1")
    ksDocumentFileNotify : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDocumentFileNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDocumentFileNotify * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDocumentFileNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDocumentFileNotify * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDocumentFileNotify * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDocumentFileNotify * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDocumentFileNotify * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDocumentFileNotify * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDocumentFileNotifyVtbl;

    interface ksDocumentFileNotify
    {
        CONST_VTBL struct ksDocumentFileNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDocumentFileNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDocumentFileNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDocumentFileNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDocumentFileNotify_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDocumentFileNotify_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDocumentFileNotify_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDocumentFileNotify_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDocumentFileNotify_DISPINTERFACE_DEFINED__ */


#ifndef __ksDocument2DNotify_DISPINTERFACE_DEFINED__
#define __ksDocument2DNotify_DISPINTERFACE_DEFINED__

/* dispinterface ksDocument2DNotify */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDocument2DNotify,0x13F0BE95,0x3361,0x4ad9,0x90,0xAF,0xD9,0x35,0xEA,0x64,0xA1,0x27);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("13F0BE95-3361-4ad9-90AF-D935EA64A127")
    ksDocument2DNotify : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDocument2DNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDocument2DNotify * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDocument2DNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDocument2DNotify * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDocument2DNotify * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDocument2DNotify * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDocument2DNotify * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDocument2DNotify * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDocument2DNotifyVtbl;

    interface ksDocument2DNotify
    {
        CONST_VTBL struct ksDocument2DNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDocument2DNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDocument2DNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDocument2DNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDocument2DNotify_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDocument2DNotify_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDocument2DNotify_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDocument2DNotify_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDocument2DNotify_DISPINTERFACE_DEFINED__ */


#ifndef __ksObject2DNotify_DISPINTERFACE_DEFINED__
#define __ksObject2DNotify_DISPINTERFACE_DEFINED__

/* dispinterface ksObject2DNotify */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksObject2DNotify,0x2E29C343,0xC521,0x4b0f,0xB3,0x7D,0x58,0x7D,0x03,0x47,0xB7,0xBA);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("2E29C343-C521-4b0f-B37D-587D0347B7BA")
    ksObject2DNotify : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksObject2DNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksObject2DNotify * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksObject2DNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksObject2DNotify * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksObject2DNotify * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksObject2DNotify * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksObject2DNotify * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksObject2DNotify * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksObject2DNotifyVtbl;

    interface ksObject2DNotify
    {
        CONST_VTBL struct ksObject2DNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksObject2DNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksObject2DNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksObject2DNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksObject2DNotify_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksObject2DNotify_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksObject2DNotify_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksObject2DNotify_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksObject2DNotify_DISPINTERFACE_DEFINED__ */


#ifndef __ksObject3DNotify_DISPINTERFACE_DEFINED__
#define __ksObject3DNotify_DISPINTERFACE_DEFINED__

/* dispinterface ksObject3DNotify */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksObject3DNotify,0xBFA024B6,0x679E,0x4a95,0xB6,0xC2,0x1E,0xA4,0x7A,0x7C,0xD0,0xE9);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("BFA024B6-679E-4a95-B6C2-1EA47A7CD0E9")
    ksObject3DNotify : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksObject3DNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksObject3DNotify * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksObject3DNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksObject3DNotify * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksObject3DNotify * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksObject3DNotify * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksObject3DNotify * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksObject3DNotify * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksObject3DNotifyVtbl;

    interface ksObject3DNotify
    {
        CONST_VTBL struct ksObject3DNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksObject3DNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksObject3DNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksObject3DNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksObject3DNotify_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksObject3DNotify_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksObject3DNotify_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksObject3DNotify_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksObject3DNotify_DISPINTERFACE_DEFINED__ */


#ifndef __ksObject2DNotifyResult_DISPINTERFACE_DEFINED__
#define __ksObject2DNotifyResult_DISPINTERFACE_DEFINED__

/* dispinterface ksObject2DNotifyResult */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksObject2DNotifyResult,0x1FE1EB28,0xCD28,0x4700,0x8E,0x46,0x25,0xCC,0xFE,0x9C,0x0E,0xC8);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1FE1EB28-CD28-4700-8E46-25CCFE9C0EC8")
    ksObject2DNotifyResult : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksObject2DNotifyResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksObject2DNotifyResult * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksObject2DNotifyResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksObject2DNotifyResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksObject2DNotifyResult * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksObject2DNotifyResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksObject2DNotifyResult * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksObject2DNotifyResult * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksObject2DNotifyResultVtbl;

    interface ksObject2DNotifyResult
    {
        CONST_VTBL struct ksObject2DNotifyResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksObject2DNotifyResult_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksObject2DNotifyResult_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksObject2DNotifyResult_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksObject2DNotifyResult_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksObject2DNotifyResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksObject2DNotifyResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksObject2DNotifyResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksObject2DNotifyResult_DISPINTERFACE_DEFINED__ */


#ifndef __ksObject3DNotifyResult_DISPINTERFACE_DEFINED__
#define __ksObject3DNotifyResult_DISPINTERFACE_DEFINED__

/* dispinterface ksObject3DNotifyResult */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksObject3DNotifyResult,0x9C3ECC92,0xE72F,0x4892,0x89,0x21,0x78,0x86,0xF3,0x4C,0xA9,0xAD);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("9C3ECC92-E72F-4892-8921-7886F34CA9AD")
    ksObject3DNotifyResult : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksObject3DNotifyResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksObject3DNotifyResult * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksObject3DNotifyResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksObject3DNotifyResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksObject3DNotifyResult * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksObject3DNotifyResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksObject3DNotifyResult * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksObject3DNotifyResult * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksObject3DNotifyResultVtbl;

    interface ksObject3DNotifyResult
    {
        CONST_VTBL struct ksObject3DNotifyResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksObject3DNotifyResult_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksObject3DNotifyResult_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksObject3DNotifyResult_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksObject3DNotifyResult_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksObject3DNotifyResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksObject3DNotifyResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksObject3DNotifyResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksObject3DNotifyResult_DISPINTERFACE_DEFINED__ */


#ifndef __ksDocument3DNotifyResult_DISPINTERFACE_DEFINED__
#define __ksDocument3DNotifyResult_DISPINTERFACE_DEFINED__

/* dispinterface ksDocument3DNotifyResult */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDocument3DNotifyResult,0x9F88CAAA,0xA50F,0x46f4,0x90,0x4A,0x84,0x6C,0x79,0x2F,0xA6,0x49);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("9F88CAAA-A50F-46f4-904A-846C792FA649")
    ksDocument3DNotifyResult : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDocument3DNotifyResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDocument3DNotifyResult * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDocument3DNotifyResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDocument3DNotifyResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDocument3DNotifyResult * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDocument3DNotifyResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDocument3DNotifyResult * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDocument3DNotifyResult * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDocument3DNotifyResultVtbl;

    interface ksDocument3DNotifyResult
    {
        CONST_VTBL struct ksDocument3DNotifyResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDocument3DNotifyResult_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDocument3DNotifyResult_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDocument3DNotifyResult_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDocument3DNotifyResult_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDocument3DNotifyResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDocument3DNotifyResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDocument3DNotifyResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDocument3DNotifyResult_DISPINTERFACE_DEFINED__ */


#ifndef __ksSelectionMngNotify_DISPINTERFACE_DEFINED__
#define __ksSelectionMngNotify_DISPINTERFACE_DEFINED__

/* dispinterface ksSelectionMngNotify */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSelectionMngNotify,0xA421368A,0x34B6,0x4ddf,0x9A,0x52,0x73,0xB3,0x48,0x8E,0xE8,0x3F);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("A421368A-34B6-4ddf-9A52-73B3488EE83F")
    ksSelectionMngNotify : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSelectionMngNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSelectionMngNotify * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSelectionMngNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSelectionMngNotify * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSelectionMngNotify * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSelectionMngNotify * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSelectionMngNotify * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSelectionMngNotify * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSelectionMngNotifyVtbl;

    interface ksSelectionMngNotify
    {
        CONST_VTBL struct ksSelectionMngNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSelectionMngNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSelectionMngNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSelectionMngNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSelectionMngNotify_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSelectionMngNotify_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSelectionMngNotify_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSelectionMngNotify_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSelectionMngNotify_DISPINTERFACE_DEFINED__ */


#ifndef __ksSpecRoughParam_DISPINTERFACE_DEFINED__
#define __ksSpecRoughParam_DISPINTERFACE_DEFINED__

/* dispinterface ksSpecRoughParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSpecRoughParam,0x364521A3,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("364521A3-94B5-11D6-8732-00C0262CDD2C")
    ksSpecRoughParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSpecRoughParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSpecRoughParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSpecRoughParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSpecRoughParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSpecRoughParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSpecRoughParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSpecRoughParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSpecRoughParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSpecRoughParamVtbl;

    interface ksSpecRoughParam
    {
        CONST_VTBL struct ksSpecRoughParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSpecRoughParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSpecRoughParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSpecRoughParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSpecRoughParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSpecRoughParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSpecRoughParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSpecRoughParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSpecRoughParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksEllipseParam_DISPINTERFACE_DEFINED__
#define __ksEllipseParam_DISPINTERFACE_DEFINED__

/* dispinterface ksEllipseParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksEllipseParam,0x364521A6,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("364521A6-94B5-11D6-8732-00C0262CDD2C")
    ksEllipseParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksEllipseParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksEllipseParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksEllipseParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksEllipseParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksEllipseParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksEllipseParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksEllipseParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksEllipseParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksEllipseParamVtbl;

    interface ksEllipseParam
    {
        CONST_VTBL struct ksEllipseParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksEllipseParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksEllipseParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksEllipseParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksEllipseParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksEllipseParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksEllipseParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksEllipseParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksEllipseParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksEllipseArcParam_DISPINTERFACE_DEFINED__
#define __ksEllipseArcParam_DISPINTERFACE_DEFINED__

/* dispinterface ksEllipseArcParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksEllipseArcParam,0x364521A9,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("364521A9-94B5-11D6-8732-00C0262CDD2C")
    ksEllipseArcParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksEllipseArcParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksEllipseArcParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksEllipseArcParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksEllipseArcParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksEllipseArcParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksEllipseArcParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksEllipseArcParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksEllipseArcParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksEllipseArcParamVtbl;

    interface ksEllipseArcParam
    {
        CONST_VTBL struct ksEllipseArcParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksEllipseArcParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksEllipseArcParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksEllipseArcParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksEllipseArcParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksEllipseArcParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksEllipseArcParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksEllipseArcParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksEllipseArcParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksEllipseArcParam1_DISPINTERFACE_DEFINED__
#define __ksEllipseArcParam1_DISPINTERFACE_DEFINED__

/* dispinterface ksEllipseArcParam1 */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksEllipseArcParam1,0x364521AC,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("364521AC-94B5-11D6-8732-00C0262CDD2C")
    ksEllipseArcParam1 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksEllipseArcParam1Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksEllipseArcParam1 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksEllipseArcParam1 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksEllipseArcParam1 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksEllipseArcParam1 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksEllipseArcParam1 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksEllipseArcParam1 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksEllipseArcParam1 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksEllipseArcParam1Vtbl;

    interface ksEllipseArcParam1
    {
        CONST_VTBL struct ksEllipseArcParam1Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksEllipseArcParam1_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksEllipseArcParam1_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksEllipseArcParam1_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksEllipseArcParam1_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksEllipseArcParam1_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksEllipseArcParam1_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksEllipseArcParam1_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksEllipseArcParam1_DISPINTERFACE_DEFINED__ */


#ifndef __ksEquidistantParam_DISPINTERFACE_DEFINED__
#define __ksEquidistantParam_DISPINTERFACE_DEFINED__

/* dispinterface ksEquidistantParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksEquidistantParam,0x364521AF,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("364521AF-94B5-11D6-8732-00C0262CDD2C")
    ksEquidistantParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksEquidistantParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksEquidistantParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksEquidistantParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksEquidistantParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksEquidistantParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksEquidistantParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksEquidistantParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksEquidistantParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksEquidistantParamVtbl;

    interface ksEquidistantParam
    {
        CONST_VTBL struct ksEquidistantParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksEquidistantParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksEquidistantParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksEquidistantParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksEquidistantParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksEquidistantParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksEquidistantParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksEquidistantParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksEquidistantParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksParagraphParam_DISPINTERFACE_DEFINED__
#define __ksParagraphParam_DISPINTERFACE_DEFINED__

/* dispinterface ksParagraphParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksParagraphParam,0x364521B2,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("364521B2-94B5-11D6-8732-00C0262CDD2C")
    ksParagraphParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksParagraphParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksParagraphParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksParagraphParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksParagraphParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksParagraphParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksParagraphParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksParagraphParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksParagraphParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksParagraphParamVtbl;

    interface ksParagraphParam
    {
        CONST_VTBL struct ksParagraphParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksParagraphParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksParagraphParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksParagraphParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksParagraphParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksParagraphParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksParagraphParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksParagraphParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksParagraphParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksTextItemParam_DISPINTERFACE_DEFINED__
#define __ksTextItemParam_DISPINTERFACE_DEFINED__

/* dispinterface ksTextItemParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksTextItemParam,0x364521B7,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("364521B7-94B5-11D6-8732-00C0262CDD2C")
    ksTextItemParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksTextItemParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksTextItemParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksTextItemParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksTextItemParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksTextItemParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksTextItemParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksTextItemParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksTextItemParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksTextItemParamVtbl;

    interface ksTextItemParam
    {
        CONST_VTBL struct ksTextItemParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksTextItemParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksTextItemParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksTextItemParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksTextItemParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksTextItemParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksTextItemParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksTextItemParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksTextItemParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksTextLineParam_DISPINTERFACE_DEFINED__
#define __ksTextLineParam_DISPINTERFACE_DEFINED__

/* dispinterface ksTextLineParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksTextLineParam,0x364521BA,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("364521BA-94B5-11D6-8732-00C0262CDD2C")
    ksTextLineParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksTextLineParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksTextLineParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksTextLineParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksTextLineParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksTextLineParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksTextLineParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksTextLineParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksTextLineParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksTextLineParamVtbl;

    interface ksTextLineParam
    {
        CONST_VTBL struct ksTextLineParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksTextLineParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksTextLineParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksTextLineParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksTextLineParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksTextLineParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksTextLineParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksTextLineParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksTextLineParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksTextItemFont_DISPINTERFACE_DEFINED__
#define __ksTextItemFont_DISPINTERFACE_DEFINED__

/* dispinterface ksTextItemFont */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksTextItemFont,0x364521BD,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("364521BD-94B5-11D6-8732-00C0262CDD2C")
    ksTextItemFont : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksTextItemFontVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksTextItemFont * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksTextItemFont * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksTextItemFont * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksTextItemFont * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksTextItemFont * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksTextItemFont * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksTextItemFont * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksTextItemFontVtbl;

    interface ksTextItemFont
    {
        CONST_VTBL struct ksTextItemFontVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksTextItemFont_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksTextItemFont_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksTextItemFont_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksTextItemFont_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksTextItemFont_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksTextItemFont_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksTextItemFont_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksTextItemFont_DISPINTERFACE_DEFINED__ */


#ifndef __ksCornerParam_DISPINTERFACE_DEFINED__
#define __ksCornerParam_DISPINTERFACE_DEFINED__

/* dispinterface ksCornerParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCornerParam,0xE79C2501,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E79C2501-9584-11D6-8732-00C0262CDD2C")
    ksCornerParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCornerParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCornerParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCornerParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCornerParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCornerParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCornerParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCornerParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCornerParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCornerParamVtbl;

    interface ksCornerParam
    {
        CONST_VTBL struct ksCornerParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCornerParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCornerParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCornerParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCornerParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCornerParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCornerParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCornerParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCornerParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksContourParam_DISPINTERFACE_DEFINED__
#define __ksContourParam_DISPINTERFACE_DEFINED__

/* dispinterface ksContourParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksContourParam,0xE79C2504,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E79C2504-9584-11D6-8732-00C0262CDD2C")
    ksContourParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksContourParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksContourParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksContourParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksContourParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksContourParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksContourParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksContourParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksContourParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksContourParamVtbl;

    interface ksContourParam
    {
        CONST_VTBL struct ksContourParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksContourParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksContourParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksContourParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksContourParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksContourParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksContourParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksContourParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksContourParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksLayerParam_DISPINTERFACE_DEFINED__
#define __ksLayerParam_DISPINTERFACE_DEFINED__

/* dispinterface ksLayerParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLayerParam,0xE79C2507,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E79C2507-9584-11D6-8732-00C0262CDD2C")
    ksLayerParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLayerParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLayerParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLayerParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLayerParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLayerParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLayerParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLayerParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLayerParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLayerParamVtbl;

    interface ksLayerParam
    {
        CONST_VTBL struct ksLayerParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLayerParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLayerParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLayerParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLayerParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLayerParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLayerParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLayerParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLayerParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksLineParam_DISPINTERFACE_DEFINED__
#define __ksLineParam_DISPINTERFACE_DEFINED__

/* dispinterface ksLineParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLineParam,0xE79C250A,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E79C250A-9584-11D6-8732-00C0262CDD2C")
    ksLineParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLineParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLineParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLineParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLineParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLineParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLineParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLineParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLineParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLineParamVtbl;

    interface ksLineParam
    {
        CONST_VTBL struct ksLineParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLineParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLineParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLineParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLineParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLineParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLineParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLineParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLineParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksRegularPolygonParam_DISPINTERFACE_DEFINED__
#define __ksRegularPolygonParam_DISPINTERFACE_DEFINED__

/* dispinterface ksRegularPolygonParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRegularPolygonParam,0xE79C250D,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E79C250D-9584-11D6-8732-00C0262CDD2C")
    ksRegularPolygonParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRegularPolygonParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRegularPolygonParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRegularPolygonParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRegularPolygonParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRegularPolygonParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRegularPolygonParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRegularPolygonParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRegularPolygonParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRegularPolygonParamVtbl;

    interface ksRegularPolygonParam
    {
        CONST_VTBL struct ksRegularPolygonParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRegularPolygonParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRegularPolygonParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRegularPolygonParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRegularPolygonParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRegularPolygonParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRegularPolygonParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRegularPolygonParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRegularPolygonParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksRectangleParam_DISPINTERFACE_DEFINED__
#define __ksRectangleParam_DISPINTERFACE_DEFINED__

/* dispinterface ksRectangleParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRectangleParam,0xE79C2510,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E79C2510-9584-11D6-8732-00C0262CDD2C")
    ksRectangleParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRectangleParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRectangleParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRectangleParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRectangleParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRectangleParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRectangleParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRectangleParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRectangleParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRectangleParamVtbl;

    interface ksRectangleParam
    {
        CONST_VTBL struct ksRectangleParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRectangleParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRectangleParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRectangleParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRectangleParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRectangleParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRectangleParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRectangleParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRectangleParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksBaseParam_DISPINTERFACE_DEFINED__
#define __ksBaseParam_DISPINTERFACE_DEFINED__

/* dispinterface ksBaseParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBaseParam,0xE79C2513,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E79C2513-9584-11D6-8732-00C0262CDD2C")
    ksBaseParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBaseParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBaseParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBaseParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBaseParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBaseParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBaseParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBaseParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBaseParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBaseParamVtbl;

    interface ksBaseParam
    {
        CONST_VTBL struct ksBaseParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBaseParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBaseParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBaseParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBaseParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBaseParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBaseParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBaseParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBaseParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksLtVariant_DISPINTERFACE_DEFINED__
#define __ksLtVariant_DISPINTERFACE_DEFINED__

/* dispinterface ksLtVariant */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLtVariant,0xE79C2516,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E79C2516-9584-11D6-8732-00C0262CDD2C")
    ksLtVariant : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLtVariantVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLtVariant * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLtVariant * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLtVariant * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLtVariant * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLtVariant * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLtVariant * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLtVariant * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLtVariantVtbl;

    interface ksLtVariant
    {
        CONST_VTBL struct ksLtVariantVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLtVariant_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLtVariant_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLtVariant_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLtVariant_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLtVariant_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLtVariant_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLtVariant_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLtVariant_DISPINTERFACE_DEFINED__ */


#ifndef __ksUserParam_DISPINTERFACE_DEFINED__
#define __ksUserParam_DISPINTERFACE_DEFINED__

/* dispinterface ksUserParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksUserParam,0xE79C2519,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E79C2519-9584-11D6-8732-00C0262CDD2C")
    ksUserParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksUserParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksUserParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksUserParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksUserParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksUserParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksUserParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksUserParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksUserParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksUserParamVtbl;

    interface ksUserParam
    {
        CONST_VTBL struct ksUserParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksUserParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksUserParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksUserParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksUserParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksUserParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksUserParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksUserParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksUserParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksMathPointParam_DISPINTERFACE_DEFINED__
#define __ksMathPointParam_DISPINTERFACE_DEFINED__

/* dispinterface ksMathPointParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksMathPointParam,0x3198E121,0x9585,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3198E121-9585-11D6-95CE-00C0262D30E3")
    ksMathPointParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksMathPointParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksMathPointParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksMathPointParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksMathPointParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksMathPointParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksMathPointParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksMathPointParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksMathPointParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksMathPointParamVtbl;

    interface ksMathPointParam
    {
        CONST_VTBL struct ksMathPointParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksMathPointParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksMathPointParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksMathPointParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksMathPointParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksMathPointParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksMathPointParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksMathPointParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksMathPointParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksCurvePicture_DISPINTERFACE_DEFINED__
#define __ksCurvePicture_DISPINTERFACE_DEFINED__

/* dispinterface ksCurvePicture */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCurvePicture,0x910EC541,0x958D,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("910EC541-958D-11D6-95CE-00C0262D30E3")
    ksCurvePicture : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCurvePictureVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCurvePicture * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCurvePicture * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCurvePicture * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCurvePicture * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCurvePicture * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCurvePicture * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCurvePicture * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCurvePictureVtbl;

    interface ksCurvePicture
    {
        CONST_VTBL struct ksCurvePictureVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCurvePicture_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCurvePicture_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCurvePicture_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCurvePicture_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCurvePicture_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCurvePicture_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCurvePicture_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCurvePicture_DISPINTERFACE_DEFINED__ */


#ifndef __ksCurvePattern_DISPINTERFACE_DEFINED__
#define __ksCurvePattern_DISPINTERFACE_DEFINED__

/* dispinterface ksCurvePattern */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCurvePattern,0x910EC544,0x958D,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("910EC544-958D-11D6-95CE-00C0262D30E3")
    ksCurvePattern : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCurvePatternVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCurvePattern * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCurvePattern * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCurvePattern * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCurvePattern * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCurvePattern * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCurvePattern * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCurvePattern * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCurvePatternVtbl;

    interface ksCurvePattern
    {
        CONST_VTBL struct ksCurvePatternVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCurvePattern_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCurvePattern_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCurvePattern_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCurvePattern_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCurvePattern_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCurvePattern_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCurvePattern_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCurvePattern_DISPINTERFACE_DEFINED__ */


#ifndef __ksTAN_DISPINTERFACE_DEFINED__
#define __ksTAN_DISPINTERFACE_DEFINED__

/* dispinterface ksTAN */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksTAN,0x8075EDE4,0x6C85,0x4711,0x86,0x85,0x68,0xFB,0xE3,0x59,0xD4,0xC4);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("8075EDE4-6C85-4711-8685-68FBE359D4C4")
    ksTAN : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksTANVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksTAN * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksTAN * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksTAN * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksTAN * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksTAN * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksTAN * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksTAN * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksTANVtbl;

    interface ksTAN
    {
        CONST_VTBL struct ksTANVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksTAN_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksTAN_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksTAN_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksTAN_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksTAN_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksTAN_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksTAN_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksTAN_DISPINTERFACE_DEFINED__ */


#ifndef __ksCON_DISPINTERFACE_DEFINED__
#define __ksCON_DISPINTERFACE_DEFINED__

/* dispinterface ksCON */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCON,0xC175BFB8,0xD7D6,0x4325,0xBF,0xDA,0x2A,0x28,0x2B,0x9D,0x11,0x19);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("C175BFB8-D7D6-4325-BFDA-2A282B9D1119")
    ksCON : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCONVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCON * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCON * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCON * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCON * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCON * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCON * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCON * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCONVtbl;

    interface ksCON
    {
        CONST_VTBL struct ksCONVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCON_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCON_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCON_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCON_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCON_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCON_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCON_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCON_DISPINTERFACE_DEFINED__ */


#ifndef __ksInertiaParam_DISPINTERFACE_DEFINED__
#define __ksInertiaParam_DISPINTERFACE_DEFINED__

/* dispinterface ksInertiaParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksInertiaParam,0xEA92E649,0x239E,0x4105,0xBB,0xD3,0xAE,0xF4,0x81,0x7B,0xD7,0x83);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EA92E649-239E-4105-BBD3-AEF4817BD783")
    ksInertiaParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksInertiaParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksInertiaParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksInertiaParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksInertiaParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksInertiaParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksInertiaParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksInertiaParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksInertiaParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksInertiaParamVtbl;

    interface ksInertiaParam
    {
        CONST_VTBL struct ksInertiaParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksInertiaParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksInertiaParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksInertiaParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksInertiaParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksInertiaParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksInertiaParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksInertiaParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksInertiaParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksMassInertiaParam_DISPINTERFACE_DEFINED__
#define __ksMassInertiaParam_DISPINTERFACE_DEFINED__

/* dispinterface ksMassInertiaParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksMassInertiaParam,0x283F77EB,0x7E2C,0x4F71,0x8B,0x16,0x4D,0x28,0x6F,0xA4,0x85,0x7E);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("283F77EB-7E2C-4F71-8B16-4D286FA4857E")
    ksMassInertiaParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksMassInertiaParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksMassInertiaParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksMassInertiaParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksMassInertiaParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksMassInertiaParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksMassInertiaParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksMassInertiaParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksMassInertiaParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksMassInertiaParamVtbl;

    interface ksMassInertiaParam
    {
        CONST_VTBL struct ksMassInertiaParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksMassInertiaParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksMassInertiaParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksMassInertiaParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksMassInertiaParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksMassInertiaParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksMassInertiaParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksMassInertiaParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksMassInertiaParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksMathematic2D_DISPINTERFACE_DEFINED__
#define __ksMathematic2D_DISPINTERFACE_DEFINED__

/* dispinterface ksMathematic2D */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksMathematic2D,0xF2D5AE01,0x45DE,0x4496,0xB0,0x1B,0x99,0x58,0xCA,0xEF,0x59,0x43);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("F2D5AE01-45DE-4496-B01B-9958CAEF5943")
    ksMathematic2D : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksMathematic2DVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksMathematic2D * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksMathematic2D * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksMathematic2D * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksMathematic2D * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksMathematic2D * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksMathematic2D * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksMathematic2D * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksMathematic2DVtbl;

    interface ksMathematic2D
    {
        CONST_VTBL struct ksMathematic2DVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksMathematic2D_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksMathematic2D_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksMathematic2D_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksMathematic2D_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksMathematic2D_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksMathematic2D_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksMathematic2D_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksMathematic2D_DISPINTERFACE_DEFINED__ */


#ifndef __ksDynamicArray_DISPINTERFACE_DEFINED__
#define __ksDynamicArray_DISPINTERFACE_DEFINED__

/* dispinterface ksDynamicArray */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDynamicArray,0x4D91CD9A,0x6E02,0x409D,0x93,0x60,0xCF,0x7F,0xEF,0x60,0xD3,0x1C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4D91CD9A-6E02-409D-9360-CF7FEF60D31C")
    ksDynamicArray : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDynamicArrayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDynamicArray * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDynamicArray * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDynamicArray * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDynamicArray * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDynamicArray * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDynamicArray * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDynamicArray * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDynamicArrayVtbl;

    interface ksDynamicArray
    {
        CONST_VTBL struct ksDynamicArrayVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDynamicArray_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDynamicArray_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDynamicArray_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDynamicArray_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDynamicArray_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDynamicArray_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDynamicArray_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDynamicArray_DISPINTERFACE_DEFINED__ */


#ifndef __ksRDimDrawingParam_DISPINTERFACE_DEFINED__
#define __ksRDimDrawingParam_DISPINTERFACE_DEFINED__

/* dispinterface ksRDimDrawingParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRDimDrawingParam,0x2A4D4542,0x95B3,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("2A4D4542-95B3-11D6-8732-00C0262CDD2C")
    ksRDimDrawingParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRDimDrawingParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRDimDrawingParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRDimDrawingParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRDimDrawingParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRDimDrawingParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRDimDrawingParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRDimDrawingParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRDimDrawingParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRDimDrawingParamVtbl;

    interface ksRDimDrawingParam
    {
        CONST_VTBL struct ksRDimDrawingParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRDimDrawingParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRDimDrawingParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRDimDrawingParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRDimDrawingParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRDimDrawingParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRDimDrawingParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRDimDrawingParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRDimDrawingParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksRDimSourceParam_DISPINTERFACE_DEFINED__
#define __ksRDimSourceParam_DISPINTERFACE_DEFINED__

/* dispinterface ksRDimSourceParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRDimSourceParam,0x2A4D4545,0x95B3,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("2A4D4545-95B3-11D6-8732-00C0262CDD2C")
    ksRDimSourceParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRDimSourceParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRDimSourceParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRDimSourceParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRDimSourceParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRDimSourceParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRDimSourceParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRDimSourceParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRDimSourceParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRDimSourceParamVtbl;

    interface ksRDimSourceParam
    {
        CONST_VTBL struct ksRDimSourceParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRDimSourceParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRDimSourceParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRDimSourceParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRDimSourceParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRDimSourceParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRDimSourceParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRDimSourceParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRDimSourceParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksRDimParam_DISPINTERFACE_DEFINED__
#define __ksRDimParam_DISPINTERFACE_DEFINED__

/* dispinterface ksRDimParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRDimParam,0x7F7D6F81,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6F81-97DA-11D6-8732-00C0262CDD2C")
    ksRDimParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRDimParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRDimParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRDimParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRDimParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRDimParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRDimParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRDimParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRDimParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRDimParamVtbl;

    interface ksRDimParam
    {
        CONST_VTBL struct ksRDimParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRDimParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRDimParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRDimParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRDimParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRDimParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRDimParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRDimParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRDimParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksLineSegParam_DISPINTERFACE_DEFINED__
#define __ksLineSegParam_DISPINTERFACE_DEFINED__

/* dispinterface ksLineSegParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLineSegParam,0x7F7D6F84,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6F84-97DA-11D6-8732-00C0262CDD2C")
    ksLineSegParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLineSegParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLineSegParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLineSegParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLineSegParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLineSegParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLineSegParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLineSegParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLineSegParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLineSegParamVtbl;

    interface ksLineSegParam
    {
        CONST_VTBL struct ksLineSegParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLineSegParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLineSegParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLineSegParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLineSegParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLineSegParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLineSegParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLineSegParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLineSegParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksCircleParam_DISPINTERFACE_DEFINED__
#define __ksCircleParam_DISPINTERFACE_DEFINED__

/* dispinterface ksCircleParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCircleParam,0x7F7D6F87,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6F87-97DA-11D6-8732-00C0262CDD2C")
    ksCircleParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCircleParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCircleParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCircleParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCircleParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCircleParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCircleParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCircleParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCircleParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCircleParamVtbl;

    interface ksCircleParam
    {
        CONST_VTBL struct ksCircleParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCircleParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCircleParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCircleParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCircleParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCircleParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCircleParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCircleParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCircleParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksArcByAngleParam_DISPINTERFACE_DEFINED__
#define __ksArcByAngleParam_DISPINTERFACE_DEFINED__

/* dispinterface ksArcByAngleParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksArcByAngleParam,0x7F7D6F8A,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6F8A-97DA-11D6-8732-00C0262CDD2C")
    ksArcByAngleParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksArcByAngleParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksArcByAngleParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksArcByAngleParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksArcByAngleParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksArcByAngleParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksArcByAngleParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksArcByAngleParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksArcByAngleParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksArcByAngleParamVtbl;

    interface ksArcByAngleParam
    {
        CONST_VTBL struct ksArcByAngleParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksArcByAngleParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksArcByAngleParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksArcByAngleParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksArcByAngleParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksArcByAngleParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksArcByAngleParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksArcByAngleParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksArcByAngleParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksArcByPointParam_DISPINTERFACE_DEFINED__
#define __ksArcByPointParam_DISPINTERFACE_DEFINED__

/* dispinterface ksArcByPointParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksArcByPointParam,0x7F7D6F8D,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6F8D-97DA-11D6-8732-00C0262CDD2C")
    ksArcByPointParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksArcByPointParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksArcByPointParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksArcByPointParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksArcByPointParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksArcByPointParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksArcByPointParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksArcByPointParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksArcByPointParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksArcByPointParamVtbl;

    interface ksArcByPointParam
    {
        CONST_VTBL struct ksArcByPointParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksArcByPointParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksArcByPointParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksArcByPointParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksArcByPointParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksArcByPointParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksArcByPointParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksArcByPointParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksArcByPointParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksPointParam_DISPINTERFACE_DEFINED__
#define __ksPointParam_DISPINTERFACE_DEFINED__

/* dispinterface ksPointParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPointParam,0x7F7D6F90,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6F90-97DA-11D6-8732-00C0262CDD2C")
    ksPointParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPointParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPointParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPointParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPointParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPointParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPointParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPointParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPointParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPointParamVtbl;

    interface ksPointParam
    {
        CONST_VTBL struct ksPointParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPointParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPointParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPointParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPointParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPointParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPointParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPointParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPointParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksHatchParam_DISPINTERFACE_DEFINED__
#define __ksHatchParam_DISPINTERFACE_DEFINED__

/* dispinterface ksHatchParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksHatchParam,0x7F7D6F93,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6F93-97DA-11D6-8732-00C0262CDD2C")
    ksHatchParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksHatchParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksHatchParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksHatchParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksHatchParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksHatchParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksHatchParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksHatchParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksHatchParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksHatchParamVtbl;

    interface ksHatchParam
    {
        CONST_VTBL struct ksHatchParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksHatchParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksHatchParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksHatchParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksHatchParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksHatchParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksHatchParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksHatchParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksHatchParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksTextParam_DISPINTERFACE_DEFINED__
#define __ksTextParam_DISPINTERFACE_DEFINED__

/* dispinterface ksTextParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksTextParam,0x7F7D6F96,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6F96-97DA-11D6-8732-00C0262CDD2C")
    ksTextParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksTextParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksTextParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksTextParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksTextParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksTextParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksTextParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksTextParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksTextParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksTextParamVtbl;

    interface ksTextParam
    {
        CONST_VTBL struct ksTextParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksTextParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksTextParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksTextParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksTextParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksTextParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksTextParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksTextParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksTextParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksNurbsPointParam_DISPINTERFACE_DEFINED__
#define __ksNurbsPointParam_DISPINTERFACE_DEFINED__

/* dispinterface ksNurbsPointParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksNurbsPointParam,0x7F7D6F99,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6F99-97DA-11D6-8732-00C0262CDD2C")
    ksNurbsPointParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksNurbsPointParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksNurbsPointParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksNurbsPointParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksNurbsPointParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksNurbsPointParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksNurbsPointParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksNurbsPointParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksNurbsPointParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksNurbsPointParamVtbl;

    interface ksNurbsPointParam
    {
        CONST_VTBL struct ksNurbsPointParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksNurbsPointParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksNurbsPointParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksNurbsPointParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksNurbsPointParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksNurbsPointParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksNurbsPointParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksNurbsPointParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksNurbsPointParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksDoubleValue_DISPINTERFACE_DEFINED__
#define __ksDoubleValue_DISPINTERFACE_DEFINED__

/* dispinterface ksDoubleValue */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDoubleValue,0x7F7D6F9C,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6F9C-97DA-11D6-8732-00C0262CDD2C")
    ksDoubleValue : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDoubleValueVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDoubleValue * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDoubleValue * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDoubleValue * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDoubleValue * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDoubleValue * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDoubleValue * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDoubleValue * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDoubleValueVtbl;

    interface ksDoubleValue
    {
        CONST_VTBL struct ksDoubleValueVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDoubleValue_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDoubleValue_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDoubleValue_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDoubleValue_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDoubleValue_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDoubleValue_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDoubleValue_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDoubleValue_DISPINTERFACE_DEFINED__ */


#ifndef __ksNurbsParam_DISPINTERFACE_DEFINED__
#define __ksNurbsParam_DISPINTERFACE_DEFINED__

/* dispinterface ksNurbsParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksNurbsParam,0x7F7D6F9F,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6F9F-97DA-11D6-8732-00C0262CDD2C")
    ksNurbsParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksNurbsParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksNurbsParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksNurbsParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksNurbsParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksNurbsParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksNurbsParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksNurbsParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksNurbsParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksNurbsParamVtbl;

    interface ksNurbsParam
    {
        CONST_VTBL struct ksNurbsParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksNurbsParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksNurbsParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksNurbsParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksNurbsParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksNurbsParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksNurbsParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksNurbsParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksNurbsParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksConicArcParam_DISPINTERFACE_DEFINED__
#define __ksConicArcParam_DISPINTERFACE_DEFINED__

/* dispinterface ksConicArcParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksConicArcParam,0x7F7D6FA2,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FA2-97DA-11D6-8732-00C0262CDD2C")
    ksConicArcParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksConicArcParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksConicArcParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksConicArcParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksConicArcParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksConicArcParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksConicArcParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksConicArcParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksConicArcParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksConicArcParamVtbl;

    interface ksConicArcParam
    {
        CONST_VTBL struct ksConicArcParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksConicArcParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksConicArcParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksConicArcParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksConicArcParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksConicArcParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksConicArcParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksConicArcParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksConicArcParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksCentreParam_DISPINTERFACE_DEFINED__
#define __ksCentreParam_DISPINTERFACE_DEFINED__

/* dispinterface ksCentreParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCentreParam,0x7F7D6FA5,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FA5-97DA-11D6-8732-00C0262CDD2C")
    ksCentreParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCentreParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCentreParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCentreParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCentreParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCentreParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCentreParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCentreParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCentreParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCentreParamVtbl;

    interface ksCentreParam
    {
        CONST_VTBL struct ksCentreParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCentreParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCentreParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCentreParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCentreParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCentreParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCentreParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCentreParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCentreParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksPlacementParam_DISPINTERFACE_DEFINED__
#define __ksPlacementParam_DISPINTERFACE_DEFINED__

/* dispinterface ksPlacementParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPlacementParam,0x7F7D6FA8,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FA8-97DA-11D6-8732-00C0262CDD2C")
    ksPlacementParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPlacementParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPlacementParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPlacementParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPlacementParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPlacementParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPlacementParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPlacementParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPlacementParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPlacementParamVtbl;

    interface ksPlacementParam
    {
        CONST_VTBL struct ksPlacementParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPlacementParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPlacementParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPlacementParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPlacementParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPlacementParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPlacementParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPlacementParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPlacementParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksRasterParam_DISPINTERFACE_DEFINED__
#define __ksRasterParam_DISPINTERFACE_DEFINED__

/* dispinterface ksRasterParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRasterParam,0x7F7D6FAB,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FAB-97DA-11D6-8732-00C0262CDD2C")
    ksRasterParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRasterParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRasterParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRasterParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRasterParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRasterParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRasterParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRasterParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRasterParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRasterParamVtbl;

    interface ksRasterParam
    {
        CONST_VTBL struct ksRasterParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRasterParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRasterParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRasterParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRasterParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRasterParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRasterParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRasterParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRasterParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksPolylineParam_DISPINTERFACE_DEFINED__
#define __ksPolylineParam_DISPINTERFACE_DEFINED__

/* dispinterface ksPolylineParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPolylineParam,0x7F7D6FAE,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FAE-97DA-11D6-8732-00C0262CDD2C")
    ksPolylineParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPolylineParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPolylineParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPolylineParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPolylineParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPolylineParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPolylineParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPolylineParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPolylineParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPolylineParamVtbl;

    interface ksPolylineParam
    {
        CONST_VTBL struct ksPolylineParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPolylineParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPolylineParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPolylineParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPolylineParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPolylineParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPolylineParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPolylineParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPolylineParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksInsertFragmentParam_DISPINTERFACE_DEFINED__
#define __ksInsertFragmentParam_DISPINTERFACE_DEFINED__

/* dispinterface ksInsertFragmentParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksInsertFragmentParam,0x7F7D6FB1,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FB1-97DA-11D6-8732-00C0262CDD2C")
    ksInsertFragmentParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksInsertFragmentParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksInsertFragmentParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksInsertFragmentParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksInsertFragmentParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksInsertFragmentParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksInsertFragmentParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksInsertFragmentParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksInsertFragmentParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksInsertFragmentParamVtbl;

    interface ksInsertFragmentParam
    {
        CONST_VTBL struct ksInsertFragmentParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksInsertFragmentParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksInsertFragmentParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksInsertFragmentParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksInsertFragmentParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksInsertFragmentParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksInsertFragmentParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksInsertFragmentParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksInsertFragmentParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksViewParam_DISPINTERFACE_DEFINED__
#define __ksViewParam_DISPINTERFACE_DEFINED__

/* dispinterface ksViewParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksViewParam,0x7F7D6FB4,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FB4-97DA-11D6-8732-00C0262CDD2C")
    ksViewParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksViewParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksViewParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksViewParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksViewParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksViewParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksViewParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksViewParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksViewParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksViewParamVtbl;

    interface ksViewParam
    {
        CONST_VTBL struct ksViewParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksViewParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksViewParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksViewParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksViewParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksViewParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksViewParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksViewParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksViewParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksLBreakDimSource_DISPINTERFACE_DEFINED__
#define __ksLBreakDimSource_DISPINTERFACE_DEFINED__

/* dispinterface ksLBreakDimSource */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLBreakDimSource,0x7F7D6FB7,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FB7-97DA-11D6-8732-00C0262CDD2C")
    ksLBreakDimSource : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLBreakDimSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLBreakDimSource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLBreakDimSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLBreakDimSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLBreakDimSource * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLBreakDimSource * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLBreakDimSource * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLBreakDimSource * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLBreakDimSourceVtbl;

    interface ksLBreakDimSource
    {
        CONST_VTBL struct ksLBreakDimSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLBreakDimSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLBreakDimSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLBreakDimSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLBreakDimSource_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLBreakDimSource_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLBreakDimSource_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLBreakDimSource_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLBreakDimSource_DISPINTERFACE_DEFINED__ */


#ifndef __ksBreakDimDrawing_DISPINTERFACE_DEFINED__
#define __ksBreakDimDrawing_DISPINTERFACE_DEFINED__

/* dispinterface ksBreakDimDrawing */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBreakDimDrawing,0x7F7D6FBA,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FBA-97DA-11D6-8732-00C0262CDD2C")
    ksBreakDimDrawing : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBreakDimDrawingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBreakDimDrawing * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBreakDimDrawing * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBreakDimDrawing * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBreakDimDrawing * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBreakDimDrawing * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBreakDimDrawing * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBreakDimDrawing * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBreakDimDrawingVtbl;

    interface ksBreakDimDrawing
    {
        CONST_VTBL struct ksBreakDimDrawingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBreakDimDrawing_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBreakDimDrawing_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBreakDimDrawing_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBreakDimDrawing_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBreakDimDrawing_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBreakDimDrawing_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBreakDimDrawing_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBreakDimDrawing_DISPINTERFACE_DEFINED__ */


#ifndef __ksLBreakDimParam_DISPINTERFACE_DEFINED__
#define __ksLBreakDimParam_DISPINTERFACE_DEFINED__

/* dispinterface ksLBreakDimParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLBreakDimParam,0x7F7D6FBD,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FBD-97DA-11D6-8732-00C0262CDD2C")
    ksLBreakDimParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLBreakDimParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLBreakDimParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLBreakDimParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLBreakDimParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLBreakDimParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLBreakDimParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLBreakDimParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLBreakDimParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLBreakDimParamVtbl;

    interface ksLBreakDimParam
    {
        CONST_VTBL struct ksLBreakDimParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLBreakDimParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLBreakDimParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLBreakDimParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLBreakDimParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLBreakDimParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLBreakDimParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLBreakDimParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLBreakDimParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksABreakDimParam_DISPINTERFACE_DEFINED__
#define __ksABreakDimParam_DISPINTERFACE_DEFINED__

/* dispinterface ksABreakDimParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksABreakDimParam,0x7F7D6FC0,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FC0-97DA-11D6-8732-00C0262CDD2C")
    ksABreakDimParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksABreakDimParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksABreakDimParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksABreakDimParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksABreakDimParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksABreakDimParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksABreakDimParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksABreakDimParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksABreakDimParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksABreakDimParamVtbl;

    interface ksABreakDimParam
    {
        CONST_VTBL struct ksABreakDimParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksABreakDimParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksABreakDimParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksABreakDimParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksABreakDimParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksABreakDimParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksABreakDimParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksABreakDimParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksABreakDimParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksInsertFragmentParamEx_DISPINTERFACE_DEFINED__
#define __ksInsertFragmentParamEx_DISPINTERFACE_DEFINED__

/* dispinterface ksInsertFragmentParamEx */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksInsertFragmentParamEx,0x7F7D6FC3,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FC3-97DA-11D6-8732-00C0262CDD2C")
    ksInsertFragmentParamEx : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksInsertFragmentParamExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksInsertFragmentParamEx * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksInsertFragmentParamEx * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksInsertFragmentParamEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksInsertFragmentParamEx * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksInsertFragmentParamEx * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksInsertFragmentParamEx * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksInsertFragmentParamEx * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksInsertFragmentParamExVtbl;

    interface ksInsertFragmentParamEx
    {
        CONST_VTBL struct ksInsertFragmentParamExVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksInsertFragmentParamEx_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksInsertFragmentParamEx_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksInsertFragmentParamEx_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksInsertFragmentParamEx_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksInsertFragmentParamEx_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksInsertFragmentParamEx_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksInsertFragmentParamEx_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksInsertFragmentParamEx_DISPINTERFACE_DEFINED__ */


#ifndef __ksBezierParam_DISPINTERFACE_DEFINED__
#define __ksBezierParam_DISPINTERFACE_DEFINED__

/* dispinterface ksBezierParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBezierParam,0x7F7D6FC6,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FC6-97DA-11D6-8732-00C0262CDD2C")
    ksBezierParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBezierParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBezierParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBezierParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBezierParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBezierParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBezierParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBezierParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBezierParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBezierParamVtbl;

    interface ksBezierParam
    {
        CONST_VTBL struct ksBezierParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBezierParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBezierParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBezierParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBezierParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBezierParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBezierParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBezierParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBezierParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksBezierPointParam_DISPINTERFACE_DEFINED__
#define __ksBezierPointParam_DISPINTERFACE_DEFINED__

/* dispinterface ksBezierPointParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBezierPointParam,0x7F7D6FC9,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FC9-97DA-11D6-8732-00C0262CDD2C")
    ksBezierPointParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBezierPointParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBezierPointParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBezierPointParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBezierPointParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBezierPointParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBezierPointParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBezierPointParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBezierPointParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBezierPointParamVtbl;

    interface ksBezierPointParam
    {
        CONST_VTBL struct ksBezierPointParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBezierPointParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBezierPointParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBezierPointParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBezierPointParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBezierPointParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBezierPointParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBezierPointParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBezierPointParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksDimTextParam_DISPINTERFACE_DEFINED__
#define __ksDimTextParam_DISPINTERFACE_DEFINED__

/* dispinterface ksDimTextParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDimTextParam,0x7F7D6FCC,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FCC-97DA-11D6-8732-00C0262CDD2C")
    ksDimTextParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDimTextParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDimTextParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDimTextParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDimTextParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDimTextParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDimTextParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDimTextParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDimTextParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDimTextParamVtbl;

    interface ksDimTextParam
    {
        CONST_VTBL struct ksDimTextParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDimTextParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDimTextParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDimTextParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDimTextParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDimTextParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDimTextParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDimTextParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDimTextParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksLDimSourceParam_DISPINTERFACE_DEFINED__
#define __ksLDimSourceParam_DISPINTERFACE_DEFINED__

/* dispinterface ksLDimSourceParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLDimSourceParam,0x7F7D6FCF,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FCF-97DA-11D6-8732-00C0262CDD2C")
    ksLDimSourceParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLDimSourceParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLDimSourceParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLDimSourceParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLDimSourceParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLDimSourceParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLDimSourceParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLDimSourceParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLDimSourceParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLDimSourceParamVtbl;

    interface ksLDimSourceParam
    {
        CONST_VTBL struct ksLDimSourceParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLDimSourceParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLDimSourceParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLDimSourceParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLDimSourceParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLDimSourceParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLDimSourceParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLDimSourceParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLDimSourceParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksDimDrawingParam_DISPINTERFACE_DEFINED__
#define __ksDimDrawingParam_DISPINTERFACE_DEFINED__

/* dispinterface ksDimDrawingParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDimDrawingParam,0x7F7D6FD2,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FD2-97DA-11D6-8732-00C0262CDD2C")
    ksDimDrawingParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDimDrawingParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDimDrawingParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDimDrawingParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDimDrawingParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDimDrawingParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDimDrawingParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDimDrawingParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDimDrawingParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDimDrawingParamVtbl;

    interface ksDimDrawingParam
    {
        CONST_VTBL struct ksDimDrawingParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDimDrawingParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDimDrawingParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDimDrawingParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDimDrawingParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDimDrawingParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDimDrawingParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDimDrawingParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDimDrawingParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksLDimParam_DISPINTERFACE_DEFINED__
#define __ksLDimParam_DISPINTERFACE_DEFINED__

/* dispinterface ksLDimParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLDimParam,0x7F7D6FD5,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FD5-97DA-11D6-8732-00C0262CDD2C")
    ksLDimParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLDimParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLDimParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLDimParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLDimParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLDimParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLDimParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLDimParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLDimParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLDimParamVtbl;

    interface ksLDimParam
    {
        CONST_VTBL struct ksLDimParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLDimParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLDimParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLDimParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLDimParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLDimParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLDimParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLDimParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLDimParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksADimSourceParam_DISPINTERFACE_DEFINED__
#define __ksADimSourceParam_DISPINTERFACE_DEFINED__

/* dispinterface ksADimSourceParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksADimSourceParam,0x7F7D6FD8,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FD8-97DA-11D6-8732-00C0262CDD2C")
    ksADimSourceParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksADimSourceParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksADimSourceParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksADimSourceParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksADimSourceParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksADimSourceParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksADimSourceParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksADimSourceParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksADimSourceParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksADimSourceParamVtbl;

    interface ksADimSourceParam
    {
        CONST_VTBL struct ksADimSourceParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksADimSourceParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksADimSourceParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksADimSourceParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksADimSourceParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksADimSourceParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksADimSourceParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksADimSourceParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksADimSourceParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksDimensionPartsParam_DISPINTERFACE_DEFINED__
#define __ksDimensionPartsParam_DISPINTERFACE_DEFINED__

/* dispinterface ksDimensionPartsParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDimensionPartsParam,0x7F7D6FDB,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FDB-97DA-11D6-8732-00C0262CDD2C")
    ksDimensionPartsParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDimensionPartsParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDimensionPartsParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDimensionPartsParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDimensionPartsParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDimensionPartsParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDimensionPartsParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDimensionPartsParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDimensionPartsParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDimensionPartsParamVtbl;

    interface ksDimensionPartsParam
    {
        CONST_VTBL struct ksDimensionPartsParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDimensionPartsParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDimensionPartsParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDimensionPartsParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDimensionPartsParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDimensionPartsParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDimensionPartsParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDimensionPartsParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDimensionPartsParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksADimParam_DISPINTERFACE_DEFINED__
#define __ksADimParam_DISPINTERFACE_DEFINED__

/* dispinterface ksADimParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksADimParam,0x7F7D6FDE,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FDE-97DA-11D6-8732-00C0262CDD2C")
    ksADimParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksADimParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksADimParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksADimParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksADimParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksADimParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksADimParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksADimParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksADimParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksADimParamVtbl;

    interface ksADimParam
    {
        CONST_VTBL struct ksADimParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksADimParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksADimParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksADimParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksADimParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksADimParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksADimParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksADimParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksADimParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksRBreakDrawingParam_DISPINTERFACE_DEFINED__
#define __ksRBreakDrawingParam_DISPINTERFACE_DEFINED__

/* dispinterface ksRBreakDrawingParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRBreakDrawingParam,0x7F7D6FE1,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FE1-97DA-11D6-8732-00C0262CDD2C")
    ksRBreakDrawingParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRBreakDrawingParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRBreakDrawingParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRBreakDrawingParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRBreakDrawingParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRBreakDrawingParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRBreakDrawingParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRBreakDrawingParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRBreakDrawingParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRBreakDrawingParamVtbl;

    interface ksRBreakDrawingParam
    {
        CONST_VTBL struct ksRBreakDrawingParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRBreakDrawingParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRBreakDrawingParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRBreakDrawingParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRBreakDrawingParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRBreakDrawingParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRBreakDrawingParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRBreakDrawingParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRBreakDrawingParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksRBreakDimParam_DISPINTERFACE_DEFINED__
#define __ksRBreakDimParam_DISPINTERFACE_DEFINED__

/* dispinterface ksRBreakDimParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRBreakDimParam,0x7F7D6FE4,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FE4-97DA-11D6-8732-00C0262CDD2C")
    ksRBreakDimParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRBreakDimParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRBreakDimParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRBreakDimParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRBreakDimParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRBreakDimParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRBreakDimParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRBreakDimParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRBreakDimParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRBreakDimParamVtbl;

    interface ksRBreakDimParam
    {
        CONST_VTBL struct ksRBreakDimParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRBreakDimParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRBreakDimParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRBreakDimParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRBreakDimParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRBreakDimParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRBreakDimParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRBreakDimParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRBreakDimParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksQualityItemParam_DISPINTERFACE_DEFINED__
#define __ksQualityItemParam_DISPINTERFACE_DEFINED__

/* dispinterface ksQualityItemParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksQualityItemParam,0x7F7D6FE7,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FE7-97DA-11D6-8732-00C0262CDD2C")
    ksQualityItemParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksQualityItemParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksQualityItemParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksQualityItemParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksQualityItemParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksQualityItemParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksQualityItemParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksQualityItemParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksQualityItemParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksQualityItemParamVtbl;

    interface ksQualityItemParam
    {
        CONST_VTBL struct ksQualityItemParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksQualityItemParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksQualityItemParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksQualityItemParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksQualityItemParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksQualityItemParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksQualityItemParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksQualityItemParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksQualityItemParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksQualityContensParam_DISPINTERFACE_DEFINED__
#define __ksQualityContensParam_DISPINTERFACE_DEFINED__

/* dispinterface ksQualityContensParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksQualityContensParam,0x7F7D6FEA,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7F7D6FEA-97DA-11D6-8732-00C0262CDD2C")
    ksQualityContensParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksQualityContensParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksQualityContensParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksQualityContensParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksQualityContensParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksQualityContensParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksQualityContensParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksQualityContensParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksQualityContensParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksQualityContensParamVtbl;

    interface ksQualityContensParam
    {
        CONST_VTBL struct ksQualityContensParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksQualityContensParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksQualityContensParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksQualityContensParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksQualityContensParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksQualityContensParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksQualityContensParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksQualityContensParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksQualityContensParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksIterator_DISPINTERFACE_DEFINED__
#define __ksIterator_DISPINTERFACE_DEFINED__

/* dispinterface ksIterator */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksIterator,0xD06C9101,0x98CA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("D06C9101-98CA-11D6-8732-00C0262CDD2C")
    ksIterator : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksIteratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksIterator * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksIterator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksIterator * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksIterator * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksIterator * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksIterator * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksIterator * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksIteratorVtbl;

    interface ksIterator
    {
        CONST_VTBL struct ksIteratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksIterator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksIterator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksIterator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksIterator_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksIterator_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksIterator_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksIterator_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksIterator_DISPINTERFACE_DEFINED__ */


#ifndef __ksFragment_DISPINTERFACE_DEFINED__
#define __ksFragment_DISPINTERFACE_DEFINED__

/* dispinterface ksFragment */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksFragment,0xD06C9104,0x98CA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("D06C9104-98CA-11D6-8732-00C0262CDD2C")
    ksFragment : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksFragmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksFragment * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksFragment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksFragment * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksFragment * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksFragment * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksFragment * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksFragment * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksFragmentVtbl;

    interface ksFragment
    {
        CONST_VTBL struct ksFragmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksFragment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksFragment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksFragment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksFragment_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksFragment_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksFragment_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksFragment_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksFragment_DISPINTERFACE_DEFINED__ */


#ifndef __ksFragmentLibrary_DISPINTERFACE_DEFINED__
#define __ksFragmentLibrary_DISPINTERFACE_DEFINED__

/* dispinterface ksFragmentLibrary */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksFragmentLibrary,0xD06C910A,0x98CA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("D06C910A-98CA-11D6-8732-00C0262CDD2C")
    ksFragmentLibrary : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksFragmentLibraryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksFragmentLibrary * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksFragmentLibrary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksFragmentLibrary * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksFragmentLibrary * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksFragmentLibrary * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksFragmentLibrary * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksFragmentLibrary * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksFragmentLibraryVtbl;

    interface ksFragmentLibrary
    {
        CONST_VTBL struct ksFragmentLibraryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksFragmentLibrary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksFragmentLibrary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksFragmentLibrary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksFragmentLibrary_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksFragmentLibrary_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksFragmentLibrary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksFragmentLibrary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksFragmentLibrary_DISPINTERFACE_DEFINED__ */


#ifndef __ksTechnicalDemandParam_DISPINTERFACE_DEFINED__
#define __ksTechnicalDemandParam_DISPINTERFACE_DEFINED__

/* dispinterface ksTechnicalDemandParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksTechnicalDemandParam,0xFBCC5B81,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FBCC5B81-996C-11D6-8732-00C0262CDD2C")
    ksTechnicalDemandParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksTechnicalDemandParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksTechnicalDemandParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksTechnicalDemandParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksTechnicalDemandParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksTechnicalDemandParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksTechnicalDemandParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksTechnicalDemandParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksTechnicalDemandParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksTechnicalDemandParamVtbl;

    interface ksTechnicalDemandParam
    {
        CONST_VTBL struct ksTechnicalDemandParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksTechnicalDemandParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksTechnicalDemandParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksTechnicalDemandParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksTechnicalDemandParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksTechnicalDemandParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksTechnicalDemandParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksTechnicalDemandParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksTechnicalDemandParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksOrdinatedSourceParam_DISPINTERFACE_DEFINED__
#define __ksOrdinatedSourceParam_DISPINTERFACE_DEFINED__

/* dispinterface ksOrdinatedSourceParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksOrdinatedSourceParam,0xFBCC5B84,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FBCC5B84-996C-11D6-8732-00C0262CDD2C")
    ksOrdinatedSourceParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksOrdinatedSourceParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksOrdinatedSourceParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksOrdinatedSourceParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksOrdinatedSourceParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksOrdinatedSourceParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksOrdinatedSourceParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksOrdinatedSourceParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksOrdinatedSourceParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksOrdinatedSourceParamVtbl;

    interface ksOrdinatedSourceParam
    {
        CONST_VTBL struct ksOrdinatedSourceParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksOrdinatedSourceParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksOrdinatedSourceParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksOrdinatedSourceParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksOrdinatedSourceParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksOrdinatedSourceParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksOrdinatedSourceParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksOrdinatedSourceParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksOrdinatedSourceParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksOrdinatedDimParam_DISPINTERFACE_DEFINED__
#define __ksOrdinatedDimParam_DISPINTERFACE_DEFINED__

/* dispinterface ksOrdinatedDimParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksOrdinatedDimParam,0xFBCC5B87,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FBCC5B87-996C-11D6-8732-00C0262CDD2C")
    ksOrdinatedDimParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksOrdinatedDimParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksOrdinatedDimParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksOrdinatedDimParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksOrdinatedDimParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksOrdinatedDimParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksOrdinatedDimParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksOrdinatedDimParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksOrdinatedDimParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksOrdinatedDimParamVtbl;

    interface ksOrdinatedDimParam
    {
        CONST_VTBL struct ksOrdinatedDimParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksOrdinatedDimParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksOrdinatedDimParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksOrdinatedDimParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksOrdinatedDimParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksOrdinatedDimParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksOrdinatedDimParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksOrdinatedDimParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksOrdinatedDimParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksOrdinatedDrawingParam_DISPINTERFACE_DEFINED__
#define __ksOrdinatedDrawingParam_DISPINTERFACE_DEFINED__

/* dispinterface ksOrdinatedDrawingParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksOrdinatedDrawingParam,0xFBCC5B8A,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FBCC5B8A-996C-11D6-8732-00C0262CDD2C")
    ksOrdinatedDrawingParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksOrdinatedDrawingParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksOrdinatedDrawingParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksOrdinatedDrawingParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksOrdinatedDrawingParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksOrdinatedDrawingParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksOrdinatedDrawingParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksOrdinatedDrawingParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksOrdinatedDrawingParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksOrdinatedDrawingParamVtbl;

    interface ksOrdinatedDrawingParam
    {
        CONST_VTBL struct ksOrdinatedDrawingParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksOrdinatedDrawingParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksOrdinatedDrawingParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksOrdinatedDrawingParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksOrdinatedDrawingParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksOrdinatedDrawingParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksOrdinatedDrawingParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksOrdinatedDrawingParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksOrdinatedDrawingParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksSheetSize_DISPINTERFACE_DEFINED__
#define __ksSheetSize_DISPINTERFACE_DEFINED__

/* dispinterface ksSheetSize */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSheetSize,0xFBCC5B8D,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FBCC5B8D-996C-11D6-8732-00C0262CDD2C")
    ksSheetSize : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSheetSizeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSheetSize * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSheetSize * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSheetSize * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSheetSize * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSheetSize * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSheetSize * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSheetSize * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSheetSizeVtbl;

    interface ksSheetSize
    {
        CONST_VTBL struct ksSheetSizeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSheetSize_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSheetSize_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSheetSize_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSheetSize_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSheetSize_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSheetSize_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSheetSize_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSheetSize_DISPINTERFACE_DEFINED__ */


#ifndef __ksStandartSheet_DISPINTERFACE_DEFINED__
#define __ksStandartSheet_DISPINTERFACE_DEFINED__

/* dispinterface ksStandartSheet */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksStandartSheet,0xFBCC5B90,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FBCC5B90-996C-11D6-8732-00C0262CDD2C")
    ksStandartSheet : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksStandartSheetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksStandartSheet * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksStandartSheet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksStandartSheet * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksStandartSheet * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksStandartSheet * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksStandartSheet * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksStandartSheet * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksStandartSheetVtbl;

    interface ksStandartSheet
    {
        CONST_VTBL struct ksStandartSheetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksStandartSheet_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksStandartSheet_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksStandartSheet_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksStandartSheet_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksStandartSheet_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksStandartSheet_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksStandartSheet_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksStandartSheet_DISPINTERFACE_DEFINED__ */


#ifndef __ksSheetPar_DISPINTERFACE_DEFINED__
#define __ksSheetPar_DISPINTERFACE_DEFINED__

/* dispinterface ksSheetPar */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSheetPar,0xFBCC5B93,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FBCC5B93-996C-11D6-8732-00C0262CDD2C")
    ksSheetPar : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSheetParVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSheetPar * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSheetPar * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSheetPar * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSheetPar * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSheetPar * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSheetPar * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSheetPar * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSheetParVtbl;

    interface ksSheetPar
    {
        CONST_VTBL struct ksSheetParVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSheetPar_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSheetPar_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSheetPar_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSheetPar_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSheetPar_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSheetPar_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSheetPar_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSheetPar_DISPINTERFACE_DEFINED__ */


#ifndef __ksDocumentParam_DISPINTERFACE_DEFINED__
#define __ksDocumentParam_DISPINTERFACE_DEFINED__

/* dispinterface ksDocumentParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDocumentParam,0xFBCC5B96,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FBCC5B96-996C-11D6-8732-00C0262CDD2C")
    ksDocumentParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDocumentParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDocumentParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDocumentParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDocumentParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDocumentParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDocumentParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDocumentParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDocumentParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDocumentParamVtbl;

    interface ksDocumentParam
    {
        CONST_VTBL struct ksDocumentParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDocumentParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDocumentParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDocumentParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDocumentParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDocumentParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDocumentParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDocumentParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDocumentParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksDimensionsOptions_DISPINTERFACE_DEFINED__
#define __ksDimensionsOptions_DISPINTERFACE_DEFINED__

/* dispinterface ksDimensionsOptions */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDimensionsOptions,0xFBCC5B99,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FBCC5B99-996C-11D6-8732-00C0262CDD2C")
    ksDimensionsOptions : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDimensionsOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDimensionsOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDimensionsOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDimensionsOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDimensionsOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDimensionsOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDimensionsOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDimensionsOptions * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDimensionsOptionsVtbl;

    interface ksDimensionsOptions
    {
        CONST_VTBL struct ksDimensionsOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDimensionsOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDimensionsOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDimensionsOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDimensionsOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDimensionsOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDimensionsOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDimensionsOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDimensionsOptions_DISPINTERFACE_DEFINED__ */


#ifndef __ksSnapOptions_DISPINTERFACE_DEFINED__
#define __ksSnapOptions_DISPINTERFACE_DEFINED__

/* dispinterface ksSnapOptions */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSnapOptions,0xFBCC5B9C,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FBCC5B9C-996C-11D6-8732-00C0262CDD2C")
    ksSnapOptions : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSnapOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSnapOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSnapOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSnapOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSnapOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSnapOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSnapOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSnapOptions * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSnapOptionsVtbl;

    interface ksSnapOptions
    {
        CONST_VTBL struct ksSnapOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSnapOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSnapOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSnapOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSnapOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSnapOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSnapOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSnapOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSnapOptions_DISPINTERFACE_DEFINED__ */


#ifndef __ksLibraryStyleParam_DISPINTERFACE_DEFINED__
#define __ksLibraryStyleParam_DISPINTERFACE_DEFINED__

/* dispinterface ksLibraryStyleParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLibraryStyleParam,0xFBCC5B9F,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FBCC5B9F-996C-11D6-8732-00C0262CDD2C")
    ksLibraryStyleParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLibraryStyleParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLibraryStyleParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLibraryStyleParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLibraryStyleParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLibraryStyleParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLibraryStyleParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLibraryStyleParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLibraryStyleParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLibraryStyleParamVtbl;

    interface ksLibraryStyleParam
    {
        CONST_VTBL struct ksLibraryStyleParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLibraryStyleParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLibraryStyleParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLibraryStyleParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLibraryStyleParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLibraryStyleParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLibraryStyleParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLibraryStyleParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLibraryStyleParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksStampNotify_DISPINTERFACE_DEFINED__
#define __ksStampNotify_DISPINTERFACE_DEFINED__

/* dispinterface ksStampNotify */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksStampNotify,0x404E7D5A,0xA13F,0x4cff,0x82,0x14,0xFE,0xA7,0x01,0x21,0x10,0xCB);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("404E7D5A-A13F-4cff-8214-FEA7012110CB")
    ksStampNotify : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksStampNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksStampNotify * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksStampNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksStampNotify * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksStampNotify * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksStampNotify * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksStampNotify * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksStampNotify * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksStampNotifyVtbl;

    interface ksStampNotify
    {
        CONST_VTBL struct ksStampNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksStampNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksStampNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksStampNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksStampNotify_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksStampNotify_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksStampNotify_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksStampNotify_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksStampNotify_DISPINTERFACE_DEFINED__ */


#ifndef __ksStamp_DISPINTERFACE_DEFINED__
#define __ksStamp_DISPINTERFACE_DEFINED__

/* dispinterface ksStamp */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksStamp,0xFBCC5BA5,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FBCC5BA5-996C-11D6-8732-00C0262CDD2C")
    ksStamp : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksStampVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksStamp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksStamp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksStamp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksStamp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksStamp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksStamp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksStamp * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksStampVtbl;

    interface ksStamp
    {
        CONST_VTBL struct ksStampVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksStamp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksStamp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksStamp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksStamp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksStamp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksStamp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksStamp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksStamp_DISPINTERFACE_DEFINED__ */


#ifndef __ksSheetOptions_DISPINTERFACE_DEFINED__
#define __ksSheetOptions_DISPINTERFACE_DEFINED__

/* dispinterface ksSheetOptions */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSheetOptions,0xFBCC5BA8,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FBCC5BA8-996C-11D6-8732-00C0262CDD2C")
    ksSheetOptions : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSheetOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSheetOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSheetOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSheetOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSheetOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSheetOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSheetOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSheetOptions * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSheetOptionsVtbl;

    interface ksSheetOptions
    {
        CONST_VTBL struct ksSheetOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSheetOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSheetOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSheetOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSheetOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSheetOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSheetOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSheetOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSheetOptions_DISPINTERFACE_DEFINED__ */


#ifndef __ksCurvePatternEx_DISPINTERFACE_DEFINED__
#define __ksCurvePatternEx_DISPINTERFACE_DEFINED__

/* dispinterface ksCurvePatternEx */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCurvePatternEx,0x910EC549,0x958D,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("910EC549-958D-11D6-95CE-00C0262D30E3")
    ksCurvePatternEx : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCurvePatternExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCurvePatternEx * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCurvePatternEx * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCurvePatternEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCurvePatternEx * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCurvePatternEx * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCurvePatternEx * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCurvePatternEx * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCurvePatternExVtbl;

    interface ksCurvePatternEx
    {
        CONST_VTBL struct ksCurvePatternExVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCurvePatternEx_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCurvePatternEx_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCurvePatternEx_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCurvePatternEx_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCurvePatternEx_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCurvePatternEx_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCurvePatternEx_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCurvePatternEx_DISPINTERFACE_DEFINED__ */


#ifndef __ksCurveStyleParam_DISPINTERFACE_DEFINED__
#define __ksCurveStyleParam_DISPINTERFACE_DEFINED__

/* dispinterface ksCurveStyleParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCurveStyleParam,0x910EC54C,0x958D,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("910EC54C-958D-11D6-95CE-00C0262D30E3")
    ksCurveStyleParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCurveStyleParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCurveStyleParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCurveStyleParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCurveStyleParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCurveStyleParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCurveStyleParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCurveStyleParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCurveStyleParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCurveStyleParamVtbl;

    interface ksCurveStyleParam
    {
        CONST_VTBL struct ksCurveStyleParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCurveStyleParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCurveStyleParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCurveStyleParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCurveStyleParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCurveStyleParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCurveStyleParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCurveStyleParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCurveStyleParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksTextStyleParam_DISPINTERFACE_DEFINED__
#define __ksTextStyleParam_DISPINTERFACE_DEFINED__

/* dispinterface ksTextStyleParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksTextStyleParam,0x3F715E24,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3F715E24-97D9-11D6-95CE-00C0262D30E3")
    ksTextStyleParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksTextStyleParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksTextStyleParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksTextStyleParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksTextStyleParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksTextStyleParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksTextStyleParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksTextStyleParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksTextStyleParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksTextStyleParamVtbl;

    interface ksTextStyleParam
    {
        CONST_VTBL struct ksTextStyleParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksTextStyleParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksTextStyleParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksTextStyleParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksTextStyleParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksTextStyleParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksTextStyleParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksTextStyleParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksTextStyleParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksHatchLineParam_DISPINTERFACE_DEFINED__
#define __ksHatchLineParam_DISPINTERFACE_DEFINED__

/* dispinterface ksHatchLineParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksHatchLineParam,0x3F715E27,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3F715E27-97D9-11D6-95CE-00C0262D30E3")
    ksHatchLineParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksHatchLineParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksHatchLineParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksHatchLineParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksHatchLineParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksHatchLineParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksHatchLineParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksHatchLineParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksHatchLineParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksHatchLineParamVtbl;

    interface ksHatchLineParam
    {
        CONST_VTBL struct ksHatchLineParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksHatchLineParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksHatchLineParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksHatchLineParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksHatchLineParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksHatchLineParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksHatchLineParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksHatchLineParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksHatchLineParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksHatchStyleParam_DISPINTERFACE_DEFINED__
#define __ksHatchStyleParam_DISPINTERFACE_DEFINED__

/* dispinterface ksHatchStyleParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksHatchStyleParam,0x3F715E2A,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3F715E2A-97D9-11D6-95CE-00C0262D30E3")
    ksHatchStyleParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksHatchStyleParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksHatchStyleParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksHatchStyleParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksHatchStyleParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksHatchStyleParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksHatchStyleParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksHatchStyleParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksHatchStyleParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksHatchStyleParamVtbl;

    interface ksHatchStyleParam
    {
        CONST_VTBL struct ksHatchStyleParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksHatchStyleParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksHatchStyleParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksHatchStyleParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksHatchStyleParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksHatchStyleParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksHatchStyleParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksHatchStyleParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksHatchStyleParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksRectParam_DISPINTERFACE_DEFINED__
#define __ksRectParam_DISPINTERFACE_DEFINED__

/* dispinterface ksRectParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRectParam,0x3F715E2D,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3F715E2D-97D9-11D6-95CE-00C0262D30E3")
    ksRectParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRectParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRectParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRectParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRectParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRectParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRectParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRectParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRectParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRectParamVtbl;

    interface ksRectParam
    {
        CONST_VTBL struct ksRectParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRectParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRectParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRectParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRectParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRectParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRectParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRectParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRectParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksShelfPar_DISPINTERFACE_DEFINED__
#define __ksShelfPar_DISPINTERFACE_DEFINED__

/* dispinterface ksShelfPar */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksShelfPar,0x3F715E30,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3F715E30-97D9-11D6-95CE-00C0262D30E3")
    ksShelfPar : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksShelfParVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksShelfPar * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksShelfPar * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksShelfPar * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksShelfPar * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksShelfPar * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksShelfPar * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksShelfPar * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksShelfParVtbl;

    interface ksShelfPar
    {
        CONST_VTBL struct ksShelfParVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksShelfPar_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksShelfPar_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksShelfPar_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksShelfPar_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksShelfPar_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksShelfPar_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksShelfPar_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksShelfPar_DISPINTERFACE_DEFINED__ */


#ifndef __ksRoughPar_DISPINTERFACE_DEFINED__
#define __ksRoughPar_DISPINTERFACE_DEFINED__

/* dispinterface ksRoughPar */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRoughPar,0x3F715E33,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3F715E33-97D9-11D6-95CE-00C0262D30E3")
    ksRoughPar : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRoughParVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRoughPar * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRoughPar * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRoughPar * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRoughPar * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRoughPar * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRoughPar * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRoughPar * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRoughParVtbl;

    interface ksRoughPar
    {
        CONST_VTBL struct ksRoughParVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRoughPar_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRoughPar_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRoughPar_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRoughPar_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRoughPar_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRoughPar_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRoughPar_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRoughPar_DISPINTERFACE_DEFINED__ */


#ifndef __ksRoughParam_DISPINTERFACE_DEFINED__
#define __ksRoughParam_DISPINTERFACE_DEFINED__

/* dispinterface ksRoughParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRoughParam,0x3F715E36,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3F715E36-97D9-11D6-95CE-00C0262D30E3")
    ksRoughParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRoughParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRoughParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRoughParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRoughParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRoughParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRoughParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRoughParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRoughParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRoughParamVtbl;

    interface ksRoughParam
    {
        CONST_VTBL struct ksRoughParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRoughParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRoughParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRoughParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRoughParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRoughParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRoughParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRoughParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRoughParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksChar255_DISPINTERFACE_DEFINED__
#define __ksChar255_DISPINTERFACE_DEFINED__

/* dispinterface ksChar255 */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksChar255,0x3F715E39,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3F715E39-97D9-11D6-95CE-00C0262D30E3")
    ksChar255 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksChar255Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksChar255 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksChar255 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksChar255 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksChar255 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksChar255 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksChar255 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksChar255 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksChar255Vtbl;

    interface ksChar255
    {
        CONST_VTBL struct ksChar255Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksChar255_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksChar255_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksChar255_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksChar255_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksChar255_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksChar255_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksChar255_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksChar255_DISPINTERFACE_DEFINED__ */


#ifndef __ksLeaderParam_DISPINTERFACE_DEFINED__
#define __ksLeaderParam_DISPINTERFACE_DEFINED__

/* dispinterface ksLeaderParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLeaderParam,0x3F715E40,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3F715E40-97D9-11D6-95CE-00C0262D30E3")
    ksLeaderParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLeaderParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLeaderParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLeaderParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLeaderParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLeaderParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLeaderParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLeaderParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLeaderParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLeaderParamVtbl;

    interface ksLeaderParam
    {
        CONST_VTBL struct ksLeaderParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLeaderParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLeaderParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLeaderParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLeaderParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLeaderParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLeaderParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLeaderParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLeaderParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksPosLeaderParam_DISPINTERFACE_DEFINED__
#define __ksPosLeaderParam_DISPINTERFACE_DEFINED__

/* dispinterface ksPosLeaderParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPosLeaderParam,0x3F715E43,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3F715E43-97D9-11D6-95CE-00C0262D30E3")
    ksPosLeaderParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPosLeaderParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPosLeaderParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPosLeaderParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPosLeaderParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPosLeaderParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPosLeaderParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPosLeaderParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPosLeaderParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPosLeaderParamVtbl;

    interface ksPosLeaderParam
    {
        CONST_VTBL struct ksPosLeaderParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPosLeaderParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPosLeaderParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPosLeaderParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPosLeaderParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPosLeaderParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPosLeaderParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPosLeaderParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPosLeaderParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksBrandLeaderParam_DISPINTERFACE_DEFINED__
#define __ksBrandLeaderParam_DISPINTERFACE_DEFINED__

/* dispinterface ksBrandLeaderParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBrandLeaderParam,0x3F715E46,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3F715E46-97D9-11D6-95CE-00C0262D30E3")
    ksBrandLeaderParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBrandLeaderParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBrandLeaderParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBrandLeaderParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBrandLeaderParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBrandLeaderParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBrandLeaderParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBrandLeaderParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBrandLeaderParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBrandLeaderParamVtbl;

    interface ksBrandLeaderParam
    {
        CONST_VTBL struct ksBrandLeaderParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBrandLeaderParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBrandLeaderParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBrandLeaderParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBrandLeaderParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBrandLeaderParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBrandLeaderParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBrandLeaderParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBrandLeaderParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksMarkerLeaderParam_DISPINTERFACE_DEFINED__
#define __ksMarkerLeaderParam_DISPINTERFACE_DEFINED__

/* dispinterface ksMarkerLeaderParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksMarkerLeaderParam,0x9AF8E341,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("9AF8E341-98A0-11D6-95CE-00C0262D30E3")
    ksMarkerLeaderParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksMarkerLeaderParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksMarkerLeaderParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksMarkerLeaderParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksMarkerLeaderParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksMarkerLeaderParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksMarkerLeaderParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksMarkerLeaderParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksMarkerLeaderParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksMarkerLeaderParamVtbl;

    interface ksMarkerLeaderParam
    {
        CONST_VTBL struct ksMarkerLeaderParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksMarkerLeaderParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksMarkerLeaderParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksMarkerLeaderParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksMarkerLeaderParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksMarkerLeaderParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksMarkerLeaderParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksMarkerLeaderParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksMarkerLeaderParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksType1_DISPINTERFACE_DEFINED__
#define __ksType1_DISPINTERFACE_DEFINED__

/* dispinterface ksType1 */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksType1,0x9AF8E344,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("9AF8E344-98A0-11D6-95CE-00C0262D30E3")
    ksType1 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksType1Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksType1 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksType1 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksType1 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksType1 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksType1 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksType1 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksType1 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksType1Vtbl;

    interface ksType1
    {
        CONST_VTBL struct ksType1Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksType1_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksType1_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksType1_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksType1_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksType1_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksType1_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksType1_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksType1_DISPINTERFACE_DEFINED__ */


#ifndef __ksType2_DISPINTERFACE_DEFINED__
#define __ksType2_DISPINTERFACE_DEFINED__

/* dispinterface ksType2 */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksType2,0x9AF8E347,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("9AF8E347-98A0-11D6-95CE-00C0262D30E3")
    ksType2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksType2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksType2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksType2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksType2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksType2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksType2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksType2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksType2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksType2Vtbl;

    interface ksType2
    {
        CONST_VTBL struct ksType2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksType2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksType2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksType2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksType2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksType2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksType2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksType2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksType2_DISPINTERFACE_DEFINED__ */


#ifndef __ksType3_DISPINTERFACE_DEFINED__
#define __ksType3_DISPINTERFACE_DEFINED__

/* dispinterface ksType3 */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksType3,0x9AF8E34A,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("9AF8E34A-98A0-11D6-95CE-00C0262D30E3")
    ksType3 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksType3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksType3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksType3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksType3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksType3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksType3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksType3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksType3 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksType3Vtbl;

    interface ksType3
    {
        CONST_VTBL struct ksType3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksType3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksType3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksType3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksType3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksType3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksType3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksType3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksType3_DISPINTERFACE_DEFINED__ */


#ifndef __ksType5_DISPINTERFACE_DEFINED__
#define __ksType5_DISPINTERFACE_DEFINED__

/* dispinterface ksType5 */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksType5,0x9AF8E34D,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("9AF8E34D-98A0-11D6-95CE-00C0262D30E3")
    ksType5 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksType5Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksType5 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksType5 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksType5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksType5 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksType5 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksType5 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksType5 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksType5Vtbl;

    interface ksType5
    {
        CONST_VTBL struct ksType5Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksType5_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksType5_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksType5_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksType5_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksType5_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksType5_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksType5_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksType5_DISPINTERFACE_DEFINED__ */


#ifndef __ksType6_DISPINTERFACE_DEFINED__
#define __ksType6_DISPINTERFACE_DEFINED__

/* dispinterface ksType6 */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksType6,0x9AF8E350,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("9AF8E350-98A0-11D6-95CE-00C0262D30E3")
    ksType6 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksType6Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksType6 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksType6 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksType6 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksType6 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksType6 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksType6 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksType6 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksType6Vtbl;

    interface ksType6
    {
        CONST_VTBL struct ksType6Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksType6_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksType6_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksType6_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksType6_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksType6_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksType6_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksType6_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksType6_DISPINTERFACE_DEFINED__ */


#ifndef __ksPhantom_DISPINTERFACE_DEFINED__
#define __ksPhantom_DISPINTERFACE_DEFINED__

/* dispinterface ksPhantom */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPhantom,0x9AF8E353,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("9AF8E353-98A0-11D6-95CE-00C0262D30E3")
    ksPhantom : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPhantomVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPhantom * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPhantom * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPhantom * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPhantom * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPhantom * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPhantom * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPhantom * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPhantomVtbl;

    interface ksPhantom
    {
        CONST_VTBL struct ksPhantomVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPhantom_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPhantom_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPhantom_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPhantom_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPhantom_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPhantom_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPhantom_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPhantom_DISPINTERFACE_DEFINED__ */


#ifndef __ksRequestInfo_DISPINTERFACE_DEFINED__
#define __ksRequestInfo_DISPINTERFACE_DEFINED__

/* dispinterface ksRequestInfo */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRequestInfo,0x9AF8E356,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("9AF8E356-98A0-11D6-95CE-00C0262D30E3")
    ksRequestInfo : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRequestInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRequestInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRequestInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRequestInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRequestInfo * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRequestInfo * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRequestInfo * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRequestInfo * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRequestInfoVtbl;

    interface ksRequestInfo
    {
        CONST_VTBL struct ksRequestInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRequestInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRequestInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRequestInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRequestInfo_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRequestInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRequestInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRequestInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRequestInfo_DISPINTERFACE_DEFINED__ */


#ifndef __ksViewPointerParam_DISPINTERFACE_DEFINED__
#define __ksViewPointerParam_DISPINTERFACE_DEFINED__

/* dispinterface ksViewPointerParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksViewPointerParam,0xCD1C0144,0x98DC,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("CD1C0144-98DC-11D6-95CE-00C0262D30E3")
    ksViewPointerParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksViewPointerParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksViewPointerParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksViewPointerParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksViewPointerParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksViewPointerParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksViewPointerParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksViewPointerParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksViewPointerParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksViewPointerParamVtbl;

    interface ksViewPointerParam
    {
        CONST_VTBL struct ksViewPointerParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksViewPointerParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksViewPointerParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksViewPointerParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksViewPointerParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksViewPointerParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksViewPointerParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksViewPointerParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksViewPointerParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksCutLineParam_DISPINTERFACE_DEFINED__
#define __ksCutLineParam_DISPINTERFACE_DEFINED__

/* dispinterface ksCutLineParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCutLineParam,0x4FD7CE81,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CE81-9968-11D6-95CE-00C0262D30E3")
    ksCutLineParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCutLineParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCutLineParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCutLineParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCutLineParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCutLineParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCutLineParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCutLineParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCutLineParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCutLineParamVtbl;

    interface ksCutLineParam
    {
        CONST_VTBL struct ksCutLineParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCutLineParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCutLineParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCutLineParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCutLineParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCutLineParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCutLineParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCutLineParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCutLineParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksToleranceBranch_DISPINTERFACE_DEFINED__
#define __ksToleranceBranch_DISPINTERFACE_DEFINED__

/* dispinterface ksToleranceBranch */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksToleranceBranch,0x4FD7CE84,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CE84-9968-11D6-95CE-00C0262D30E3")
    ksToleranceBranch : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksToleranceBranchVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksToleranceBranch * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksToleranceBranch * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksToleranceBranch * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksToleranceBranch * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksToleranceBranch * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksToleranceBranch * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksToleranceBranch * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksToleranceBranchVtbl;

    interface ksToleranceBranch
    {
        CONST_VTBL struct ksToleranceBranchVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksToleranceBranch_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksToleranceBranch_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksToleranceBranch_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksToleranceBranch_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksToleranceBranch_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksToleranceBranch_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksToleranceBranch_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksToleranceBranch_DISPINTERFACE_DEFINED__ */


#ifndef __ksToleranceParam_DISPINTERFACE_DEFINED__
#define __ksToleranceParam_DISPINTERFACE_DEFINED__

/* dispinterface ksToleranceParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksToleranceParam,0x4FD7CE87,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CE87-9968-11D6-95CE-00C0262D30E3")
    ksToleranceParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksToleranceParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksToleranceParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksToleranceParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksToleranceParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksToleranceParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksToleranceParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksToleranceParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksToleranceParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksToleranceParamVtbl;

    interface ksToleranceParam
    {
        CONST_VTBL struct ksToleranceParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksToleranceParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksToleranceParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksToleranceParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksToleranceParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksToleranceParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksToleranceParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksToleranceParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksToleranceParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksSpcColumnParam_DISPINTERFACE_DEFINED__
#define __ksSpcColumnParam_DISPINTERFACE_DEFINED__

/* dispinterface ksSpcColumnParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSpcColumnParam,0x4FD7CE8A,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CE8A-9968-11D6-95CE-00C0262D30E3")
    ksSpcColumnParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSpcColumnParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSpcColumnParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSpcColumnParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSpcColumnParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSpcColumnParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSpcColumnParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSpcColumnParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSpcColumnParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSpcColumnParamVtbl;

    interface ksSpcColumnParam
    {
        CONST_VTBL struct ksSpcColumnParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSpcColumnParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSpcColumnParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSpcColumnParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSpcColumnParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSpcColumnParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSpcColumnParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSpcColumnParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSpcColumnParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksRecordTypeAttrParam_DISPINTERFACE_DEFINED__
#define __ksRecordTypeAttrParam_DISPINTERFACE_DEFINED__

/* dispinterface ksRecordTypeAttrParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRecordTypeAttrParam,0x4FD7CE8D,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CE8D-9968-11D6-95CE-00C0262D30E3")
    ksRecordTypeAttrParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRecordTypeAttrParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRecordTypeAttrParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRecordTypeAttrParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRecordTypeAttrParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRecordTypeAttrParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRecordTypeAttrParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRecordTypeAttrParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRecordTypeAttrParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRecordTypeAttrParamVtbl;

    interface ksRecordTypeAttrParam
    {
        CONST_VTBL struct ksRecordTypeAttrParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRecordTypeAttrParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRecordTypeAttrParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRecordTypeAttrParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRecordTypeAttrParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRecordTypeAttrParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRecordTypeAttrParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRecordTypeAttrParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRecordTypeAttrParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksNumberTypeAttrParam_DISPINTERFACE_DEFINED__
#define __ksNumberTypeAttrParam_DISPINTERFACE_DEFINED__

/* dispinterface ksNumberTypeAttrParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksNumberTypeAttrParam,0x4FD7CE90,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CE90-9968-11D6-95CE-00C0262D30E3")
    ksNumberTypeAttrParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksNumberTypeAttrParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksNumberTypeAttrParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksNumberTypeAttrParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksNumberTypeAttrParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksNumberTypeAttrParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksNumberTypeAttrParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksNumberTypeAttrParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksNumberTypeAttrParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksNumberTypeAttrParamVtbl;

    interface ksNumberTypeAttrParam
    {
        CONST_VTBL struct ksNumberTypeAttrParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksNumberTypeAttrParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksNumberTypeAttrParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksNumberTypeAttrParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksNumberTypeAttrParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksNumberTypeAttrParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksNumberTypeAttrParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksNumberTypeAttrParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksNumberTypeAttrParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksSpcStyleColumnParam_DISPINTERFACE_DEFINED__
#define __ksSpcStyleColumnParam_DISPINTERFACE_DEFINED__

/* dispinterface ksSpcStyleColumnParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSpcStyleColumnParam,0x4FD7CE93,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CE93-9968-11D6-95CE-00C0262D30E3")
    ksSpcStyleColumnParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSpcStyleColumnParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSpcStyleColumnParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSpcStyleColumnParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSpcStyleColumnParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSpcStyleColumnParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSpcStyleColumnParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSpcStyleColumnParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSpcStyleColumnParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSpcStyleColumnParamVtbl;

    interface ksSpcStyleColumnParam
    {
        CONST_VTBL struct ksSpcStyleColumnParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSpcStyleColumnParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSpcStyleColumnParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSpcStyleColumnParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSpcStyleColumnParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSpcStyleColumnParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSpcStyleColumnParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSpcStyleColumnParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSpcStyleColumnParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksSpcStyleSectionParam_DISPINTERFACE_DEFINED__
#define __ksSpcStyleSectionParam_DISPINTERFACE_DEFINED__

/* dispinterface ksSpcStyleSectionParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSpcStyleSectionParam,0x4FD7CE96,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CE96-9968-11D6-95CE-00C0262D30E3")
    ksSpcStyleSectionParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSpcStyleSectionParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSpcStyleSectionParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSpcStyleSectionParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSpcStyleSectionParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSpcStyleSectionParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSpcStyleSectionParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSpcStyleSectionParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSpcStyleSectionParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSpcStyleSectionParamVtbl;

    interface ksSpcStyleSectionParam
    {
        CONST_VTBL struct ksSpcStyleSectionParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSpcStyleSectionParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSpcStyleSectionParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSpcStyleSectionParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSpcStyleSectionParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSpcStyleSectionParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSpcStyleSectionParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSpcStyleSectionParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSpcStyleSectionParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksSpcSubSectionParam_DISPINTERFACE_DEFINED__
#define __ksSpcSubSectionParam_DISPINTERFACE_DEFINED__

/* dispinterface ksSpcSubSectionParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSpcSubSectionParam,0x4FD7CE99,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CE99-9968-11D6-95CE-00C0262D30E3")
    ksSpcSubSectionParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSpcSubSectionParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSpcSubSectionParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSpcSubSectionParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSpcSubSectionParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSpcSubSectionParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSpcSubSectionParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSpcSubSectionParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSpcSubSectionParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSpcSubSectionParamVtbl;

    interface ksSpcSubSectionParam
    {
        CONST_VTBL struct ksSpcSubSectionParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSpcSubSectionParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSpcSubSectionParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSpcSubSectionParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSpcSubSectionParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSpcSubSectionParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSpcSubSectionParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSpcSubSectionParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSpcSubSectionParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksSpcTuningSectionParam_DISPINTERFACE_DEFINED__
#define __ksSpcTuningSectionParam_DISPINTERFACE_DEFINED__

/* dispinterface ksSpcTuningSectionParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSpcTuningSectionParam,0x4FD7CE9C,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CE9C-9968-11D6-95CE-00C0262D30E3")
    ksSpcTuningSectionParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSpcTuningSectionParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSpcTuningSectionParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSpcTuningSectionParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSpcTuningSectionParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSpcTuningSectionParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSpcTuningSectionParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSpcTuningSectionParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSpcTuningSectionParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSpcTuningSectionParamVtbl;

    interface ksSpcTuningSectionParam
    {
        CONST_VTBL struct ksSpcTuningSectionParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSpcTuningSectionParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSpcTuningSectionParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSpcTuningSectionParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSpcTuningSectionParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSpcTuningSectionParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSpcTuningSectionParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSpcTuningSectionParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSpcTuningSectionParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksSpcTuningStyleParam_DISPINTERFACE_DEFINED__
#define __ksSpcTuningStyleParam_DISPINTERFACE_DEFINED__

/* dispinterface ksSpcTuningStyleParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSpcTuningStyleParam,0x4FD7CE9F,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CE9F-9968-11D6-95CE-00C0262D30E3")
    ksSpcTuningStyleParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSpcTuningStyleParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSpcTuningStyleParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSpcTuningStyleParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSpcTuningStyleParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSpcTuningStyleParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSpcTuningStyleParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSpcTuningStyleParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSpcTuningStyleParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSpcTuningStyleParamVtbl;

    interface ksSpcTuningStyleParam
    {
        CONST_VTBL struct ksSpcTuningStyleParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSpcTuningStyleParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSpcTuningStyleParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSpcTuningStyleParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSpcTuningStyleParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSpcTuningStyleParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSpcTuningStyleParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSpcTuningStyleParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSpcTuningStyleParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksSpcStyleParam_DISPINTERFACE_DEFINED__
#define __ksSpcStyleParam_DISPINTERFACE_DEFINED__

/* dispinterface ksSpcStyleParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSpcStyleParam,0x4FD7CEA2,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CEA2-9968-11D6-95CE-00C0262D30E3")
    ksSpcStyleParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSpcStyleParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSpcStyleParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSpcStyleParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSpcStyleParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSpcStyleParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSpcStyleParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSpcStyleParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSpcStyleParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSpcStyleParamVtbl;

    interface ksSpcStyleParam
    {
        CONST_VTBL struct ksSpcStyleParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSpcStyleParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSpcStyleParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSpcStyleParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSpcStyleParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSpcStyleParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSpcStyleParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSpcStyleParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSpcStyleParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksSpcDescrParam_DISPINTERFACE_DEFINED__
#define __ksSpcDescrParam_DISPINTERFACE_DEFINED__

/* dispinterface ksSpcDescrParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSpcDescrParam,0x4FD7CEA5,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CEA5-9968-11D6-95CE-00C0262D30E3")
    ksSpcDescrParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSpcDescrParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSpcDescrParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSpcDescrParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSpcDescrParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSpcDescrParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSpcDescrParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSpcDescrParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSpcDescrParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSpcDescrParamVtbl;

    interface ksSpcDescrParam
    {
        CONST_VTBL struct ksSpcDescrParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSpcDescrParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSpcDescrParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSpcDescrParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSpcDescrParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSpcDescrParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSpcDescrParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSpcDescrParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSpcDescrParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksDocAttachedSpcParam_DISPINTERFACE_DEFINED__
#define __ksDocAttachedSpcParam_DISPINTERFACE_DEFINED__

/* dispinterface ksDocAttachedSpcParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDocAttachedSpcParam,0x4FD7CEA8,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CEA8-9968-11D6-95CE-00C0262D30E3")
    ksDocAttachedSpcParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDocAttachedSpcParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDocAttachedSpcParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDocAttachedSpcParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDocAttachedSpcParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDocAttachedSpcParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDocAttachedSpcParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDocAttachedSpcParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDocAttachedSpcParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDocAttachedSpcParamVtbl;

    interface ksDocAttachedSpcParam
    {
        CONST_VTBL struct ksDocAttachedSpcParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDocAttachedSpcParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDocAttachedSpcParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDocAttachedSpcParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDocAttachedSpcParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDocAttachedSpcParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDocAttachedSpcParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDocAttachedSpcParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDocAttachedSpcParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksSpcObjParam_DISPINTERFACE_DEFINED__
#define __ksSpcObjParam_DISPINTERFACE_DEFINED__

/* dispinterface ksSpcObjParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSpcObjParam,0x4FD7CEAB,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CEAB-9968-11D6-95CE-00C0262D30E3")
    ksSpcObjParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSpcObjParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSpcObjParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSpcObjParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSpcObjParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSpcObjParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSpcObjParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSpcObjParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSpcObjParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSpcObjParamVtbl;

    interface ksSpcObjParam
    {
        CONST_VTBL struct ksSpcObjParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSpcObjParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSpcObjParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSpcObjParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSpcObjParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSpcObjParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSpcObjParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSpcObjParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSpcObjParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksLibStyle_DISPINTERFACE_DEFINED__
#define __ksLibStyle_DISPINTERFACE_DEFINED__

/* dispinterface ksLibStyle */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLibStyle,0x4FD7CEAE,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4FD7CEAE-9968-11D6-95CE-00C0262D30E3")
    ksLibStyle : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLibStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLibStyle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLibStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLibStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLibStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLibStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLibStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLibStyle * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLibStyleVtbl;

    interface ksLibStyle
    {
        CONST_VTBL struct ksLibStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLibStyle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLibStyle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLibStyle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLibStyle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLibStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLibStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLibStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLibStyle_DISPINTERFACE_DEFINED__ */


#ifndef __ksDataBaseObject_DISPINTERFACE_DEFINED__
#define __ksDataBaseObject_DISPINTERFACE_DEFINED__

/* dispinterface ksDataBaseObject */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDataBaseObject,0x0981CD01,0x9A49,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0981CD01-9A49-11D6-8732-00C0262CDD2C")
    ksDataBaseObject : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDataBaseObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDataBaseObject * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDataBaseObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDataBaseObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDataBaseObject * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDataBaseObject * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDataBaseObject * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDataBaseObject * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDataBaseObjectVtbl;

    interface ksDataBaseObject
    {
        CONST_VTBL struct ksDataBaseObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDataBaseObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDataBaseObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDataBaseObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDataBaseObject_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDataBaseObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDataBaseObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDataBaseObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDataBaseObject_DISPINTERFACE_DEFINED__ */


#ifndef __ksSpcDocumentNotify_DISPINTERFACE_DEFINED__
#define __ksSpcDocumentNotify_DISPINTERFACE_DEFINED__

/* dispinterface ksSpcDocumentNotify */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSpcDocumentNotify,0x1BD030F4,0x4058,0x4a86,0x9F,0x4F,0x1A,0xEE,0xF8,0xBE,0x8D,0x23);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1BD030F4-4058-4a86-9F4F-1AEEF8BE8D23")
    ksSpcDocumentNotify : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSpcDocumentNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSpcDocumentNotify * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSpcDocumentNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSpcDocumentNotify * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSpcDocumentNotify * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSpcDocumentNotify * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSpcDocumentNotify * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSpcDocumentNotify * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSpcDocumentNotifyVtbl;

    interface ksSpcDocumentNotify
    {
        CONST_VTBL struct ksSpcDocumentNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSpcDocumentNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSpcDocumentNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSpcDocumentNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSpcDocumentNotify_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSpcDocumentNotify_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSpcDocumentNotify_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSpcDocumentNotify_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSpcDocumentNotify_DISPINTERFACE_DEFINED__ */


#ifndef __ksSpcDocument_DISPINTERFACE_DEFINED__
#define __ksSpcDocument_DISPINTERFACE_DEFINED__

/* dispinterface ksSpcDocument */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSpcDocument,0x51E74521,0x9A3A,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("51E74521-9A3A-11D6-95CE-00C0262D30E3")
    ksSpcDocument : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSpcDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSpcDocument * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSpcDocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSpcDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSpcDocument * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSpcDocument * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSpcDocument * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSpcDocument * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSpcDocumentVtbl;

    interface ksSpcDocument
    {
        CONST_VTBL struct ksSpcDocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSpcDocument_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSpcDocument_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSpcDocument_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSpcDocument_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSpcDocument_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSpcDocument_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSpcDocument_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSpcDocument_DISPINTERFACE_DEFINED__ */


#ifndef __ksSpcObjectNotify_DISPINTERFACE_DEFINED__
#define __ksSpcObjectNotify_DISPINTERFACE_DEFINED__

/* dispinterface ksSpcObjectNotify */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSpcObjectNotify,0xAC5004D1,0xC240,0x41fc,0xAB,0x84,0x7E,0xB5,0xC7,0x93,0xAE,0x7F);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("AC5004D1-C240-41fc-AB84-7EB5C793AE7F")
    ksSpcObjectNotify : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSpcObjectNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSpcObjectNotify * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSpcObjectNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSpcObjectNotify * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSpcObjectNotify * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSpcObjectNotify * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSpcObjectNotify * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSpcObjectNotify * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSpcObjectNotifyVtbl;

    interface ksSpcObjectNotify
    {
        CONST_VTBL struct ksSpcObjectNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSpcObjectNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSpcObjectNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSpcObjectNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSpcObjectNotify_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSpcObjectNotify_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSpcObjectNotify_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSpcObjectNotify_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSpcObjectNotify_DISPINTERFACE_DEFINED__ */


#ifndef __ksSpecificationNotify_DISPINTERFACE_DEFINED__
#define __ksSpecificationNotify_DISPINTERFACE_DEFINED__

/* dispinterface ksSpecificationNotify */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSpecificationNotify,0x0331AB4B,0xF25B,0x4eb9,0x9C,0x8A,0xBF,0xEA,0x41,0x4E,0x38,0x22);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0331AB4B-F25B-4eb9-9C8A-BFEA414E3822")
    ksSpecificationNotify : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSpecificationNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSpecificationNotify * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSpecificationNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSpecificationNotify * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSpecificationNotify * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSpecificationNotify * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSpecificationNotify * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSpecificationNotify * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSpecificationNotifyVtbl;

    interface ksSpecificationNotify
    {
        CONST_VTBL struct ksSpecificationNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSpecificationNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSpecificationNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSpecificationNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSpecificationNotify_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSpecificationNotify_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSpecificationNotify_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSpecificationNotify_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSpecificationNotify_DISPINTERFACE_DEFINED__ */


#ifndef __ksSpecification_DISPINTERFACE_DEFINED__
#define __ksSpecification_DISPINTERFACE_DEFINED__

/* dispinterface ksSpecification */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSpecification,0x51E74524,0x9A3A,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("51E74524-9A3A-11D6-95CE-00C0262D30E3")
    ksSpecification : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSpecificationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSpecification * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSpecification * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSpecification * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSpecification * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSpecification * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSpecification * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSpecification * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSpecificationVtbl;

    interface ksSpecification
    {
        CONST_VTBL struct ksSpecificationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSpecification_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSpecification_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSpecification_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSpecification_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSpecification_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSpecification_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSpecification_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSpecification_DISPINTERFACE_DEFINED__ */


#ifndef __ksDocumentTxt_DISPINTERFACE_DEFINED__
#define __ksDocumentTxt_DISPINTERFACE_DEFINED__

/* dispinterface ksDocumentTxt */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDocumentTxt,0x74D745F1,0x9A3A,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("74D745F1-9A3A-11D6-95CE-00C0262D30E3")
    ksDocumentTxt : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDocumentTxtVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDocumentTxt * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDocumentTxt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDocumentTxt * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDocumentTxt * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDocumentTxt * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDocumentTxt * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDocumentTxt * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDocumentTxtVtbl;

    interface ksDocumentTxt
    {
        CONST_VTBL struct ksDocumentTxtVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDocumentTxt_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDocumentTxt_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDocumentTxt_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDocumentTxt_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDocumentTxt_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDocumentTxt_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDocumentTxt_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDocumentTxt_DISPINTERFACE_DEFINED__ */


#ifndef __ksAttributeTypeParam_DISPINTERFACE_DEFINED__
#define __ksAttributeTypeParam_DISPINTERFACE_DEFINED__

/* dispinterface ksAttributeTypeParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksAttributeTypeParam,0xCC26DA61,0x9B22,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("CC26DA61-9B22-11D6-95CE-00C0262D30E3")
    ksAttributeTypeParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksAttributeTypeParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksAttributeTypeParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksAttributeTypeParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksAttributeTypeParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksAttributeTypeParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksAttributeTypeParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksAttributeTypeParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksAttributeTypeParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksAttributeTypeParamVtbl;

    interface ksAttributeTypeParam
    {
        CONST_VTBL struct ksAttributeTypeParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksAttributeTypeParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksAttributeTypeParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksAttributeTypeParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksAttributeTypeParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksAttributeTypeParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksAttributeTypeParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksAttributeTypeParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksAttributeTypeParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksColumnInfoParam_DISPINTERFACE_DEFINED__
#define __ksColumnInfoParam_DISPINTERFACE_DEFINED__

/* dispinterface ksColumnInfoParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksColumnInfoParam,0xCE0D05E1,0x9B2A,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("CE0D05E1-9B2A-11D6-95CE-00C0262D30E3")
    ksColumnInfoParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksColumnInfoParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksColumnInfoParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksColumnInfoParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksColumnInfoParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksColumnInfoParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksColumnInfoParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksColumnInfoParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksColumnInfoParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksColumnInfoParamVtbl;

    interface ksColumnInfoParam
    {
        CONST_VTBL struct ksColumnInfoParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksColumnInfoParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksColumnInfoParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksColumnInfoParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksColumnInfoParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksColumnInfoParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksColumnInfoParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksColumnInfoParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksColumnInfoParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksAttributeParam_DISPINTERFACE_DEFINED__
#define __ksAttributeParam_DISPINTERFACE_DEFINED__

/* dispinterface ksAttributeParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksAttributeParam,0xCE0D05E4,0x9B2A,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("CE0D05E4-9B2A-11D6-95CE-00C0262D30E3")
    ksAttributeParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksAttributeParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksAttributeParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksAttributeParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksAttributeParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksAttributeParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksAttributeParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksAttributeParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksAttributeParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksAttributeParamVtbl;

    interface ksAttributeParam
    {
        CONST_VTBL struct ksAttributeParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksAttributeParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksAttributeParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksAttributeParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksAttributeParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksAttributeParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksAttributeParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksAttributeParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksAttributeParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksVariable_DISPINTERFACE_DEFINED__
#define __ksVariable_DISPINTERFACE_DEFINED__

/* dispinterface ksVariable */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksVariable,0x508A0CC1,0x9D74,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("508A0CC1-9D74-11D6-95CE-00C0262D30E3")
    ksVariable : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksVariableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksVariable * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksVariable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksVariable * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksVariable * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksVariable * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksVariable * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksVariable * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksVariableVtbl;

    interface ksVariable
    {
        CONST_VTBL struct ksVariableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksVariable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksVariable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksVariable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksVariable_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksVariable_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksVariable_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksVariable_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksVariable_DISPINTERFACE_DEFINED__ */


#ifndef __ksLibraryAttrTypeParam_DISPINTERFACE_DEFINED__
#define __ksLibraryAttrTypeParam_DISPINTERFACE_DEFINED__

/* dispinterface ksLibraryAttrTypeParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLibraryAttrTypeParam,0xFA93AA21,0x9B3D,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FA93AA21-9B3D-11D6-95CE-00C0262D30E3")
    ksLibraryAttrTypeParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLibraryAttrTypeParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLibraryAttrTypeParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLibraryAttrTypeParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLibraryAttrTypeParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLibraryAttrTypeParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLibraryAttrTypeParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLibraryAttrTypeParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLibraryAttrTypeParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLibraryAttrTypeParamVtbl;

    interface ksLibraryAttrTypeParam
    {
        CONST_VTBL struct ksLibraryAttrTypeParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLibraryAttrTypeParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLibraryAttrTypeParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLibraryAttrTypeParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLibraryAttrTypeParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLibraryAttrTypeParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLibraryAttrTypeParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLibraryAttrTypeParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLibraryAttrTypeParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksAttributeObject_DISPINTERFACE_DEFINED__
#define __ksAttributeObject_DISPINTERFACE_DEFINED__

/* dispinterface ksAttributeObject */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksAttributeObject,0xFA93AA24,0x9B3D,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FA93AA24-9B3D-11D6-95CE-00C0262D30E3")
    ksAttributeObject : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksAttributeObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksAttributeObject * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksAttributeObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksAttributeObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksAttributeObject * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksAttributeObject * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksAttributeObject * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksAttributeObject * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksAttributeObjectVtbl;

    interface ksAttributeObject
    {
        CONST_VTBL struct ksAttributeObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksAttributeObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksAttributeObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksAttributeObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksAttributeObject_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksAttributeObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksAttributeObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksAttributeObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksAttributeObject_DISPINTERFACE_DEFINED__ */


#ifndef __ksRequestInfo3D_DISPINTERFACE_DEFINED__
#define __ksRequestInfo3D_DISPINTERFACE_DEFINED__

/* dispinterface ksRequestInfo3D */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRequestInfo3D,0xE9807824,0x9D55,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E9807824-9D55-11D6-95CE-00C0262D30E3")
    ksRequestInfo3D : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRequestInfo3DVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRequestInfo3D * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRequestInfo3D * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRequestInfo3D * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRequestInfo3D * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRequestInfo3D * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRequestInfo3D * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRequestInfo3D * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRequestInfo3DVtbl;

    interface ksRequestInfo3D
    {
        CONST_VTBL struct ksRequestInfo3DVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRequestInfo3D_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRequestInfo3D_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRequestInfo3D_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRequestInfo3D_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRequestInfo3D_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRequestInfo3D_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRequestInfo3D_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRequestInfo3D_DISPINTERFACE_DEFINED__ */


#ifndef __ksMateConstraint_DISPINTERFACE_DEFINED__
#define __ksMateConstraint_DISPINTERFACE_DEFINED__

/* dispinterface ksMateConstraint */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksMateConstraint,0x508A0CC4,0x9D74,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("508A0CC4-9D74-11D6-95CE-00C0262D30E3")
    ksMateConstraint : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksMateConstraintVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksMateConstraint * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksMateConstraint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksMateConstraint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksMateConstraint * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksMateConstraint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksMateConstraint * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksMateConstraint * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksMateConstraintVtbl;

    interface ksMateConstraint
    {
        CONST_VTBL struct ksMateConstraintVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksMateConstraint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksMateConstraint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksMateConstraint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksMateConstraint_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksMateConstraint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksMateConstraint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksMateConstraint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksMateConstraint_DISPINTERFACE_DEFINED__ */


#ifndef __ksDefaultObject_DISPINTERFACE_DEFINED__
#define __ksDefaultObject_DISPINTERFACE_DEFINED__

/* dispinterface ksDefaultObject */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDefaultObject,0x508A0CC7,0x9D74,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("508A0CC7-9D74-11D6-95CE-00C0262D30E3")
    ksDefaultObject : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDefaultObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDefaultObject * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDefaultObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDefaultObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDefaultObject * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDefaultObject * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDefaultObject * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDefaultObject * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDefaultObjectVtbl;

    interface ksDefaultObject
    {
        CONST_VTBL struct ksDefaultObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDefaultObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDefaultObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDefaultObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDefaultObject_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDefaultObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDefaultObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDefaultObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDefaultObject_DISPINTERFACE_DEFINED__ */


#ifndef __ksEntity_DISPINTERFACE_DEFINED__
#define __ksEntity_DISPINTERFACE_DEFINED__

/* dispinterface ksEntity */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksEntity,0x508A0CCA,0x9D74,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("508A0CCA-9D74-11D6-95CE-00C0262D30E3")
    ksEntity : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksEntityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksEntity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksEntity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksEntity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksEntity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksEntity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksEntity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksEntity * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksEntityVtbl;

    interface ksEntity
    {
        CONST_VTBL struct ksEntityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksEntity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksEntity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksEntity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksEntity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksEntity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksEntity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksEntity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksEntity_DISPINTERFACE_DEFINED__ */


#ifndef __ksPart_DISPINTERFACE_DEFINED__
#define __ksPart_DISPINTERFACE_DEFINED__

/* dispinterface ksPart */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPart,0x508A0CCD,0x9D74,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("508A0CCD-9D74-11D6-95CE-00C0262D30E3")
    ksPart : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPartVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPart * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPart * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPart * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPart * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPart * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPart * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPart * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPartVtbl;

    interface ksPart
    {
        CONST_VTBL struct ksPartVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPart_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPart_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPart_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPart_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPart_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPart_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPart_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPart_DISPINTERFACE_DEFINED__ */


#ifndef __ksDocument3DNotify_DISPINTERFACE_DEFINED__
#define __ksDocument3DNotify_DISPINTERFACE_DEFINED__

/* dispinterface ksDocument3DNotify */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDocument3DNotify,0xB6C1BCFD,0x68DA,0x4a0a,0xA9,0x5C,0x29,0x60,0x84,0xC6,0xA0,0x1A);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("B6C1BCFD-68DA-4a0a-A95C-296084C6A01A")
    ksDocument3DNotify : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDocument3DNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDocument3DNotify * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDocument3DNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDocument3DNotify * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDocument3DNotify * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDocument3DNotify * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDocument3DNotify * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDocument3DNotify * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDocument3DNotifyVtbl;

    interface ksDocument3DNotify
    {
        CONST_VTBL struct ksDocument3DNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDocument3DNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDocument3DNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDocument3DNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDocument3DNotify_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDocument3DNotify_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDocument3DNotify_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDocument3DNotify_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDocument3DNotify_DISPINTERFACE_DEFINED__ */


#ifndef __ksModelLibrary_DISPINTERFACE_DEFINED__
#define __ksModelLibrary_DISPINTERFACE_DEFINED__

/* dispinterface ksModelLibrary */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksModelLibrary,0x111CEFE4,0xA0A7,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("111CEFE4-A0A7-11D6-95CE-00C0262D30E3")
    ksModelLibrary : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksModelLibraryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksModelLibrary * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksModelLibrary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksModelLibrary * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksModelLibrary * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksModelLibrary * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksModelLibrary * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksModelLibrary * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksModelLibraryVtbl;

    interface ksModelLibrary
    {
        CONST_VTBL struct ksModelLibraryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksModelLibrary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksModelLibrary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksModelLibrary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksModelLibrary_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksModelLibrary_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksModelLibrary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksModelLibrary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksModelLibrary_DISPINTERFACE_DEFINED__ */


#ifndef __ksEntityCollection_DISPINTERFACE_DEFINED__
#define __ksEntityCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksEntityCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksEntityCollection,0xB0170141,0xC02C,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("B0170141-C02C-11D6-8734-00C0262CDD2C")
    ksEntityCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksEntityCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksEntityCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksEntityCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksEntityCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksEntityCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksEntityCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksEntityCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksEntityCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksEntityCollectionVtbl;

    interface ksEntityCollection
    {
        CONST_VTBL struct ksEntityCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksEntityCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksEntityCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksEntityCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksEntityCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksEntityCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksEntityCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksEntityCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksEntityCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksVariableCollection_DISPINTERFACE_DEFINED__
#define __ksVariableCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksVariableCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksVariableCollection,0x03CEAC81,0xC0B8,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("03CEAC81-C0B8-11D6-8734-00C0262CDD2C")
    ksVariableCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksVariableCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksVariableCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksVariableCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksVariableCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksVariableCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksVariableCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksVariableCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksVariableCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksVariableCollectionVtbl;

    interface ksVariableCollection
    {
        CONST_VTBL struct ksVariableCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksVariableCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksVariableCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksVariableCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksVariableCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksVariableCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksVariableCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksVariableCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksVariableCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksMateConstraintCollection_DISPINTERFACE_DEFINED__
#define __ksMateConstraintCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksMateConstraintCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksMateConstraintCollection,0x03CEAC84,0xC0B8,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("03CEAC84-C0B8-11D6-8734-00C0262CDD2C")
    ksMateConstraintCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksMateConstraintCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksMateConstraintCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksMateConstraintCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksMateConstraintCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksMateConstraintCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksMateConstraintCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksMateConstraintCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksMateConstraintCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksMateConstraintCollectionVtbl;

    interface ksMateConstraintCollection
    {
        CONST_VTBL struct ksMateConstraintCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksMateConstraintCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksMateConstraintCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksMateConstraintCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksMateConstraintCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksMateConstraintCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksMateConstraintCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksMateConstraintCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksMateConstraintCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksPartCollection_DISPINTERFACE_DEFINED__
#define __ksPartCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksPartCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPartCollection,0x03CEAC87,0xC0B8,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("03CEAC87-C0B8-11D6-8734-00C0262CDD2C")
    ksPartCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPartCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPartCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPartCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPartCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPartCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPartCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPartCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPartCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPartCollectionVtbl;

    interface ksPartCollection
    {
        CONST_VTBL struct ksPartCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPartCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPartCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPartCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPartCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPartCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPartCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPartCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPartCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksMeshPartArrayDefinition_DISPINTERFACE_DEFINED__
#define __ksMeshPartArrayDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksMeshPartArrayDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksMeshPartArrayDefinition,0xE6E78D61,0xC0FA,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E6E78D61-C0FA-11D6-8734-00C0262CDD2C")
    ksMeshPartArrayDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksMeshPartArrayDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksMeshPartArrayDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksMeshPartArrayDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksMeshPartArrayDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksMeshPartArrayDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksMeshPartArrayDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksMeshPartArrayDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksMeshPartArrayDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksMeshPartArrayDefinitionVtbl;

    interface ksMeshPartArrayDefinition
    {
        CONST_VTBL struct ksMeshPartArrayDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksMeshPartArrayDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksMeshPartArrayDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksMeshPartArrayDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksMeshPartArrayDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksMeshPartArrayDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksMeshPartArrayDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksMeshPartArrayDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksMeshPartArrayDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksCircularPartArrayDefinition_DISPINTERFACE_DEFINED__
#define __ksCircularPartArrayDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksCircularPartArrayDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCircularPartArrayDefinition,0xDDD05143,0xC180,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DDD05143-C180-11D6-8734-00C0262CDD2C")
    ksCircularPartArrayDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCircularPartArrayDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCircularPartArrayDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCircularPartArrayDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCircularPartArrayDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCircularPartArrayDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCircularPartArrayDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCircularPartArrayDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCircularPartArrayDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCircularPartArrayDefinitionVtbl;

    interface ksCircularPartArrayDefinition
    {
        CONST_VTBL struct ksCircularPartArrayDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCircularPartArrayDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCircularPartArrayDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCircularPartArrayDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCircularPartArrayDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCircularPartArrayDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCircularPartArrayDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCircularPartArrayDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCircularPartArrayDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksCurvePartArrayDefinition_DISPINTERFACE_DEFINED__
#define __ksCurvePartArrayDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksCurvePartArrayDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCurvePartArrayDefinition,0xDDD05146,0xC180,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DDD05146-C180-11D6-8734-00C0262CDD2C")
    ksCurvePartArrayDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCurvePartArrayDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCurvePartArrayDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCurvePartArrayDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCurvePartArrayDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCurvePartArrayDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCurvePartArrayDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCurvePartArrayDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCurvePartArrayDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCurvePartArrayDefinitionVtbl;

    interface ksCurvePartArrayDefinition
    {
        CONST_VTBL struct ksCurvePartArrayDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCurvePartArrayDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCurvePartArrayDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCurvePartArrayDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCurvePartArrayDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCurvePartArrayDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCurvePartArrayDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCurvePartArrayDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCurvePartArrayDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksDerivativePartArrayDefinition_DISPINTERFACE_DEFINED__
#define __ksDerivativePartArrayDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksDerivativePartArrayDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDerivativePartArrayDefinition,0xDDD05149,0xC180,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DDD05149-C180-11D6-8734-00C0262CDD2C")
    ksDerivativePartArrayDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDerivativePartArrayDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDerivativePartArrayDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDerivativePartArrayDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDerivativePartArrayDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDerivativePartArrayDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDerivativePartArrayDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDerivativePartArrayDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDerivativePartArrayDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDerivativePartArrayDefinitionVtbl;

    interface ksDerivativePartArrayDefinition
    {
        CONST_VTBL struct ksDerivativePartArrayDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDerivativePartArrayDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDerivativePartArrayDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDerivativePartArrayDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDerivativePartArrayDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDerivativePartArrayDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDerivativePartArrayDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDerivativePartArrayDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDerivativePartArrayDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksAxis2PlanesDefinition_DISPINTERFACE_DEFINED__
#define __ksAxis2PlanesDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksAxis2PlanesDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksAxis2PlanesDefinition,0x0307BB81,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BB81-C193-11D6-8734-00C0262CDD2C")
    ksAxis2PlanesDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksAxis2PlanesDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksAxis2PlanesDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksAxis2PlanesDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksAxis2PlanesDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksAxis2PlanesDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksAxis2PlanesDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksAxis2PlanesDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksAxis2PlanesDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksAxis2PlanesDefinitionVtbl;

    interface ksAxis2PlanesDefinition
    {
        CONST_VTBL struct ksAxis2PlanesDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksAxis2PlanesDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksAxis2PlanesDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksAxis2PlanesDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksAxis2PlanesDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksAxis2PlanesDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksAxis2PlanesDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksAxis2PlanesDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksAxis2PlanesDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksAxisOperationsDefinition_DISPINTERFACE_DEFINED__
#define __ksAxisOperationsDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksAxisOperationsDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksAxisOperationsDefinition,0x0307BB84,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BB84-C193-11D6-8734-00C0262CDD2C")
    ksAxisOperationsDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksAxisOperationsDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksAxisOperationsDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksAxisOperationsDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksAxisOperationsDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksAxisOperationsDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksAxisOperationsDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksAxisOperationsDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksAxisOperationsDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksAxisOperationsDefinitionVtbl;

    interface ksAxisOperationsDefinition
    {
        CONST_VTBL struct ksAxisOperationsDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksAxisOperationsDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksAxisOperationsDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksAxisOperationsDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksAxisOperationsDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksAxisOperationsDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksAxisOperationsDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksAxisOperationsDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksAxisOperationsDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksAxis2PointsDefinition_DISPINTERFACE_DEFINED__
#define __ksAxis2PointsDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksAxis2PointsDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksAxis2PointsDefinition,0x0307BB87,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BB87-C193-11D6-8734-00C0262CDD2C")
    ksAxis2PointsDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksAxis2PointsDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksAxis2PointsDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksAxis2PointsDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksAxis2PointsDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksAxis2PointsDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksAxis2PointsDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksAxis2PointsDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksAxis2PointsDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksAxis2PointsDefinitionVtbl;

    interface ksAxis2PointsDefinition
    {
        CONST_VTBL struct ksAxis2PointsDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksAxis2PointsDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksAxis2PointsDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksAxis2PointsDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksAxis2PointsDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksAxis2PointsDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksAxis2PointsDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksAxis2PointsDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksAxis2PointsDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksAxisEdgeDefinition_DISPINTERFACE_DEFINED__
#define __ksAxisEdgeDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksAxisEdgeDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksAxisEdgeDefinition,0x0307BB8A,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BB8A-C193-11D6-8734-00C0262CDD2C")
    ksAxisEdgeDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksAxisEdgeDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksAxisEdgeDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksAxisEdgeDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksAxisEdgeDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksAxisEdgeDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksAxisEdgeDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksAxisEdgeDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksAxisEdgeDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksAxisEdgeDefinitionVtbl;

    interface ksAxisEdgeDefinition
    {
        CONST_VTBL struct ksAxisEdgeDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksAxisEdgeDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksAxisEdgeDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksAxisEdgeDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksAxisEdgeDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksAxisEdgeDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksAxisEdgeDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksAxisEdgeDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksAxisEdgeDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksMeshCopyDefinition_DISPINTERFACE_DEFINED__
#define __ksMeshCopyDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksMeshCopyDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksMeshCopyDefinition,0x0307BB8D,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BB8D-C193-11D6-8734-00C0262CDD2C")
    ksMeshCopyDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksMeshCopyDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksMeshCopyDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksMeshCopyDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksMeshCopyDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksMeshCopyDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksMeshCopyDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksMeshCopyDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksMeshCopyDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksMeshCopyDefinitionVtbl;

    interface ksMeshCopyDefinition
    {
        CONST_VTBL struct ksMeshCopyDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksMeshCopyDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksMeshCopyDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksMeshCopyDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksMeshCopyDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksMeshCopyDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksMeshCopyDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksMeshCopyDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksMeshCopyDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksCircularCopyDefinition_DISPINTERFACE_DEFINED__
#define __ksCircularCopyDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksCircularCopyDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCircularCopyDefinition,0x0307BB90,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BB90-C193-11D6-8734-00C0262CDD2C")
    ksCircularCopyDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCircularCopyDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCircularCopyDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCircularCopyDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCircularCopyDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCircularCopyDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCircularCopyDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCircularCopyDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCircularCopyDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCircularCopyDefinitionVtbl;

    interface ksCircularCopyDefinition
    {
        CONST_VTBL struct ksCircularCopyDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCircularCopyDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCircularCopyDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCircularCopyDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCircularCopyDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCircularCopyDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCircularCopyDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCircularCopyDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCircularCopyDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksCurveCopyDefinition_DISPINTERFACE_DEFINED__
#define __ksCurveCopyDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksCurveCopyDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCurveCopyDefinition,0x0307BB93,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BB93-C193-11D6-8734-00C0262CDD2C")
    ksCurveCopyDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCurveCopyDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCurveCopyDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCurveCopyDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCurveCopyDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCurveCopyDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCurveCopyDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCurveCopyDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCurveCopyDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCurveCopyDefinitionVtbl;

    interface ksCurveCopyDefinition
    {
        CONST_VTBL struct ksCurveCopyDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCurveCopyDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCurveCopyDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCurveCopyDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCurveCopyDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCurveCopyDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCurveCopyDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCurveCopyDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCurveCopyDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksMirrorCopyDefinition_DISPINTERFACE_DEFINED__
#define __ksMirrorCopyDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksMirrorCopyDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksMirrorCopyDefinition,0x0307BB96,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BB96-C193-11D6-8734-00C0262CDD2C")
    ksMirrorCopyDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksMirrorCopyDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksMirrorCopyDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksMirrorCopyDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksMirrorCopyDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksMirrorCopyDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksMirrorCopyDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksMirrorCopyDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksMirrorCopyDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksMirrorCopyDefinitionVtbl;

    interface ksMirrorCopyDefinition
    {
        CONST_VTBL struct ksMirrorCopyDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksMirrorCopyDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksMirrorCopyDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksMirrorCopyDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksMirrorCopyDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksMirrorCopyDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksMirrorCopyDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksMirrorCopyDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksMirrorCopyDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksMirrorCopyAllDefinition_DISPINTERFACE_DEFINED__
#define __ksMirrorCopyAllDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksMirrorCopyAllDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksMirrorCopyAllDefinition,0x0307BB99,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BB99-C193-11D6-8734-00C0262CDD2C")
    ksMirrorCopyAllDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksMirrorCopyAllDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksMirrorCopyAllDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksMirrorCopyAllDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksMirrorCopyAllDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksMirrorCopyAllDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksMirrorCopyAllDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksMirrorCopyAllDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksMirrorCopyAllDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksMirrorCopyAllDefinitionVtbl;

    interface ksMirrorCopyAllDefinition
    {
        CONST_VTBL struct ksMirrorCopyAllDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksMirrorCopyAllDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksMirrorCopyAllDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksMirrorCopyAllDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksMirrorCopyAllDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksMirrorCopyAllDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksMirrorCopyAllDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksMirrorCopyAllDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksMirrorCopyAllDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksConicSpiralDefinition_DISPINTERFACE_DEFINED__
#define __ksConicSpiralDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksConicSpiralDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksConicSpiralDefinition,0x0307BB9C,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BB9C-C193-11D6-8734-00C0262CDD2C")
    ksConicSpiralDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksConicSpiralDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksConicSpiralDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksConicSpiralDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksConicSpiralDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksConicSpiralDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksConicSpiralDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksConicSpiralDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksConicSpiralDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksConicSpiralDefinitionVtbl;

    interface ksConicSpiralDefinition
    {
        CONST_VTBL struct ksConicSpiralDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksConicSpiralDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksConicSpiralDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksConicSpiralDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksConicSpiralDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksConicSpiralDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksConicSpiralDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksConicSpiralDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksConicSpiralDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksCylindricSpiralDefinition_DISPINTERFACE_DEFINED__
#define __ksCylindricSpiralDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksCylindricSpiralDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCylindricSpiralDefinition,0x0307BB9F,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BB9F-C193-11D6-8734-00C0262CDD2C")
    ksCylindricSpiralDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCylindricSpiralDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCylindricSpiralDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCylindricSpiralDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCylindricSpiralDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCylindricSpiralDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCylindricSpiralDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCylindricSpiralDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCylindricSpiralDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCylindricSpiralDefinitionVtbl;

    interface ksCylindricSpiralDefinition
    {
        CONST_VTBL struct ksCylindricSpiralDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCylindricSpiralDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCylindricSpiralDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCylindricSpiralDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCylindricSpiralDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCylindricSpiralDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCylindricSpiralDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCylindricSpiralDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCylindricSpiralDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksPolyLineDefinition_DISPINTERFACE_DEFINED__
#define __ksPolyLineDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksPolyLineDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPolyLineDefinition,0x0307BBA2,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BBA2-C193-11D6-8734-00C0262CDD2C")
    ksPolyLineDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPolyLineDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPolyLineDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPolyLineDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPolyLineDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPolyLineDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPolyLineDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPolyLineDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPolyLineDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPolyLineDefinitionVtbl;

    interface ksPolyLineDefinition
    {
        CONST_VTBL struct ksPolyLineDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPolyLineDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPolyLineDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPolyLineDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPolyLineDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPolyLineDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPolyLineDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPolyLineDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPolyLineDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksSplineDefinition_DISPINTERFACE_DEFINED__
#define __ksSplineDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksSplineDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSplineDefinition,0x0307BBA5,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BBA5-C193-11D6-8734-00C0262CDD2C")
    ksSplineDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSplineDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSplineDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSplineDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSplineDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSplineDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSplineDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSplineDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSplineDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSplineDefinitionVtbl;

    interface ksSplineDefinition
    {
        CONST_VTBL struct ksSplineDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSplineDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSplineDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSplineDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSplineDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSplineDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSplineDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSplineDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSplineDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksBaseExtrusionDefinition_DISPINTERFACE_DEFINED__
#define __ksBaseExtrusionDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksBaseExtrusionDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBaseExtrusionDefinition,0xDEEFEFE1,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFEFE1-C3E2-11D6-8734-00C0262CDD2C")
    ksBaseExtrusionDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBaseExtrusionDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBaseExtrusionDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBaseExtrusionDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBaseExtrusionDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBaseExtrusionDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBaseExtrusionDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBaseExtrusionDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBaseExtrusionDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBaseExtrusionDefinitionVtbl;

    interface ksBaseExtrusionDefinition
    {
        CONST_VTBL struct ksBaseExtrusionDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBaseExtrusionDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBaseExtrusionDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBaseExtrusionDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBaseExtrusionDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBaseExtrusionDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBaseExtrusionDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBaseExtrusionDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBaseExtrusionDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksBossExtrusionDefinition_DISPINTERFACE_DEFINED__
#define __ksBossExtrusionDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksBossExtrusionDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBossExtrusionDefinition,0xDEEFEFE4,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFEFE4-C3E2-11D6-8734-00C0262CDD2C")
    ksBossExtrusionDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBossExtrusionDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBossExtrusionDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBossExtrusionDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBossExtrusionDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBossExtrusionDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBossExtrusionDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBossExtrusionDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBossExtrusionDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBossExtrusionDefinitionVtbl;

    interface ksBossExtrusionDefinition
    {
        CONST_VTBL struct ksBossExtrusionDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBossExtrusionDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBossExtrusionDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBossExtrusionDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBossExtrusionDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBossExtrusionDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBossExtrusionDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBossExtrusionDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBossExtrusionDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksCutExtrusionDefinition_DISPINTERFACE_DEFINED__
#define __ksCutExtrusionDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksCutExtrusionDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCutExtrusionDefinition,0xDEEFEFE7,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFEFE7-C3E2-11D6-8734-00C0262CDD2C")
    ksCutExtrusionDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCutExtrusionDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCutExtrusionDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCutExtrusionDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCutExtrusionDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCutExtrusionDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCutExtrusionDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCutExtrusionDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCutExtrusionDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCutExtrusionDefinitionVtbl;

    interface ksCutExtrusionDefinition
    {
        CONST_VTBL struct ksCutExtrusionDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCutExtrusionDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCutExtrusionDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCutExtrusionDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCutExtrusionDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCutExtrusionDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCutExtrusionDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCutExtrusionDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCutExtrusionDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksExtrusionSurfaceDefinition_DISPINTERFACE_DEFINED__
#define __ksExtrusionSurfaceDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksExtrusionSurfaceDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksExtrusionSurfaceDefinition,0xB20E24C3,0x5E4A,0x4cda,0xA1,0xED,0x6B,0xB8,0xEB,0xC8,0x1A,0x29);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("B20E24C3-5E4A-4cda-A1ED-6BB8EBC81A29")
    ksExtrusionSurfaceDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksExtrusionSurfaceDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksExtrusionSurfaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksExtrusionSurfaceDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksExtrusionSurfaceDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksExtrusionSurfaceDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksExtrusionSurfaceDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksExtrusionSurfaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksExtrusionSurfaceDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksExtrusionSurfaceDefinitionVtbl;

    interface ksExtrusionSurfaceDefinition
    {
        CONST_VTBL struct ksExtrusionSurfaceDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksExtrusionSurfaceDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksExtrusionSurfaceDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksExtrusionSurfaceDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksExtrusionSurfaceDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksExtrusionSurfaceDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksExtrusionSurfaceDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksExtrusionSurfaceDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksExtrusionSurfaceDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksFaceDefinition_DISPINTERFACE_DEFINED__
#define __ksFaceDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksFaceDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksFaceDefinition,0x0307BBA8,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BBA8-C193-11D6-8734-00C0262CDD2C")
    ksFaceDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksFaceDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksFaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksFaceDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksFaceDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksFaceDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksFaceDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksFaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksFaceDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksFaceDefinitionVtbl;

    interface ksFaceDefinition
    {
        CONST_VTBL struct ksFaceDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksFaceDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksFaceDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksFaceDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksFaceDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksFaceDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksFaceDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksFaceDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksFaceDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksEdgeDefinition_DISPINTERFACE_DEFINED__
#define __ksEdgeDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksEdgeDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksEdgeDefinition,0x0307BBAB,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BBAB-C193-11D6-8734-00C0262CDD2C")
    ksEdgeDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksEdgeDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksEdgeDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksEdgeDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksEdgeDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksEdgeDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksEdgeDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksEdgeDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksEdgeDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksEdgeDefinitionVtbl;

    interface ksEdgeDefinition
    {
        CONST_VTBL struct ksEdgeDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksEdgeDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksEdgeDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksEdgeDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksEdgeDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksEdgeDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksEdgeDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksEdgeDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksEdgeDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksChamferDefinition_DISPINTERFACE_DEFINED__
#define __ksChamferDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksChamferDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksChamferDefinition,0x0307BBAE,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BBAE-C193-11D6-8734-00C0262CDD2C")
    ksChamferDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksChamferDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksChamferDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksChamferDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksChamferDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksChamferDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksChamferDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksChamferDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksChamferDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksChamferDefinitionVtbl;

    interface ksChamferDefinition
    {
        CONST_VTBL struct ksChamferDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksChamferDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksChamferDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksChamferDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksChamferDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksChamferDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksChamferDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksChamferDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksChamferDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksFilletDefinition_DISPINTERFACE_DEFINED__
#define __ksFilletDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksFilletDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksFilletDefinition,0x0307BBB1,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0307BBB1-C193-11D6-8734-00C0262CDD2C")
    ksFilletDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksFilletDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksFilletDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksFilletDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksFilletDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksFilletDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksFilletDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksFilletDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksFilletDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksFilletDefinitionVtbl;

    interface ksFilletDefinition
    {
        CONST_VTBL struct ksFilletDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksFilletDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksFilletDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksFilletDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksFilletDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksFilletDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksFilletDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksFilletDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksFilletDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksBaseLoftDefinition_DISPINTERFACE_DEFINED__
#define __ksBaseLoftDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksBaseLoftDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBaseLoftDefinition,0xDEEFEFEA,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFEFEA-C3E2-11D6-8734-00C0262CDD2C")
    ksBaseLoftDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBaseLoftDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBaseLoftDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBaseLoftDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBaseLoftDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBaseLoftDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBaseLoftDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBaseLoftDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBaseLoftDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBaseLoftDefinitionVtbl;

    interface ksBaseLoftDefinition
    {
        CONST_VTBL struct ksBaseLoftDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBaseLoftDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBaseLoftDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBaseLoftDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBaseLoftDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBaseLoftDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBaseLoftDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBaseLoftDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBaseLoftDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksBossLoftDefinition_DISPINTERFACE_DEFINED__
#define __ksBossLoftDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksBossLoftDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBossLoftDefinition,0xDEEFEFED,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFEFED-C3E2-11D6-8734-00C0262CDD2C")
    ksBossLoftDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBossLoftDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBossLoftDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBossLoftDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBossLoftDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBossLoftDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBossLoftDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBossLoftDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBossLoftDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBossLoftDefinitionVtbl;

    interface ksBossLoftDefinition
    {
        CONST_VTBL struct ksBossLoftDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBossLoftDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBossLoftDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBossLoftDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBossLoftDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBossLoftDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBossLoftDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBossLoftDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBossLoftDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksCutLoftDefinition_DISPINTERFACE_DEFINED__
#define __ksCutLoftDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksCutLoftDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCutLoftDefinition,0xDEEFEFF0,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFEFF0-C3E2-11D6-8734-00C0262CDD2C")
    ksCutLoftDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCutLoftDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCutLoftDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCutLoftDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCutLoftDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCutLoftDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCutLoftDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCutLoftDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCutLoftDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCutLoftDefinitionVtbl;

    interface ksCutLoftDefinition
    {
        CONST_VTBL struct ksCutLoftDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCutLoftDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCutLoftDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCutLoftDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCutLoftDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCutLoftDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCutLoftDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCutLoftDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCutLoftDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksLoftSurfaceDefinition_DISPINTERFACE_DEFINED__
#define __ksLoftSurfaceDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksLoftSurfaceDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLoftSurfaceDefinition,0xE04339B5,0xAA08,0x4717,0x8E,0x50,0x90,0xED,0x0E,0x37,0x56,0x24);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E04339B5-AA08-4717-8E50-90ED0E375624")
    ksLoftSurfaceDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLoftSurfaceDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLoftSurfaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLoftSurfaceDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLoftSurfaceDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLoftSurfaceDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLoftSurfaceDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLoftSurfaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLoftSurfaceDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLoftSurfaceDefinitionVtbl;

    interface ksLoftSurfaceDefinition
    {
        CONST_VTBL struct ksLoftSurfaceDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLoftSurfaceDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLoftSurfaceDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLoftSurfaceDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLoftSurfaceDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLoftSurfaceDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLoftSurfaceDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLoftSurfaceDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLoftSurfaceDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksInclineDefinition_DISPINTERFACE_DEFINED__
#define __ksInclineDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksInclineDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksInclineDefinition,0xDEEFEFF3,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFEFF3-C3E2-11D6-8734-00C0262CDD2C")
    ksInclineDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksInclineDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksInclineDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksInclineDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksInclineDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksInclineDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksInclineDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksInclineDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksInclineDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksInclineDefinitionVtbl;

    interface ksInclineDefinition
    {
        CONST_VTBL struct ksInclineDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksInclineDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksInclineDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksInclineDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksInclineDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksInclineDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksInclineDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksInclineDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksInclineDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksShellDefinition_DISPINTERFACE_DEFINED__
#define __ksShellDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksShellDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksShellDefinition,0xDEEFEFF6,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFEFF6-C3E2-11D6-8734-00C0262CDD2C")
    ksShellDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksShellDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksShellDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksShellDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksShellDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksShellDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksShellDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksShellDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksShellDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksShellDefinitionVtbl;

    interface ksShellDefinition
    {
        CONST_VTBL struct ksShellDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksShellDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksShellDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksShellDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksShellDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksShellDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksShellDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksShellDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksShellDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksBaseEvolutionDefinition_DISPINTERFACE_DEFINED__
#define __ksBaseEvolutionDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksBaseEvolutionDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBaseEvolutionDefinition,0xDEEFEFF9,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFEFF9-C3E2-11D6-8734-00C0262CDD2C")
    ksBaseEvolutionDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBaseEvolutionDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBaseEvolutionDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBaseEvolutionDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBaseEvolutionDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBaseEvolutionDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBaseEvolutionDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBaseEvolutionDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBaseEvolutionDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBaseEvolutionDefinitionVtbl;

    interface ksBaseEvolutionDefinition
    {
        CONST_VTBL struct ksBaseEvolutionDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBaseEvolutionDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBaseEvolutionDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBaseEvolutionDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBaseEvolutionDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBaseEvolutionDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBaseEvolutionDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBaseEvolutionDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBaseEvolutionDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksBossEvolutionDefinition_DISPINTERFACE_DEFINED__
#define __ksBossEvolutionDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksBossEvolutionDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBossEvolutionDefinition,0xDEEFEFFC,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFEFFC-C3E2-11D6-8734-00C0262CDD2C")
    ksBossEvolutionDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBossEvolutionDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBossEvolutionDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBossEvolutionDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBossEvolutionDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBossEvolutionDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBossEvolutionDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBossEvolutionDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBossEvolutionDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBossEvolutionDefinitionVtbl;

    interface ksBossEvolutionDefinition
    {
        CONST_VTBL struct ksBossEvolutionDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBossEvolutionDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBossEvolutionDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBossEvolutionDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBossEvolutionDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBossEvolutionDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBossEvolutionDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBossEvolutionDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBossEvolutionDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksCutEvolutionDefinition_DISPINTERFACE_DEFINED__
#define __ksCutEvolutionDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksCutEvolutionDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCutEvolutionDefinition,0xDEEFEFFF,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFEFFF-C3E2-11D6-8734-00C0262CDD2C")
    ksCutEvolutionDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCutEvolutionDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCutEvolutionDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCutEvolutionDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCutEvolutionDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCutEvolutionDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCutEvolutionDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCutEvolutionDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCutEvolutionDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCutEvolutionDefinitionVtbl;

    interface ksCutEvolutionDefinition
    {
        CONST_VTBL struct ksCutEvolutionDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCutEvolutionDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCutEvolutionDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCutEvolutionDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCutEvolutionDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCutEvolutionDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCutEvolutionDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCutEvolutionDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCutEvolutionDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksEvolutionSurfaceDefinition_DISPINTERFACE_DEFINED__
#define __ksEvolutionSurfaceDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksEvolutionSurfaceDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksEvolutionSurfaceDefinition,0x2BD4C79E,0xE2C3,0x42e8,0x8F,0xCC,0xB5,0x1F,0xFB,0xDE,0x9F,0x69);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("2BD4C79E-E2C3-42e8-8FCC-B51FFBDE9F69")
    ksEvolutionSurfaceDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksEvolutionSurfaceDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksEvolutionSurfaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksEvolutionSurfaceDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksEvolutionSurfaceDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksEvolutionSurfaceDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksEvolutionSurfaceDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksEvolutionSurfaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksEvolutionSurfaceDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksEvolutionSurfaceDefinitionVtbl;

    interface ksEvolutionSurfaceDefinition
    {
        CONST_VTBL struct ksEvolutionSurfaceDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksEvolutionSurfaceDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksEvolutionSurfaceDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksEvolutionSurfaceDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksEvolutionSurfaceDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksEvolutionSurfaceDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksEvolutionSurfaceDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksEvolutionSurfaceDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksEvolutionSurfaceDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksRibDefinition_DISPINTERFACE_DEFINED__
#define __ksRibDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksRibDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRibDefinition,0xDEEFF002,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF002-C3E2-11D6-8734-00C0262CDD2C")
    ksRibDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRibDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRibDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRibDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRibDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRibDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRibDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRibDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRibDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRibDefinitionVtbl;

    interface ksRibDefinition
    {
        CONST_VTBL struct ksRibDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRibDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRibDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRibDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRibDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRibDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRibDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRibDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRibDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksCutByPlaneDefinition_DISPINTERFACE_DEFINED__
#define __ksCutByPlaneDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksCutByPlaneDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCutByPlaneDefinition,0xDEEFF005,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF005-C3E2-11D6-8734-00C0262CDD2C")
    ksCutByPlaneDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCutByPlaneDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCutByPlaneDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCutByPlaneDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCutByPlaneDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCutByPlaneDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCutByPlaneDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCutByPlaneDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCutByPlaneDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCutByPlaneDefinitionVtbl;

    interface ksCutByPlaneDefinition
    {
        CONST_VTBL struct ksCutByPlaneDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCutByPlaneDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCutByPlaneDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCutByPlaneDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCutByPlaneDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCutByPlaneDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCutByPlaneDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCutByPlaneDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCutByPlaneDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksCutBySketchDefinition_DISPINTERFACE_DEFINED__
#define __ksCutBySketchDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksCutBySketchDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCutBySketchDefinition,0xDEEFF008,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF008-C3E2-11D6-8734-00C0262CDD2C")
    ksCutBySketchDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCutBySketchDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCutBySketchDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCutBySketchDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCutBySketchDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCutBySketchDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCutBySketchDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCutBySketchDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCutBySketchDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCutBySketchDefinitionVtbl;

    interface ksCutBySketchDefinition
    {
        CONST_VTBL struct ksCutBySketchDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCutBySketchDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCutBySketchDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCutBySketchDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCutBySketchDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCutBySketchDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCutBySketchDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCutBySketchDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCutBySketchDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksPlaneOffsetDefinition_DISPINTERFACE_DEFINED__
#define __ksPlaneOffsetDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksPlaneOffsetDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPlaneOffsetDefinition,0xDEEFF00B,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF00B-C3E2-11D6-8734-00C0262CDD2C")
    ksPlaneOffsetDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPlaneOffsetDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPlaneOffsetDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPlaneOffsetDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPlaneOffsetDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPlaneOffsetDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPlaneOffsetDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPlaneOffsetDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPlaneOffsetDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPlaneOffsetDefinitionVtbl;

    interface ksPlaneOffsetDefinition
    {
        CONST_VTBL struct ksPlaneOffsetDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPlaneOffsetDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPlaneOffsetDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPlaneOffsetDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPlaneOffsetDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPlaneOffsetDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPlaneOffsetDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPlaneOffsetDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPlaneOffsetDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksPlaneAngleDefinition_DISPINTERFACE_DEFINED__
#define __ksPlaneAngleDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksPlaneAngleDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPlaneAngleDefinition,0xDEEFF00E,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF00E-C3E2-11D6-8734-00C0262CDD2C")
    ksPlaneAngleDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPlaneAngleDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPlaneAngleDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPlaneAngleDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPlaneAngleDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPlaneAngleDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPlaneAngleDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPlaneAngleDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPlaneAngleDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPlaneAngleDefinitionVtbl;

    interface ksPlaneAngleDefinition
    {
        CONST_VTBL struct ksPlaneAngleDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPlaneAngleDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPlaneAngleDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPlaneAngleDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPlaneAngleDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPlaneAngleDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPlaneAngleDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPlaneAngleDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPlaneAngleDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksPlane3PointsDefinition_DISPINTERFACE_DEFINED__
#define __ksPlane3PointsDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksPlane3PointsDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPlane3PointsDefinition,0xDEEFF011,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF011-C3E2-11D6-8734-00C0262CDD2C")
    ksPlane3PointsDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPlane3PointsDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPlane3PointsDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPlane3PointsDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPlane3PointsDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPlane3PointsDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPlane3PointsDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPlane3PointsDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPlane3PointsDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPlane3PointsDefinitionVtbl;

    interface ksPlane3PointsDefinition
    {
        CONST_VTBL struct ksPlane3PointsDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPlane3PointsDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPlane3PointsDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPlane3PointsDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPlane3PointsDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPlane3PointsDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPlane3PointsDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPlane3PointsDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPlane3PointsDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksPlaneNormalToSurfaceDefinition_DISPINTERFACE_DEFINED__
#define __ksPlaneNormalToSurfaceDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksPlaneNormalToSurfaceDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPlaneNormalToSurfaceDefinition,0xDEEFF014,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF014-C3E2-11D6-8734-00C0262CDD2C")
    ksPlaneNormalToSurfaceDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPlaneNormalToSurfaceDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPlaneNormalToSurfaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPlaneNormalToSurfaceDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPlaneNormalToSurfaceDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPlaneNormalToSurfaceDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPlaneNormalToSurfaceDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPlaneNormalToSurfaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPlaneNormalToSurfaceDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPlaneNormalToSurfaceDefinitionVtbl;

    interface ksPlaneNormalToSurfaceDefinition
    {
        CONST_VTBL struct ksPlaneNormalToSurfaceDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPlaneNormalToSurfaceDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPlaneNormalToSurfaceDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPlaneNormalToSurfaceDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPlaneNormalToSurfaceDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPlaneNormalToSurfaceDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPlaneNormalToSurfaceDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPlaneNormalToSurfaceDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPlaneNormalToSurfaceDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksPlaneTangentToSurfaceDefinition_DISPINTERFACE_DEFINED__
#define __ksPlaneTangentToSurfaceDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksPlaneTangentToSurfaceDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPlaneTangentToSurfaceDefinition,0xDEEFF017,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF017-C3E2-11D6-8734-00C0262CDD2C")
    ksPlaneTangentToSurfaceDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPlaneTangentToSurfaceDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPlaneTangentToSurfaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPlaneTangentToSurfaceDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPlaneTangentToSurfaceDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPlaneTangentToSurfaceDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPlaneTangentToSurfaceDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPlaneTangentToSurfaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPlaneTangentToSurfaceDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPlaneTangentToSurfaceDefinitionVtbl;

    interface ksPlaneTangentToSurfaceDefinition
    {
        CONST_VTBL struct ksPlaneTangentToSurfaceDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPlaneTangentToSurfaceDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPlaneTangentToSurfaceDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPlaneTangentToSurfaceDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPlaneTangentToSurfaceDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPlaneTangentToSurfaceDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPlaneTangentToSurfaceDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPlaneTangentToSurfaceDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPlaneTangentToSurfaceDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksPlaneEdgePointDefinition_DISPINTERFACE_DEFINED__
#define __ksPlaneEdgePointDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksPlaneEdgePointDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPlaneEdgePointDefinition,0xDEEFF01A,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF01A-C3E2-11D6-8734-00C0262CDD2C")
    ksPlaneEdgePointDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPlaneEdgePointDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPlaneEdgePointDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPlaneEdgePointDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPlaneEdgePointDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPlaneEdgePointDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPlaneEdgePointDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPlaneEdgePointDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPlaneEdgePointDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPlaneEdgePointDefinitionVtbl;

    interface ksPlaneEdgePointDefinition
    {
        CONST_VTBL struct ksPlaneEdgePointDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPlaneEdgePointDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPlaneEdgePointDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPlaneEdgePointDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPlaneEdgePointDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPlaneEdgePointDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPlaneEdgePointDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPlaneEdgePointDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPlaneEdgePointDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksPlaneParallelDefinition_DISPINTERFACE_DEFINED__
#define __ksPlaneParallelDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksPlaneParallelDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPlaneParallelDefinition,0xDEEFF01D,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF01D-C3E2-11D6-8734-00C0262CDD2C")
    ksPlaneParallelDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPlaneParallelDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPlaneParallelDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPlaneParallelDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPlaneParallelDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPlaneParallelDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPlaneParallelDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPlaneParallelDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPlaneParallelDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPlaneParallelDefinitionVtbl;

    interface ksPlaneParallelDefinition
    {
        CONST_VTBL struct ksPlaneParallelDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPlaneParallelDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPlaneParallelDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPlaneParallelDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPlaneParallelDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPlaneParallelDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPlaneParallelDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPlaneParallelDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPlaneParallelDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksPlanePerpendicularDefinition_DISPINTERFACE_DEFINED__
#define __ksPlanePerpendicularDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksPlanePerpendicularDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPlanePerpendicularDefinition,0xDEEFF020,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF020-C3E2-11D6-8734-00C0262CDD2C")
    ksPlanePerpendicularDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPlanePerpendicularDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPlanePerpendicularDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPlanePerpendicularDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPlanePerpendicularDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPlanePerpendicularDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPlanePerpendicularDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPlanePerpendicularDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPlanePerpendicularDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPlanePerpendicularDefinitionVtbl;

    interface ksPlanePerpendicularDefinition
    {
        CONST_VTBL struct ksPlanePerpendicularDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPlanePerpendicularDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPlanePerpendicularDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPlanePerpendicularDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPlanePerpendicularDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPlanePerpendicularDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPlanePerpendicularDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPlanePerpendicularDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPlanePerpendicularDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksPlaneLineToEdgeDefinition_DISPINTERFACE_DEFINED__
#define __ksPlaneLineToEdgeDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksPlaneLineToEdgeDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPlaneLineToEdgeDefinition,0xDEEFF023,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF023-C3E2-11D6-8734-00C0262CDD2C")
    ksPlaneLineToEdgeDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPlaneLineToEdgeDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPlaneLineToEdgeDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPlaneLineToEdgeDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPlaneLineToEdgeDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPlaneLineToEdgeDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPlaneLineToEdgeDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPlaneLineToEdgeDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPlaneLineToEdgeDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPlaneLineToEdgeDefinitionVtbl;

    interface ksPlaneLineToEdgeDefinition
    {
        CONST_VTBL struct ksPlaneLineToEdgeDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPlaneLineToEdgeDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPlaneLineToEdgeDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPlaneLineToEdgeDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPlaneLineToEdgeDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPlaneLineToEdgeDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPlaneLineToEdgeDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPlaneLineToEdgeDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPlaneLineToEdgeDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksPlaneLineToPlaneDefinition_DISPINTERFACE_DEFINED__
#define __ksPlaneLineToPlaneDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksPlaneLineToPlaneDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPlaneLineToPlaneDefinition,0xDEEFF026,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF026-C3E2-11D6-8734-00C0262CDD2C")
    ksPlaneLineToPlaneDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPlaneLineToPlaneDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPlaneLineToPlaneDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPlaneLineToPlaneDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPlaneLineToPlaneDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPlaneLineToPlaneDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPlaneLineToPlaneDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPlaneLineToPlaneDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPlaneLineToPlaneDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPlaneLineToPlaneDefinitionVtbl;

    interface ksPlaneLineToPlaneDefinition
    {
        CONST_VTBL struct ksPlaneLineToPlaneDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPlaneLineToPlaneDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPlaneLineToPlaneDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPlaneLineToPlaneDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPlaneLineToPlaneDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPlaneLineToPlaneDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPlaneLineToPlaneDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPlaneLineToPlaneDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPlaneLineToPlaneDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksThinParam_DISPINTERFACE_DEFINED__
#define __ksThinParam_DISPINTERFACE_DEFINED__

/* dispinterface ksThinParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksThinParam,0xDEEFF029,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF029-C3E2-11D6-8734-00C0262CDD2C")
    ksThinParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksThinParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksThinParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksThinParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksThinParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksThinParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksThinParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksThinParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksThinParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksThinParamVtbl;

    interface ksThinParam
    {
        CONST_VTBL struct ksThinParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksThinParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksThinParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksThinParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksThinParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksThinParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksThinParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksThinParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksThinParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksExtrusionParam_DISPINTERFACE_DEFINED__
#define __ksExtrusionParam_DISPINTERFACE_DEFINED__

/* dispinterface ksExtrusionParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksExtrusionParam,0xDEEFF02C,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF02C-C3E2-11D6-8734-00C0262CDD2C")
    ksExtrusionParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksExtrusionParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksExtrusionParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksExtrusionParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksExtrusionParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksExtrusionParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksExtrusionParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksExtrusionParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksExtrusionParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksExtrusionParamVtbl;

    interface ksExtrusionParam
    {
        CONST_VTBL struct ksExtrusionParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksExtrusionParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksExtrusionParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksExtrusionParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksExtrusionParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksExtrusionParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksExtrusionParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksExtrusionParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksExtrusionParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksRotatedParam_DISPINTERFACE_DEFINED__
#define __ksRotatedParam_DISPINTERFACE_DEFINED__

/* dispinterface ksRotatedParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRotatedParam,0xDEEFF02F,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEFF02F-C3E2-11D6-8734-00C0262CDD2C")
    ksRotatedParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRotatedParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRotatedParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRotatedParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRotatedParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRotatedParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRotatedParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRotatedParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRotatedParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRotatedParamVtbl;

    interface ksRotatedParam
    {
        CONST_VTBL struct ksRotatedParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRotatedParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRotatedParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRotatedParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRotatedParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRotatedParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRotatedParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRotatedParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRotatedParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksColorParam_DISPINTERFACE_DEFINED__
#define __ksColorParam_DISPINTERFACE_DEFINED__

/* dispinterface ksColorParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksColorParam,0x2DFACC61,0xC4A4,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("2DFACC61-C4A4-11D6-8734-00C0262CDD2C")
    ksColorParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksColorParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksColorParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksColorParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksColorParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksColorParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksColorParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksColorParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksColorParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksColorParamVtbl;

    interface ksColorParam
    {
        CONST_VTBL struct ksColorParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksColorParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksColorParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksColorParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksColorParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksColorParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksColorParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksColorParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksColorParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksBaseRotatedDefinition_DISPINTERFACE_DEFINED__
#define __ksBaseRotatedDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksBaseRotatedDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBaseRotatedDefinition,0x2DFACC67,0xC4A4,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("2DFACC67-C4A4-11D6-8734-00C0262CDD2C")
    ksBaseRotatedDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBaseRotatedDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBaseRotatedDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBaseRotatedDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBaseRotatedDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBaseRotatedDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBaseRotatedDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBaseRotatedDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBaseRotatedDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBaseRotatedDefinitionVtbl;

    interface ksBaseRotatedDefinition
    {
        CONST_VTBL struct ksBaseRotatedDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBaseRotatedDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBaseRotatedDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBaseRotatedDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBaseRotatedDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBaseRotatedDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBaseRotatedDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBaseRotatedDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBaseRotatedDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksBossRotatedDefinition_DISPINTERFACE_DEFINED__
#define __ksBossRotatedDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksBossRotatedDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBossRotatedDefinition,0x2DFACC6A,0xC4A4,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("2DFACC6A-C4A4-11D6-8734-00C0262CDD2C")
    ksBossRotatedDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBossRotatedDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBossRotatedDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBossRotatedDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBossRotatedDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBossRotatedDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBossRotatedDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBossRotatedDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBossRotatedDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBossRotatedDefinitionVtbl;

    interface ksBossRotatedDefinition
    {
        CONST_VTBL struct ksBossRotatedDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBossRotatedDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBossRotatedDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBossRotatedDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBossRotatedDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBossRotatedDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBossRotatedDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBossRotatedDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBossRotatedDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksCutRotatedDefinition_DISPINTERFACE_DEFINED__
#define __ksCutRotatedDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksCutRotatedDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCutRotatedDefinition,0x2DFACC6D,0xC4A4,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("2DFACC6D-C4A4-11D6-8734-00C0262CDD2C")
    ksCutRotatedDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCutRotatedDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCutRotatedDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCutRotatedDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCutRotatedDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCutRotatedDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCutRotatedDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCutRotatedDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCutRotatedDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCutRotatedDefinitionVtbl;

    interface ksCutRotatedDefinition
    {
        CONST_VTBL struct ksCutRotatedDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCutRotatedDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCutRotatedDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCutRotatedDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCutRotatedDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCutRotatedDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCutRotatedDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCutRotatedDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCutRotatedDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksRotatedSurfaceDefinition_DISPINTERFACE_DEFINED__
#define __ksRotatedSurfaceDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksRotatedSurfaceDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRotatedSurfaceDefinition,0xFD27841D,0x1374,0x4f7f,0xAE,0x8A,0xC2,0xA4,0x4F,0x89,0x12,0x0D);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FD27841D-1374-4f7f-AE8A-C2A44F89120D")
    ksRotatedSurfaceDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRotatedSurfaceDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRotatedSurfaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRotatedSurfaceDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRotatedSurfaceDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRotatedSurfaceDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRotatedSurfaceDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRotatedSurfaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRotatedSurfaceDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRotatedSurfaceDefinitionVtbl;

    interface ksRotatedSurfaceDefinition
    {
        CONST_VTBL struct ksRotatedSurfaceDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRotatedSurfaceDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRotatedSurfaceDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRotatedSurfaceDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRotatedSurfaceDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRotatedSurfaceDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRotatedSurfaceDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRotatedSurfaceDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRotatedSurfaceDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksSketchDefinition_DISPINTERFACE_DEFINED__
#define __ksSketchDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksSketchDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSketchDefinition,0x2DFACC70,0xC4A4,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("2DFACC70-C4A4-11D6-8734-00C0262CDD2C")
    ksSketchDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSketchDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSketchDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSketchDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSketchDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSketchDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSketchDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSketchDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSketchDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSketchDefinitionVtbl;

    interface ksSketchDefinition
    {
        CONST_VTBL struct ksSketchDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSketchDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSketchDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSketchDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSketchDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSketchDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSketchDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSketchDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSketchDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksRasterFormatParam_DISPINTERFACE_DEFINED__
#define __ksRasterFormatParam_DISPINTERFACE_DEFINED__

/* dispinterface ksRasterFormatParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRasterFormatParam,0x1A91A8AB,0xAF8C,0x4ee3,0x86,0xD4,0x0A,0x9C,0x00,0x12,0x31,0x95);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1A91A8AB-AF8C-4ee3-86D4-0A9C00123195")
    ksRasterFormatParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRasterFormatParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRasterFormatParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRasterFormatParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRasterFormatParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRasterFormatParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRasterFormatParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRasterFormatParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRasterFormatParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRasterFormatParamVtbl;

    interface ksRasterFormatParam
    {
        CONST_VTBL struct ksRasterFormatParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRasterFormatParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRasterFormatParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRasterFormatParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRasterFormatParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRasterFormatParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRasterFormatParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRasterFormatParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRasterFormatParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksAdditionFormatParam_DISPINTERFACE_DEFINED__
#define __ksAdditionFormatParam_DISPINTERFACE_DEFINED__

/* dispinterface ksAdditionFormatParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksAdditionFormatParam,0x0FD25FF9,0xAB0A,0x48f3,0xBA,0xD4,0xF1,0x93,0x11,0x6C,0x08,0x87);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0FD25FF9-AB0A-48f3-BAD4-F193116C0887")
    ksAdditionFormatParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksAdditionFormatParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksAdditionFormatParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksAdditionFormatParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksAdditionFormatParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksAdditionFormatParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksAdditionFormatParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksAdditionFormatParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksAdditionFormatParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksAdditionFormatParamVtbl;

    interface ksAdditionFormatParam
    {
        CONST_VTBL struct ksAdditionFormatParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksAdditionFormatParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksAdditionFormatParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksAdditionFormatParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksAdditionFormatParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksAdditionFormatParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksAdditionFormatParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksAdditionFormatParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksAdditionFormatParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksConstraintParam_DISPINTERFACE_DEFINED__
#define __ksConstraintParam_DISPINTERFACE_DEFINED__

/* dispinterface ksConstraintParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksConstraintParam,0x862E250D,0x9DB1,0x47e8,0x8E,0xE2,0x9B,0xE2,0xD2,0x45,0x3D,0x5A);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("862E250D-9DB1-47e8-8EE2-9BE2D2453D5A")
    ksConstraintParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksConstraintParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksConstraintParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksConstraintParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksConstraintParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksConstraintParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksConstraintParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksConstraintParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksConstraintParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksConstraintParamVtbl;

    interface ksConstraintParam
    {
        CONST_VTBL struct ksConstraintParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksConstraintParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksConstraintParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksConstraintParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksConstraintParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksConstraintParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksConstraintParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksConstraintParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksConstraintParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksImportedSurfaceDefinition_DISPINTERFACE_DEFINED__
#define __ksImportedSurfaceDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksImportedSurfaceDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksImportedSurfaceDefinition,0x78A2C35E,0xA7DA,0x414e,0xB9,0x0A,0xF1,0x99,0x98,0xEC,0x7B,0xD1);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("78A2C35E-A7DA-414e-B90A-F19998EC7BD1")
    ksImportedSurfaceDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksImportedSurfaceDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksImportedSurfaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksImportedSurfaceDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksImportedSurfaceDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksImportedSurfaceDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksImportedSurfaceDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksImportedSurfaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksImportedSurfaceDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksImportedSurfaceDefinitionVtbl;

    interface ksImportedSurfaceDefinition
    {
        CONST_VTBL struct ksImportedSurfaceDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksImportedSurfaceDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksImportedSurfaceDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksImportedSurfaceDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksImportedSurfaceDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksImportedSurfaceDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksImportedSurfaceDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksImportedSurfaceDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksImportedSurfaceDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksFaceCollection_DISPINTERFACE_DEFINED__
#define __ksFaceCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksFaceCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksFaceCollection,0x0E95ACE0,0x0E73,0x406f,0xAE,0x94,0xE8,0xA0,0x59,0x2E,0x29,0x8D);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0E95ACE0-0E73-406f-AE94-E8A0592E298D")
    ksFaceCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksFaceCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksFaceCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksFaceCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksFaceCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksFaceCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksFaceCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksFaceCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksFaceCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksFaceCollectionVtbl;

    interface ksFaceCollection
    {
        CONST_VTBL struct ksFaceCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksFaceCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksFaceCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksFaceCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksFaceCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksFaceCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksFaceCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksFaceCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksFaceCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksVertexDefinition_DISPINTERFACE_DEFINED__
#define __ksVertexDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksVertexDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksVertexDefinition,0xA7257E73,0xEB61,0x4602,0xBC,0x8B,0x2D,0x00,0xEA,0x4A,0xA0,0x62);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("A7257E73-EB61-4602-BC8B-2D00EA4AA062")
    ksVertexDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksVertexDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksVertexDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksVertexDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksVertexDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksVertexDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksVertexDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksVertexDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksVertexDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksVertexDefinitionVtbl;

    interface ksVertexDefinition
    {
        CONST_VTBL struct ksVertexDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksVertexDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksVertexDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksVertexDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksVertexDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksVertexDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksVertexDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksVertexDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksVertexDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksTessellation_DISPINTERFACE_DEFINED__
#define __ksTessellation_DISPINTERFACE_DEFINED__

/* dispinterface ksTessellation */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksTessellation,0xB810650E,0x7819,0x485c,0x90,0xD2,0xAD,0xEB,0x64,0x7A,0xE5,0xE2);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("B810650E-7819-485c-90D2-ADEB647AE5E2")
    ksTessellation : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksTessellationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksTessellation * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksTessellation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksTessellation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksTessellation * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksTessellation * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksTessellation * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksTessellation * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksTessellationVtbl;

    interface ksTessellation
    {
        CONST_VTBL struct ksTessellationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksTessellation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksTessellation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksTessellation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksTessellation_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksTessellation_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksTessellation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksTessellation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksTessellation_DISPINTERFACE_DEFINED__ */


#ifndef __ksFacet_DISPINTERFACE_DEFINED__
#define __ksFacet_DISPINTERFACE_DEFINED__

/* dispinterface ksFacet */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksFacet,0xEB6AFBC0,0xC387,0x4e07,0xB2,0x4E,0xDD,0xF2,0xB7,0x92,0x6A,0x26);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EB6AFBC0-C387-4e07-B24E-DDF2B7926A26")
    ksFacet : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksFacetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksFacet * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksFacet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksFacet * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksFacet * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksFacet * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksFacet * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksFacet * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksFacetVtbl;

    interface ksFacet
    {
        CONST_VTBL struct ksFacetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksFacet_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksFacet_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksFacet_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksFacet_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksFacet_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksFacet_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksFacet_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksFacet_DISPINTERFACE_DEFINED__ */


#ifndef __ksMeasurer_DISPINTERFACE_DEFINED__
#define __ksMeasurer_DISPINTERFACE_DEFINED__

/* dispinterface ksMeasurer */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksMeasurer,0xABC84FE5,0x3945,0x4a0b,0x82,0x0A,0x71,0x9B,0xF4,0xB7,0x92,0x24);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("ABC84FE5-3945-4a0b-820A-719BF4B79224")
    ksMeasurer : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksMeasurerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksMeasurer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksMeasurer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksMeasurer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksMeasurer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksMeasurer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksMeasurer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksMeasurer * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksMeasurerVtbl;

    interface ksMeasurer
    {
        CONST_VTBL struct ksMeasurerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksMeasurer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksMeasurer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksMeasurer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksMeasurer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksMeasurer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksMeasurer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksMeasurer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksMeasurer_DISPINTERFACE_DEFINED__ */


#ifndef __ksBodyCollection_DISPINTERFACE_DEFINED__
#define __ksBodyCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksBodyCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBodyCollection,0xCFC49C01,0x7653,0x4845,0x93,0xFD,0x13,0x42,0x8F,0x5D,0x58,0xEC);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("CFC49C01-7653-4845-93FD-13428F5D58EC")
    ksBodyCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBodyCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBodyCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBodyCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBodyCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBodyCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBodyCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBodyCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBodyCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBodyCollectionVtbl;

    interface ksBodyCollection
    {
        CONST_VTBL struct ksBodyCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBodyCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBodyCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBodyCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBodyCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBodyCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBodyCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBodyCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBodyCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksBody_DISPINTERFACE_DEFINED__
#define __ksBody_DISPINTERFACE_DEFINED__

/* dispinterface ksBody */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBody,0x03EFC9DD,0xE05A,0x4277,0xBC,0x7C,0x4F,0xD4,0x99,0xA2,0x52,0xDE);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("03EFC9DD-E05A-4277-BC7C-4FD499A252DE")
    ksBody : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBodyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBody * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBody * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBody * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBody * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBody * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBody * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBody * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBodyVtbl;

    interface ksBody
    {
        CONST_VTBL struct ksBodyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBody_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBody_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBody_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBody_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBody_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBody_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBody_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBody_DISPINTERFACE_DEFINED__ */


#ifndef __ksSurface_DISPINTERFACE_DEFINED__
#define __ksSurface_DISPINTERFACE_DEFINED__

/* dispinterface ksSurface */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSurface,0x963CB6E1,0xB9BF,0x4234,0x96,0x4A,0x13,0xBF,0xE6,0xC0,0x28,0x2A);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("963CB6E1-B9BF-4234-964A-13BFE6C0282A")
    ksSurface : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSurfaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSurface * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSurface * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSurface * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSurface * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSurface * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSurface * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSurfaceVtbl;

    interface ksSurface
    {
        CONST_VTBL struct ksSurfaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSurface_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSurface_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSurface_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSurface_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSurface_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSurface_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSurface_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSurface_DISPINTERFACE_DEFINED__ */


#ifndef __ksEdgeCollection_DISPINTERFACE_DEFINED__
#define __ksEdgeCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksEdgeCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksEdgeCollection,0x6096A4FD,0x970B,0x468c,0x81,0x5E,0x37,0xCA,0x19,0x70,0xA2,0x03);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("6096A4FD-970B-468c-815E-37CA1970A203")
    ksEdgeCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksEdgeCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksEdgeCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksEdgeCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksEdgeCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksEdgeCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksEdgeCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksEdgeCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksEdgeCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksEdgeCollectionVtbl;

    interface ksEdgeCollection
    {
        CONST_VTBL struct ksEdgeCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksEdgeCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksEdgeCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksEdgeCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksEdgeCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksEdgeCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksEdgeCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksEdgeCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksEdgeCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksOrientedEdge_DISPINTERFACE_DEFINED__
#define __ksOrientedEdge_DISPINTERFACE_DEFINED__

/* dispinterface ksOrientedEdge */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksOrientedEdge,0x88C32A80,0x3735,0x4e18,0xA0,0x2E,0x9B,0x2A,0x8F,0x0A,0x90,0xE3);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("88C32A80-3735-4e18-A02E-9B2A8F0A90E3")
    ksOrientedEdge : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksOrientedEdgeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksOrientedEdge * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksOrientedEdge * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksOrientedEdge * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksOrientedEdge * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksOrientedEdge * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksOrientedEdge * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksOrientedEdge * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksOrientedEdgeVtbl;

    interface ksOrientedEdge
    {
        CONST_VTBL struct ksOrientedEdgeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksOrientedEdge_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksOrientedEdge_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksOrientedEdge_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksOrientedEdge_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksOrientedEdge_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksOrientedEdge_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksOrientedEdge_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksOrientedEdge_DISPINTERFACE_DEFINED__ */


#ifndef __ksOrientedEdgeCollection_DISPINTERFACE_DEFINED__
#define __ksOrientedEdgeCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksOrientedEdgeCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksOrientedEdgeCollection,0x5CE8909D,0xCF3D,0x418f,0xA9,0xB9,0x0A,0x12,0xB2,0x39,0x16,0xC0);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("5CE8909D-CF3D-418f-A9B9-0A12B23916C0")
    ksOrientedEdgeCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksOrientedEdgeCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksOrientedEdgeCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksOrientedEdgeCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksOrientedEdgeCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksOrientedEdgeCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksOrientedEdgeCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksOrientedEdgeCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksOrientedEdgeCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksOrientedEdgeCollectionVtbl;

    interface ksOrientedEdgeCollection
    {
        CONST_VTBL struct ksOrientedEdgeCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksOrientedEdgeCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksOrientedEdgeCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksOrientedEdgeCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksOrientedEdgeCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksOrientedEdgeCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksOrientedEdgeCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksOrientedEdgeCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksOrientedEdgeCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksLoop_DISPINTERFACE_DEFINED__
#define __ksLoop_DISPINTERFACE_DEFINED__

/* dispinterface ksLoop */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLoop,0x22BC5C86,0xCF58,0x45e4,0xAA,0x46,0x5E,0x8D,0x5A,0x82,0x57,0x98);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("22BC5C86-CF58-45e4-AA46-5E8D5A825798")
    ksLoop : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLoopVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLoop * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLoop * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLoop * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLoop * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLoop * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLoop * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLoop * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLoopVtbl;

    interface ksLoop
    {
        CONST_VTBL struct ksLoopVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLoop_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLoop_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLoop_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLoop_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLoop_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLoop_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLoop_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLoop_DISPINTERFACE_DEFINED__ */


#ifndef __ksLoopCollection_DISPINTERFACE_DEFINED__
#define __ksLoopCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksLoopCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLoopCollection,0x1BD7207E,0x36AA,0x47df,0x91,0x3E,0xAD,0x26,0xDE,0x6C,0x16,0xE8);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1BD7207E-36AA-47df-913E-AD26DE6C16E8")
    ksLoopCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLoopCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLoopCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLoopCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLoopCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLoopCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLoopCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLoopCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLoopCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLoopCollectionVtbl;

    interface ksLoopCollection
    {
        CONST_VTBL struct ksLoopCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLoopCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLoopCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLoopCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLoopCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLoopCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLoopCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLoopCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLoopCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksCurve3D_DISPINTERFACE_DEFINED__
#define __ksCurve3D_DISPINTERFACE_DEFINED__

/* dispinterface ksCurve3D */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCurve3D,0x7572648A,0xD4EE,0x41fe,0x8D,0x74,0xEC,0x7D,0x1F,0x91,0xBD,0xE2);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7572648A-D4EE-41fe-8D74-EC7D1F91BDE2")
    ksCurve3D : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCurve3DVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCurve3D * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCurve3D * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCurve3D * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCurve3D * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCurve3D * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCurve3D * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCurve3D * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCurve3DVtbl;

    interface ksCurve3D
    {
        CONST_VTBL struct ksCurve3DVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCurve3D_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCurve3D_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCurve3D_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCurve3D_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCurve3D_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCurve3D_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCurve3D_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCurve3D_DISPINTERFACE_DEFINED__ */


#ifndef __ksLineSeg3dParam_DISPINTERFACE_DEFINED__
#define __ksLineSeg3dParam_DISPINTERFACE_DEFINED__

/* dispinterface ksLineSeg3dParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksLineSeg3dParam,0xDC8F6A7B,0xFF16,0x46ff,0x98,0x6D,0x2F,0x7E,0x1F,0x6B,0x25,0xC4);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DC8F6A7B-FF16-46ff-986D-2F7E1F6B25C4")
    ksLineSeg3dParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksLineSeg3dParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksLineSeg3dParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksLineSeg3dParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksLineSeg3dParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksLineSeg3dParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksLineSeg3dParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksLineSeg3dParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksLineSeg3dParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksLineSeg3dParamVtbl;

    interface ksLineSeg3dParam
    {
        CONST_VTBL struct ksLineSeg3dParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksLineSeg3dParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksLineSeg3dParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksLineSeg3dParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksLineSeg3dParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksLineSeg3dParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksLineSeg3dParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksLineSeg3dParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksLineSeg3dParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksCircle3dParam_DISPINTERFACE_DEFINED__
#define __ksCircle3dParam_DISPINTERFACE_DEFINED__

/* dispinterface ksCircle3dParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCircle3dParam,0x82758442,0xC9EB,0x48f7,0xB3,0x04,0x08,0x3C,0x5E,0x64,0xD4,0xE0);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("82758442-C9EB-48f7-B304-083C5E64D4E0")
    ksCircle3dParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCircle3dParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCircle3dParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCircle3dParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCircle3dParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCircle3dParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCircle3dParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCircle3dParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCircle3dParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCircle3dParamVtbl;

    interface ksCircle3dParam
    {
        CONST_VTBL struct ksCircle3dParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCircle3dParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCircle3dParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCircle3dParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCircle3dParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCircle3dParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCircle3dParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCircle3dParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCircle3dParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksEllipse3dParam_DISPINTERFACE_DEFINED__
#define __ksEllipse3dParam_DISPINTERFACE_DEFINED__

/* dispinterface ksEllipse3dParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksEllipse3dParam,0x5B8082B8,0x6AD3,0x4509,0x82,0x6D,0xD2,0x3B,0x7F,0x61,0x32,0x13);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("5B8082B8-6AD3-4509-826D-D23B7F613213")
    ksEllipse3dParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksEllipse3dParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksEllipse3dParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksEllipse3dParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksEllipse3dParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksEllipse3dParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksEllipse3dParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksEllipse3dParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksEllipse3dParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksEllipse3dParamVtbl;

    interface ksEllipse3dParam
    {
        CONST_VTBL struct ksEllipse3dParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksEllipse3dParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksEllipse3dParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksEllipse3dParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksEllipse3dParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksEllipse3dParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksEllipse3dParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksEllipse3dParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksEllipse3dParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksPlaneParam_DISPINTERFACE_DEFINED__
#define __ksPlaneParam_DISPINTERFACE_DEFINED__

/* dispinterface ksPlaneParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPlaneParam,0x6A6F6B95,0xD100,0x4d54,0xA4,0x30,0x70,0xA4,0x2D,0x34,0x29,0x17);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("6A6F6B95-D100-4d54-A430-70A42D342917")
    ksPlaneParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPlaneParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPlaneParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPlaneParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPlaneParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPlaneParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPlaneParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPlaneParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPlaneParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPlaneParamVtbl;

    interface ksPlaneParam
    {
        CONST_VTBL struct ksPlaneParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPlaneParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPlaneParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPlaneParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPlaneParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPlaneParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPlaneParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPlaneParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPlaneParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksConeParam_DISPINTERFACE_DEFINED__
#define __ksConeParam_DISPINTERFACE_DEFINED__

/* dispinterface ksConeParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksConeParam,0xCCFA0D95,0x0834,0x4f92,0x98,0x8B,0x6E,0x47,0x7A,0xD6,0x75,0x89);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("CCFA0D95-0834-4f92-988B-6E477AD67589")
    ksConeParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksConeParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksConeParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksConeParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksConeParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksConeParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksConeParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksConeParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksConeParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksConeParamVtbl;

    interface ksConeParam
    {
        CONST_VTBL struct ksConeParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksConeParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksConeParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksConeParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksConeParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksConeParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksConeParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksConeParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksConeParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksCylinderParam_DISPINTERFACE_DEFINED__
#define __ksCylinderParam_DISPINTERFACE_DEFINED__

/* dispinterface ksCylinderParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCylinderParam,0x5D462836,0xCF69,0x4995,0xAB,0x78,0x8C,0x7A,0x83,0xD0,0x9B,0xD7);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("5D462836-CF69-4995-AB78-8C7A83D09BD7")
    ksCylinderParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCylinderParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCylinderParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCylinderParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCylinderParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCylinderParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCylinderParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCylinderParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCylinderParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCylinderParamVtbl;

    interface ksCylinderParam
    {
        CONST_VTBL struct ksCylinderParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCylinderParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCylinderParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCylinderParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCylinderParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCylinderParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCylinderParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCylinderParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCylinderParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksSphereParam_DISPINTERFACE_DEFINED__
#define __ksSphereParam_DISPINTERFACE_DEFINED__

/* dispinterface ksSphereParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSphereParam,0xC32977F3,0x3CA7,0x4d56,0x8A,0xE7,0x49,0x63,0xE6,0x85,0x1B,0x75);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("C32977F3-3CA7-4d56-8AE7-4963E6851B75")
    ksSphereParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSphereParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSphereParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSphereParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSphereParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSphereParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSphereParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSphereParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSphereParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSphereParamVtbl;

    interface ksSphereParam
    {
        CONST_VTBL struct ksSphereParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSphereParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSphereParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSphereParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSphereParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSphereParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSphereParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSphereParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSphereParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksTorusParam_DISPINTERFACE_DEFINED__
#define __ksTorusParam_DISPINTERFACE_DEFINED__

/* dispinterface ksTorusParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksTorusParam,0xFDA3B147,0xBAF1,0x4f75,0x99,0xAA,0x39,0xD1,0x13,0x23,0xEA,0x97);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FDA3B147-BAF1-4f75-99AA-39D11323EA97")
    ksTorusParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksTorusParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksTorusParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksTorusParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksTorusParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksTorusParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksTorusParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksTorusParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksTorusParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksTorusParamVtbl;

    interface ksTorusParam
    {
        CONST_VTBL struct ksTorusParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksTorusParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksTorusParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksTorusParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksTorusParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksTorusParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksTorusParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksTorusParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksTorusParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksNurbsPoint3dParam_DISPINTERFACE_DEFINED__
#define __ksNurbsPoint3dParam_DISPINTERFACE_DEFINED__

/* dispinterface ksNurbsPoint3dParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksNurbsPoint3dParam,0xF1CD604D,0x1D26,0x4f6b,0x8F,0x94,0xF1,0x12,0x13,0x3E,0x61,0x62);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("F1CD604D-1D26-4f6b-8F94-F112133E6162")
    ksNurbsPoint3dParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksNurbsPoint3dParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksNurbsPoint3dParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksNurbsPoint3dParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksNurbsPoint3dParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksNurbsPoint3dParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksNurbsPoint3dParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksNurbsPoint3dParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksNurbsPoint3dParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksNurbsPoint3dParamVtbl;

    interface ksNurbsPoint3dParam
    {
        CONST_VTBL struct ksNurbsPoint3dParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksNurbsPoint3dParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksNurbsPoint3dParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksNurbsPoint3dParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksNurbsPoint3dParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksNurbsPoint3dParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksNurbsPoint3dParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksNurbsPoint3dParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksNurbsPoint3dParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksNurbsSurfaceParam_DISPINTERFACE_DEFINED__
#define __ksNurbsSurfaceParam_DISPINTERFACE_DEFINED__

/* dispinterface ksNurbsSurfaceParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksNurbsSurfaceParam,0xA12B63E8,0x9E0A,0x4854,0xB7,0x24,0xE1,0x82,0x75,0xB9,0xFF,0x20);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("A12B63E8-9E0A-4854-B724-E18275B9FF20")
    ksNurbsSurfaceParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksNurbsSurfaceParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksNurbsSurfaceParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksNurbsSurfaceParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksNurbsSurfaceParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksNurbsSurfaceParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksNurbsSurfaceParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksNurbsSurfaceParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksNurbsSurfaceParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksNurbsSurfaceParamVtbl;

    interface ksNurbsSurfaceParam
    {
        CONST_VTBL struct ksNurbsSurfaceParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksNurbsSurfaceParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksNurbsSurfaceParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksNurbsSurfaceParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksNurbsSurfaceParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksNurbsSurfaceParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksNurbsSurfaceParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksNurbsSurfaceParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksNurbsSurfaceParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksNurbs3dParam_DISPINTERFACE_DEFINED__
#define __ksNurbs3dParam_DISPINTERFACE_DEFINED__

/* dispinterface ksNurbs3dParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksNurbs3dParam,0x4DDDAEDB,0x2819,0x42d9,0xBD,0xBB,0x4C,0xCB,0xC9,0x8D,0x76,0xDF);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4DDDAEDB-2819-42d9-BDBB-4CCBC98D76DF")
    ksNurbs3dParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksNurbs3dParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksNurbs3dParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksNurbs3dParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksNurbs3dParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksNurbs3dParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksNurbs3dParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksNurbs3dParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksNurbs3dParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksNurbs3dParamVtbl;

    interface ksNurbs3dParam
    {
        CONST_VTBL struct ksNurbs3dParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksNurbs3dParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksNurbs3dParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksNurbs3dParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksNurbs3dParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksNurbs3dParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksNurbs3dParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksNurbs3dParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksNurbs3dParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksNurbsKnotCollection_DISPINTERFACE_DEFINED__
#define __ksNurbsKnotCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksNurbsKnotCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksNurbsKnotCollection,0x483E9889,0xE1CA,0x4ca5,0xBE,0x4E,0xEC,0xB3,0xD5,0xCF,0x01,0x26);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("483E9889-E1CA-4ca5-BE4E-ECB3D5CF0126")
    ksNurbsKnotCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksNurbsKnotCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksNurbsKnotCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksNurbsKnotCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksNurbsKnotCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksNurbsKnotCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksNurbsKnotCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksNurbsKnotCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksNurbsKnotCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksNurbsKnotCollectionVtbl;

    interface ksNurbsKnotCollection
    {
        CONST_VTBL struct ksNurbsKnotCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksNurbsKnotCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksNurbsKnotCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksNurbsKnotCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksNurbsKnotCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksNurbsKnotCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksNurbsKnotCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksNurbsKnotCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksNurbsKnotCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksNurbsPoint3dCollCollection_DISPINTERFACE_DEFINED__
#define __ksNurbsPoint3dCollCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksNurbsPoint3dCollCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksNurbsPoint3dCollCollection,0x84AF9C81,0x1795,0x4631,0xB5,0x8A,0x10,0x17,0x32,0x26,0x2E,0x75);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("84AF9C81-1795-4631-B58A-101732262E75")
    ksNurbsPoint3dCollCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksNurbsPoint3dCollCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksNurbsPoint3dCollCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksNurbsPoint3dCollCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksNurbsPoint3dCollCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksNurbsPoint3dCollCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksNurbsPoint3dCollCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksNurbsPoint3dCollCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksNurbsPoint3dCollCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksNurbsPoint3dCollCollectionVtbl;

    interface ksNurbsPoint3dCollCollection
    {
        CONST_VTBL struct ksNurbsPoint3dCollCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksNurbsPoint3dCollCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksNurbsPoint3dCollCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksNurbsPoint3dCollCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksNurbsPoint3dCollCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksNurbsPoint3dCollCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksNurbsPoint3dCollCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksNurbsPoint3dCollCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksNurbsPoint3dCollCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksNurbsPoint3dCollection_DISPINTERFACE_DEFINED__
#define __ksNurbsPoint3dCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksNurbsPoint3dCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksNurbsPoint3dCollection,0x3AD5E519,0x74E2,0x4d3b,0xB6,0xA3,0xB1,0xE8,0x1F,0x10,0x06,0xF1);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3AD5E519-74E2-4d3b-B6A3-B1E81F1006F1")
    ksNurbsPoint3dCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksNurbsPoint3dCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksNurbsPoint3dCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksNurbsPoint3dCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksNurbsPoint3dCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksNurbsPoint3dCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksNurbsPoint3dCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksNurbsPoint3dCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksNurbsPoint3dCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksNurbsPoint3dCollectionVtbl;

    interface ksNurbsPoint3dCollection
    {
        CONST_VTBL struct ksNurbsPoint3dCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksNurbsPoint3dCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksNurbsPoint3dCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksNurbsPoint3dCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksNurbsPoint3dCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksNurbsPoint3dCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksNurbsPoint3dCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksNurbsPoint3dCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksNurbsPoint3dCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksViewProjection_DISPINTERFACE_DEFINED__
#define __ksViewProjection_DISPINTERFACE_DEFINED__

/* dispinterface ksViewProjection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksViewProjection,0xBF65B990,0xC2DC,0x4a12,0x9E,0xB7,0x3E,0x86,0x86,0x08,0xAF,0x47);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("BF65B990-C2DC-4a12-9EB7-3E868608AF47")
    ksViewProjection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksViewProjectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksViewProjection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksViewProjection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksViewProjection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksViewProjection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksViewProjection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksViewProjection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksViewProjection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksViewProjectionVtbl;

    interface ksViewProjection
    {
        CONST_VTBL struct ksViewProjectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksViewProjection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksViewProjection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksViewProjection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksViewProjection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksViewProjection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksViewProjection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksViewProjection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksViewProjection_DISPINTERFACE_DEFINED__ */


#ifndef __ksViewProjectionCollection_DISPINTERFACE_DEFINED__
#define __ksViewProjectionCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksViewProjectionCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksViewProjectionCollection,0xA174F872,0xC800,0x409e,0x9F,0xB2,0xFF,0x5B,0x89,0xD8,0xB4,0xB8);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("A174F872-C800-409e-9FB2-FF5B89D8B4B8")
    ksViewProjectionCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksViewProjectionCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksViewProjectionCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksViewProjectionCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksViewProjectionCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksViewProjectionCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksViewProjectionCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksViewProjectionCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksViewProjectionCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksViewProjectionCollectionVtbl;

    interface ksViewProjectionCollection
    {
        CONST_VTBL struct ksViewProjectionCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksViewProjectionCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksViewProjectionCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksViewProjectionCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksViewProjectionCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksViewProjectionCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksViewProjectionCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksViewProjectionCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksViewProjectionCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksSelectionMng_DISPINTERFACE_DEFINED__
#define __ksSelectionMng_DISPINTERFACE_DEFINED__

/* dispinterface ksSelectionMng */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSelectionMng,0xBE41850C,0xCFC5,0x40d4,0xAE,0x49,0x37,0xAA,0x39,0x1B,0xCF,0x4B);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("BE41850C-CFC5-40d4-AE49-37AA391BCF4B")
    ksSelectionMng : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSelectionMngVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSelectionMng * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSelectionMng * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSelectionMng * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSelectionMng * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSelectionMng * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSelectionMng * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSelectionMng * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSelectionMngVtbl;

    interface ksSelectionMng
    {
        CONST_VTBL struct ksSelectionMngVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSelectionMng_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSelectionMng_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSelectionMng_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSelectionMng_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSelectionMng_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSelectionMng_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSelectionMng_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSelectionMng_DISPINTERFACE_DEFINED__ */


#ifndef __ksChooseMng_DISPINTERFACE_DEFINED__
#define __ksChooseMng_DISPINTERFACE_DEFINED__

/* dispinterface ksChooseMng */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksChooseMng,0x8F2AA755,0xD9D1,0x42a0,0x97,0xBF,0xC9,0x25,0x48,0xCE,0x72,0x32);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("8F2AA755-D9D1-42a0-97BF-C92548CE7232")
    ksChooseMng : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksChooseMngVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksChooseMng * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksChooseMng * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksChooseMng * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksChooseMng * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksChooseMng * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksChooseMng * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksChooseMng * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksChooseMngVtbl;

    interface ksChooseMng
    {
        CONST_VTBL struct ksChooseMngVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksChooseMng_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksChooseMng_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksChooseMng_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksChooseMng_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksChooseMng_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksChooseMng_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksChooseMng_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksChooseMng_DISPINTERFACE_DEFINED__ */


#ifndef __ksArc3dParam_DISPINTERFACE_DEFINED__
#define __ksArc3dParam_DISPINTERFACE_DEFINED__

/* dispinterface ksArc3dParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksArc3dParam,0x7DCBCC76,0x5041,0x4c1e,0x9B,0x33,0x12,0xB1,0x35,0x2D,0x6D,0x57);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7DCBCC76-5041-4c1e-9B33-12B1352D6D57")
    ksArc3dParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksArc3dParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksArc3dParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksArc3dParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksArc3dParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksArc3dParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksArc3dParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksArc3dParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksArc3dParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksArc3dParamVtbl;

    interface ksArc3dParam
    {
        CONST_VTBL struct ksArc3dParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksArc3dParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksArc3dParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksArc3dParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksArc3dParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksArc3dParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksArc3dParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksArc3dParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksArc3dParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksTreeNodeParam_DISPINTERFACE_DEFINED__
#define __ksTreeNodeParam_DISPINTERFACE_DEFINED__

/* dispinterface ksTreeNodeParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksTreeNodeParam,0x9F8DE1DC,0x1268,0x4785,0x92,0x17,0x1B,0x0D,0xD5,0x9B,0x85,0xFA);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("9F8DE1DC-1268-4785-9217-1B0DD59B85FA")
    ksTreeNodeParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksTreeNodeParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksTreeNodeParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksTreeNodeParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksTreeNodeParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksTreeNodeParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksTreeNodeParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksTreeNodeParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksTreeNodeParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksTreeNodeParamVtbl;

    interface ksTreeNodeParam
    {
        CONST_VTBL struct ksTreeNodeParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksTreeNodeParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksTreeNodeParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksTreeNodeParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksTreeNodeParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksTreeNodeParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksTreeNodeParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksTreeNodeParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksTreeNodeParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksAssociationViewParam_DISPINTERFACE_DEFINED__
#define __ksAssociationViewParam_DISPINTERFACE_DEFINED__

/* dispinterface ksAssociationViewParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksAssociationViewParam,0xC81EB1DA,0xBCB0,0x491a,0x8D,0x22,0x92,0x3B,0xF8,0x17,0xD5,0x72);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("C81EB1DA-BCB0-491a-8D22-923BF817D572")
    ksAssociationViewParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksAssociationViewParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksAssociationViewParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksAssociationViewParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksAssociationViewParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksAssociationViewParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksAssociationViewParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksAssociationViewParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksAssociationViewParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksAssociationViewParamVtbl;

    interface ksAssociationViewParam
    {
        CONST_VTBL struct ksAssociationViewParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksAssociationViewParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksAssociationViewParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksAssociationViewParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksAssociationViewParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksAssociationViewParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksAssociationViewParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksAssociationViewParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksAssociationViewParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksViewColorParam_DISPINTERFACE_DEFINED__
#define __ksViewColorParam_DISPINTERFACE_DEFINED__

/* dispinterface ksViewColorParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksViewColorParam,0x5A42B962,0x8F78,0x4557,0xB1,0x7A,0x1B,0x87,0x1F,0x8D,0xBD,0xB5);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("5A42B962-8F78-4557-B17A-1B871F8DBDB5")
    ksViewColorParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksViewColorParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksViewColorParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksViewColorParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksViewColorParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksViewColorParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksViewColorParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksViewColorParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksViewColorParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksViewColorParamVtbl;

    interface ksViewColorParam
    {
        CONST_VTBL struct ksViewColorParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksViewColorParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksViewColorParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksViewColorParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksViewColorParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksViewColorParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksViewColorParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksViewColorParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksViewColorParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksAxisLineParam_DISPINTERFACE_DEFINED__
#define __ksAxisLineParam_DISPINTERFACE_DEFINED__

/* dispinterface ksAxisLineParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksAxisLineParam,0xAFE694D7,0xC1E5,0x468f,0x99,0xB0,0xFE,0x4C,0x60,0xC4,0x98,0x99);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("AFE694D7-C1E5-468f-99B0-FE4C60C49899")
    ksAxisLineParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksAxisLineParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksAxisLineParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksAxisLineParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksAxisLineParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksAxisLineParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksAxisLineParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksAxisLineParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksAxisLineParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksAxisLineParamVtbl;

    interface ksAxisLineParam
    {
        CONST_VTBL struct ksAxisLineParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksAxisLineParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksAxisLineParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksAxisLineParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksAxisLineParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksAxisLineParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksAxisLineParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksAxisLineParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksAxisLineParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksTextDocumentParam_DISPINTERFACE_DEFINED__
#define __ksTextDocumentParam_DISPINTERFACE_DEFINED__

/* dispinterface ksTextDocumentParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksTextDocumentParam,0x33706D56,0xD085,0x4840,0x83,0x3B,0x43,0x5A,0xEB,0x00,0xBE,0x2A);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("33706D56-D085-4840-833B-435AEB00BE2A")
    ksTextDocumentParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksTextDocumentParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksTextDocumentParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksTextDocumentParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksTextDocumentParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksTextDocumentParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksTextDocumentParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksTextDocumentParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksTextDocumentParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksTextDocumentParamVtbl;

    interface ksTextDocumentParam
    {
        CONST_VTBL struct ksTextDocumentParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksTextDocumentParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksTextDocumentParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksTextDocumentParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksTextDocumentParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksTextDocumentParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksTextDocumentParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksTextDocumentParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksTextDocumentParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksRemoteElementParam_DISPINTERFACE_DEFINED__
#define __ksRemoteElementParam_DISPINTERFACE_DEFINED__

/* dispinterface ksRemoteElementParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksRemoteElementParam,0x25076616,0x4949,0x455e,0xA4,0x5C,0x1B,0x80,0x18,0x84,0xD8,0x25);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("25076616-4949-455e-A45C-1B801884D825")
    ksRemoteElementParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksRemoteElementParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksRemoteElementParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksRemoteElementParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksRemoteElementParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksRemoteElementParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksRemoteElementParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksRemoteElementParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksRemoteElementParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksRemoteElementParamVtbl;

    interface ksRemoteElementParam
    {
        CONST_VTBL struct ksRemoteElementParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksRemoteElementParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksRemoteElementParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksRemoteElementParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksRemoteElementParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksRemoteElementParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksRemoteElementParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksRemoteElementParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksRemoteElementParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksDeletedCopyCollection_DISPINTERFACE_DEFINED__
#define __ksDeletedCopyCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksDeletedCopyCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksDeletedCopyCollection,0x82F60797,0xD69C,0x4eb4,0x9F,0x1A,0x24,0xD6,0x25,0xD5,0xEA,0xFA);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("82F60797-D69C-4eb4-9F1A-24D625D5EAFA")
    ksDeletedCopyCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksDeletedCopyCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksDeletedCopyCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksDeletedCopyCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksDeletedCopyCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksDeletedCopyCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksDeletedCopyCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksDeletedCopyCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksDeletedCopyCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksDeletedCopyCollectionVtbl;

    interface ksDeletedCopyCollection
    {
        CONST_VTBL struct ksDeletedCopyCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksDeletedCopyCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksDeletedCopyCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksDeletedCopyCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksDeletedCopyCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksDeletedCopyCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksDeletedCopyCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksDeletedCopyCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksDeletedCopyCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksCopyObjectParam_DISPINTERFACE_DEFINED__
#define __ksCopyObjectParam_DISPINTERFACE_DEFINED__

/* dispinterface ksCopyObjectParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCopyObjectParam,0xAACAD820,0x7790,0x46eb,0xB1,0x7F,0x06,0xAE,0x42,0x21,0x5E,0xD7);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("AACAD820-7790-46eb-B17F-06AE42215ED7")
    ksCopyObjectParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCopyObjectParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCopyObjectParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCopyObjectParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCopyObjectParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCopyObjectParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCopyObjectParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCopyObjectParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCopyObjectParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCopyObjectParamVtbl;

    interface ksCopyObjectParam
    {
        CONST_VTBL struct ksCopyObjectParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCopyObjectParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCopyObjectParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCopyObjectParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCopyObjectParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCopyObjectParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCopyObjectParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCopyObjectParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCopyObjectParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksThreadDefinition_DISPINTERFACE_DEFINED__
#define __ksThreadDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksThreadDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksThreadDefinition,0x5DDB6B14,0x6F3D,0x431f,0xB6,0x2F,0xC5,0xFC,0xCA,0xFC,0x36,0x32);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("5DDB6B14-6F3D-431f-B62F-C5FCCAFC3632")
    ksThreadDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksThreadDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksThreadDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksThreadDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksThreadDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksThreadDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksThreadDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksThreadDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksThreadDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksThreadDefinitionVtbl;

    interface ksThreadDefinition
    {
        CONST_VTBL struct ksThreadDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksThreadDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksThreadDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksThreadDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksThreadDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksThreadDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksThreadDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksThreadDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksThreadDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksOverlapObjectOptions_DISPINTERFACE_DEFINED__
#define __ksOverlapObjectOptions_DISPINTERFACE_DEFINED__

/* dispinterface ksOverlapObjectOptions */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksOverlapObjectOptions,0xF78E6B71,0xBEF3,0x4a4d,0xAE,0x50,0xFE,0x96,0x42,0x6F,0x6F,0xD1);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("F78E6B71-BEF3-4a4d-AE50-FE96426F6FD1")
    ksOverlapObjectOptions : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksOverlapObjectOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksOverlapObjectOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksOverlapObjectOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksOverlapObjectOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksOverlapObjectOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksOverlapObjectOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksOverlapObjectOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksOverlapObjectOptions * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksOverlapObjectOptionsVtbl;

    interface ksOverlapObjectOptions
    {
        CONST_VTBL struct ksOverlapObjectOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksOverlapObjectOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksOverlapObjectOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksOverlapObjectOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksOverlapObjectOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksOverlapObjectOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksOverlapObjectOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksOverlapObjectOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksOverlapObjectOptions_DISPINTERFACE_DEFINED__ */


#ifndef __ksObjectsFilter3D_DISPINTERFACE_DEFINED__
#define __ksObjectsFilter3D_DISPINTERFACE_DEFINED__

/* dispinterface ksObjectsFilter3D */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksObjectsFilter3D,0xABBA6CE0,0xCB4C,0x4a32,0x98,0xB4,0xB6,0x39,0x35,0x2C,0x75,0xBA);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("ABBA6CE0-CB4C-4a32-98B4-B639352C75BA")
    ksObjectsFilter3D : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksObjectsFilter3DVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksObjectsFilter3D * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksObjectsFilter3D * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksObjectsFilter3D * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksObjectsFilter3D * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksObjectsFilter3D * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksObjectsFilter3D * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksObjectsFilter3D * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksObjectsFilter3DVtbl;

    interface ksObjectsFilter3D
    {
        CONST_VTBL struct ksObjectsFilter3DVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksObjectsFilter3D_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksObjectsFilter3D_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksObjectsFilter3D_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksObjectsFilter3D_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksObjectsFilter3D_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksObjectsFilter3D_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksObjectsFilter3D_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksObjectsFilter3D_DISPINTERFACE_DEFINED__ */


#ifndef __ksParametrizationParam_DISPINTERFACE_DEFINED__
#define __ksParametrizationParam_DISPINTERFACE_DEFINED__

/* dispinterface ksParametrizationParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksParametrizationParam,0xABBA6CE0,0xCB4C,0x4a32,0x98,0xB4,0xB6,0x39,0x35,0x2C,0x75,0xBB);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("ABBA6CE0-CB4C-4a32-98B4-B639352C75BB")
    ksParametrizationParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksParametrizationParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksParametrizationParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksParametrizationParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksParametrizationParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksParametrizationParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksParametrizationParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksParametrizationParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksParametrizationParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksParametrizationParamVtbl;

    interface ksParametrizationParam
    {
        CONST_VTBL struct ksParametrizationParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksParametrizationParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksParametrizationParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksParametrizationParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksParametrizationParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksParametrizationParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksParametrizationParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksParametrizationParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksParametrizationParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksMacro3DDefinition_DISPINTERFACE_DEFINED__
#define __ksMacro3DDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksMacro3DDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksMacro3DDefinition,0x02556461,0xD088,0x4f00,0xAE,0x61,0xD3,0x66,0x08,0x2D,0xB9,0xBC);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("02556461-D088-4f00-AE61-D366082DB9BC")
    ksMacro3DDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksMacro3DDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksMacro3DDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksMacro3DDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksMacro3DDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksMacro3DDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksMacro3DDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksMacro3DDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksMacro3DDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksMacro3DDefinitionVtbl;

    interface ksMacro3DDefinition
    {
        CONST_VTBL struct ksMacro3DDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksMacro3DDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksMacro3DDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksMacro3DDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksMacro3DDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksMacro3DDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksMacro3DDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksMacro3DDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksMacro3DDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksAxisConefaceDefinition_DISPINTERFACE_DEFINED__
#define __ksAxisConefaceDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksAxisConefaceDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksAxisConefaceDefinition,0x97337DAF,0xB7CD,0x4fb8,0x8E,0x18,0x23,0xF0,0x23,0x0E,0x5C,0xBE);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("97337DAF-B7CD-4fb8-8E18-23F0230E5CBE")
    ksAxisConefaceDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksAxisConefaceDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksAxisConefaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksAxisConefaceDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksAxisConefaceDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksAxisConefaceDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksAxisConefaceDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksAxisConefaceDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksAxisConefaceDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksAxisConefaceDefinitionVtbl;

    interface ksAxisConefaceDefinition
    {
        CONST_VTBL struct ksAxisConefaceDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksAxisConefaceDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksAxisConefaceDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksAxisConefaceDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksAxisConefaceDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksAxisConefaceDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksAxisConefaceDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksAxisConefaceDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksAxisConefaceDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksUnionComponentsDefinition_DISPINTERFACE_DEFINED__
#define __ksUnionComponentsDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksUnionComponentsDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksUnionComponentsDefinition,0x99797F89,0xFBA4,0x4582,0x81,0x2F,0x22,0x6A,0xFB,0x50,0xED,0x7D);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("99797F89-FBA4-4582-812F-226AFB50ED7D")
    ksUnionComponentsDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksUnionComponentsDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksUnionComponentsDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksUnionComponentsDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksUnionComponentsDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksUnionComponentsDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksUnionComponentsDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksUnionComponentsDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksUnionComponentsDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksUnionComponentsDefinitionVtbl;

    interface ksUnionComponentsDefinition
    {
        CONST_VTBL struct ksUnionComponentsDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksUnionComponentsDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksUnionComponentsDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksUnionComponentsDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksUnionComponentsDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksUnionComponentsDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksUnionComponentsDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksUnionComponentsDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksUnionComponentsDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksMoldCavityDefinition_DISPINTERFACE_DEFINED__
#define __ksMoldCavityDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksMoldCavityDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksMoldCavityDefinition,0xBE5F10F5,0xB198,0x49d9,0x91,0x40,0xB2,0xB9,0x1E,0x06,0x05,0x33);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("BE5F10F5-B198-49d9-9140-B2B91E060533")
    ksMoldCavityDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksMoldCavityDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksMoldCavityDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksMoldCavityDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksMoldCavityDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksMoldCavityDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksMoldCavityDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksMoldCavityDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksMoldCavityDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksMoldCavityDefinitionVtbl;

    interface ksMoldCavityDefinition
    {
        CONST_VTBL struct ksMoldCavityDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksMoldCavityDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksMoldCavityDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksMoldCavityDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksMoldCavityDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksMoldCavityDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksMoldCavityDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksMoldCavityDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksMoldCavityDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksCoordinate3dCollection_DISPINTERFACE_DEFINED__
#define __ksCoordinate3dCollection_DISPINTERFACE_DEFINED__

/* dispinterface ksCoordinate3dCollection */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksCoordinate3dCollection,0xE4091969,0x1C4E,0x4959,0x8D,0x93,0xC2,0x42,0x15,0x64,0x41,0x8B);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E4091969-1C4E-4959-8D93-C2421564418B")
    ksCoordinate3dCollection : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksCoordinate3dCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksCoordinate3dCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksCoordinate3dCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksCoordinate3dCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksCoordinate3dCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksCoordinate3dCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksCoordinate3dCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksCoordinate3dCollection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksCoordinate3dCollectionVtbl;

    interface ksCoordinate3dCollection
    {
        CONST_VTBL struct ksCoordinate3dCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksCoordinate3dCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksCoordinate3dCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksCoordinate3dCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksCoordinate3dCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksCoordinate3dCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksCoordinate3dCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksCoordinate3dCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksCoordinate3dCollection_DISPINTERFACE_DEFINED__ */


#ifndef __ksIntersectionResult_DISPINTERFACE_DEFINED__
#define __ksIntersectionResult_DISPINTERFACE_DEFINED__

/* dispinterface ksIntersectionResult */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksIntersectionResult,0xABC7F8EE,0xCF07,0x4aa8,0x98,0xA1,0x0D,0xE3,0x5D,0xB3,0x5B,0x9E);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("ABC7F8EE-CF07-4aa8-98A1-0DE35DB35B9E")
    ksIntersectionResult : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksIntersectionResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksIntersectionResult * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksIntersectionResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksIntersectionResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksIntersectionResult * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksIntersectionResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksIntersectionResult * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksIntersectionResult * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksIntersectionResultVtbl;

    interface ksIntersectionResult
    {
        CONST_VTBL struct ksIntersectionResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksIntersectionResult_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksIntersectionResult_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksIntersectionResult_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksIntersectionResult_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksIntersectionResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksIntersectionResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksIntersectionResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksIntersectionResult_DISPINTERFACE_DEFINED__ */


#ifndef __ksPlaneMiddleDefinition_DISPINTERFACE_DEFINED__
#define __ksPlaneMiddleDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksPlaneMiddleDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPlaneMiddleDefinition,0xCC5E3539,0x5B35,0x46fc,0xAF,0xE1,0x19,0xBB,0x01,0x68,0xD5,0x2F);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("CC5E3539-5B35-46fc-AFE1-19BB0168D52F")
    ksPlaneMiddleDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPlaneMiddleDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPlaneMiddleDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPlaneMiddleDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPlaneMiddleDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPlaneMiddleDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPlaneMiddleDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPlaneMiddleDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPlaneMiddleDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPlaneMiddleDefinitionVtbl;

    interface ksPlaneMiddleDefinition
    {
        CONST_VTBL struct ksPlaneMiddleDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPlaneMiddleDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPlaneMiddleDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPlaneMiddleDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPlaneMiddleDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPlaneMiddleDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPlaneMiddleDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPlaneMiddleDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPlaneMiddleDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksControlPointDefinition_DISPINTERFACE_DEFINED__
#define __ksControlPointDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksControlPointDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksControlPointDefinition,0xBC4C15A4,0x16E9,0x4cfa,0xA3,0x3E,0xCC,0x86,0xBA,0x2F,0xB5,0x46);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("BC4C15A4-16E9-4cfa-A33E-CC86BA2FB546")
    ksControlPointDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksControlPointDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksControlPointDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksControlPointDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksControlPointDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksControlPointDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksControlPointDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksControlPointDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksControlPointDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksControlPointDefinitionVtbl;

    interface ksControlPointDefinition
    {
        CONST_VTBL struct ksControlPointDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksControlPointDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksControlPointDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksControlPointDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksControlPointDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksControlPointDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksControlPointDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksControlPointDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksControlPointDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksConjunctivePointDefinition_DISPINTERFACE_DEFINED__
#define __ksConjunctivePointDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksConjunctivePointDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksConjunctivePointDefinition,0x177CBAF3,0x87E6,0x4376,0xB6,0xA9,0x66,0x9C,0x0E,0x66,0x1B,0xFF);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("177CBAF3-87E6-4376-B6A9-669C0E661BFF")
    ksConjunctivePointDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksConjunctivePointDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksConjunctivePointDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksConjunctivePointDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksConjunctivePointDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksConjunctivePointDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksConjunctivePointDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksConjunctivePointDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksConjunctivePointDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksConjunctivePointDefinitionVtbl;

    interface ksConjunctivePointDefinition
    {
        CONST_VTBL struct ksConjunctivePointDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksConjunctivePointDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksConjunctivePointDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksConjunctivePointDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksConjunctivePointDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksConjunctivePointDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksConjunctivePointDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksConjunctivePointDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksConjunctivePointDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksChooseBodies_DISPINTERFACE_DEFINED__
#define __ksChooseBodies_DISPINTERFACE_DEFINED__

/* dispinterface ksChooseBodies */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksChooseBodies,0xE06B18BF,0xD2AF,0x4201,0x99,0xBE,0xB7,0xFA,0x9E,0xEC,0xF7,0xA8);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E06B18BF-D2AF-4201-99BE-B7FA9EECF7A8")
    ksChooseBodies : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksChooseBodiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksChooseBodies * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksChooseBodies * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksChooseBodies * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksChooseBodies * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksChooseBodies * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksChooseBodies * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksChooseBodies * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksChooseBodiesVtbl;

    interface ksChooseBodies
    {
        CONST_VTBL struct ksChooseBodiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksChooseBodies_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksChooseBodies_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksChooseBodies_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksChooseBodies_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksChooseBodies_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksChooseBodies_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksChooseBodies_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksChooseBodies_DISPINTERFACE_DEFINED__ */


#ifndef __ksAggregateDefinition_DISPINTERFACE_DEFINED__
#define __ksAggregateDefinition_DISPINTERFACE_DEFINED__

/* dispinterface ksAggregateDefinition */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksAggregateDefinition,0x44277B89,0xEEB4,0x456c,0x8E,0xF9,0x2D,0xC4,0x8D,0x61,0xEC,0x91);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("44277B89-EEB4-456c-8EF9-2DC48D61EC91")
    ksAggregateDefinition : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksAggregateDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksAggregateDefinition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksAggregateDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksAggregateDefinition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksAggregateDefinition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksAggregateDefinition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksAggregateDefinition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksAggregateDefinition * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksAggregateDefinitionVtbl;

    interface ksAggregateDefinition
    {
        CONST_VTBL struct ksAggregateDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksAggregateDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksAggregateDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksAggregateDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksAggregateDefinition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksAggregateDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksAggregateDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksAggregateDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksAggregateDefinition_DISPINTERFACE_DEFINED__ */


#ifndef __ksPolyLineVertexParam_DISPINTERFACE_DEFINED__
#define __ksPolyLineVertexParam_DISPINTERFACE_DEFINED__

/* dispinterface ksPolyLineVertexParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksPolyLineVertexParam,0x1BCC4F0F,0x1091,0x41a3,0x89,0x5B,0x06,0x08,0xD2,0x07,0x15,0xB7);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1BCC4F0F-1091-41a3-895B-0608D20715B7")
    ksPolyLineVertexParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksPolyLineVertexParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksPolyLineVertexParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksPolyLineVertexParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksPolyLineVertexParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksPolyLineVertexParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksPolyLineVertexParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksPolyLineVertexParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksPolyLineVertexParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksPolyLineVertexParamVtbl;

    interface ksPolyLineVertexParam
    {
        CONST_VTBL struct ksPolyLineVertexParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksPolyLineVertexParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksPolyLineVertexParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksPolyLineVertexParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksPolyLineVertexParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksPolyLineVertexParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksPolyLineVertexParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksPolyLineVertexParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksPolyLineVertexParam_DISPINTERFACE_DEFINED__ */


#ifndef __ksChangeLeaderParam_DISPINTERFACE_DEFINED__
#define __ksChangeLeaderParam_DISPINTERFACE_DEFINED__

/* dispinterface ksChangeLeaderParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksChangeLeaderParam,0x391938AE,0x79B6,0x4e3b,0x98,0x15,0xAC,0x1A,0x31,0xD9,0xEA,0x9D);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("391938AE-79B6-4e3b-9815-AC1A31D9EA9D")
    ksChangeLeaderParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksChangeLeaderParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksChangeLeaderParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksChangeLeaderParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksChangeLeaderParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksChangeLeaderParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksChangeLeaderParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksChangeLeaderParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksChangeLeaderParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksChangeLeaderParamVtbl;

    interface ksChangeLeaderParam
    {
        CONST_VTBL struct ksChangeLeaderParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksChangeLeaderParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksChangeLeaderParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksChangeLeaderParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksChangeLeaderParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksChangeLeaderParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksChangeLeaderParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksChangeLeaderParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksChangeLeaderParam_DISPINTERFACE_DEFINED__ */


DEFINE_GUID(CLSID_Application,0x6B0B5194,0x4ACD,0x4095,0x9B,0xC1,0x11,0x17,0x9F,0xBB,0xB0,0x5A);

#ifdef __cplusplus

class DECLSPEC_UUID("6B0B5194-4ACD-4095-9BC1-11179FBBB05A")
Application;
#endif

DEFINE_GUID(CLSID_KompasInvisible5,0xFBE002A6,0x1E06,0x4703,0xAE,0xC5,0x9A,0xD8,0xA1,0x0F,0xA1,0xFA);

#ifdef __cplusplus

class DECLSPEC_UUID("FBE002A6-1E06-4703-AEC5-9AD8A10FA1FA")
KompasInvisible5;
#endif

DEFINE_GUID(CLSID_Document2DNotify,0x1B9B9B4E,0xDCD7,0x496e,0xA5,0x83,0x54,0x7E,0xC1,0xE9,0x1E,0x47);

#ifdef __cplusplus

class DECLSPEC_UUID("1B9B9B4E-DCD7-496e-A583-547EC1E91E47")
Document2DNotify;
#endif

DEFINE_GUID(CLSID_Object2DNotify,0xC7EBA9A1,0x9E76,0x436e,0xB3,0x62,0xA8,0x0C,0x57,0x63,0x94,0x4C);

#ifdef __cplusplus

class DECLSPEC_UUID("C7EBA9A1-9E76-436e-B362-A80C5763944C")
Object2DNotify;
#endif

DEFINE_GUID(CLSID_Object3DNotify,0xCA35F3C6,0x7E2D,0x4700,0xBE,0x12,0xBA,0xA2,0x6D,0xC1,0x94,0x5B);

#ifdef __cplusplus

class DECLSPEC_UUID("CA35F3C6-7E2D-4700-BE12-BAA26DC1945B")
Object3DNotify;
#endif

DEFINE_GUID(CLSID_Object2DNotifyResult,0xDE8219EC,0x0A9F,0x44e1,0xAC,0x2B,0xF1,0x72,0x69,0x48,0x4F,0xFF);

#ifdef __cplusplus

class DECLSPEC_UUID("DE8219EC-0A9F-44e1-AC2B-F17269484FFF")
Object2DNotifyResult;
#endif

DEFINE_GUID(CLSID_FeatureCollection,0x87CD4F95,0x083C,0x4514,0xB8,0xB4,0x02,0x5C,0x89,0x07,0xD8,0xF1);

#ifdef __cplusplus

class DECLSPEC_UUID("87CD4F95-083C-4514-B8B4-025C8907D8F1")
FeatureCollection;
#endif

DEFINE_GUID(CLSID_Placement,0x2DFACC66,0xC4A4,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("2DFACC66-C4A4-11D6-8734-00C0262CDD2C")
Placement;
#endif

DEFINE_GUID(CLSID_Object3DNotifyResult,0x600F12DF,0xD8B8,0x4ca8,0xA4,0x76,0xD2,0xA7,0xE4,0x25,0xC7,0x40);

#ifdef __cplusplus

class DECLSPEC_UUID("600F12DF-D8B8-4ca8-A476-D2A7E425C740")
Object3DNotifyResult;
#endif

DEFINE_GUID(CLSID_Document3DNotifyResult,0x129E9083,0xE4D2,0x4991,0xB6,0x9F,0x70,0xB6,0x96,0xAD,0x1A,0x55);

#ifdef __cplusplus

class DECLSPEC_UUID("129E9083-E4D2-4991-B69F-70B696AD1A55")
Document3DNotifyResult;
#endif

DEFINE_GUID(CLSID_SelectionMngNotify,0xDC2E4057,0x7F8E,0x4652,0x86,0x0D,0x6B,0x9E,0x1F,0x6F,0x43,0xAA);

#ifdef __cplusplus

class DECLSPEC_UUID("DC2E4057-7F8E-4652-860D-6B9E1F6F43AA")
SelectionMngNotify;
#endif

DEFINE_GUID(CLSID_Document2D,0x14FD27F5,0xB7FD,0x4276,0xAC,0x2C,0x28,0x04,0xED,0xC3,0x94,0x4F);

#ifdef __cplusplus

class DECLSPEC_UUID("14FD27F5-B7FD-4276-AC2C-2804EDC3944F")
Document2D;
#endif

DEFINE_GUID(CLSID_SpecRoughParam,0x364521A5,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("364521A5-94B5-11D6-8732-00C0262CDD2C")
SpecRoughParam;
#endif

DEFINE_GUID(CLSID_EllipseParam,0x364521A8,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("364521A8-94B5-11D6-8732-00C0262CDD2C")
EllipseParam;
#endif

DEFINE_GUID(CLSID_EllipseArcParam,0x364521AB,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("364521AB-94B5-11D6-8732-00C0262CDD2C")
EllipseArcParam;
#endif

DEFINE_GUID(CLSID_EllipseArcParam1,0x364521AE,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("364521AE-94B5-11D6-8732-00C0262CDD2C")
EllipseArcParam1;
#endif

DEFINE_GUID(CLSID_EquidistantParam,0x364521B1,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("364521B1-94B5-11D6-8732-00C0262CDD2C")
EquidistantParam;
#endif

DEFINE_GUID(CLSID_ParagraphParam,0x364521B4,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("364521B4-94B5-11D6-8732-00C0262CDD2C")
ParagraphParam;
#endif

DEFINE_GUID(CLSID_TextItemParam,0x364521B9,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("364521B9-94B5-11D6-8732-00C0262CDD2C")
TextItemParam;
#endif

DEFINE_GUID(CLSID_TextLineParam,0x364521BC,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("364521BC-94B5-11D6-8732-00C0262CDD2C")
TextLineParam;
#endif

DEFINE_GUID(CLSID_TextItemFont,0x364521BF,0x94B5,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("364521BF-94B5-11D6-8732-00C0262CDD2C")
TextItemFont;
#endif

DEFINE_GUID(CLSID_CornerParam,0xE79C2503,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("E79C2503-9584-11D6-8732-00C0262CDD2C")
CornerParam;
#endif

DEFINE_GUID(CLSID_ContourParam,0xE79C2506,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("E79C2506-9584-11D6-8732-00C0262CDD2C")
ContourParam;
#endif

DEFINE_GUID(CLSID_LayerParam,0xE79C2509,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("E79C2509-9584-11D6-8732-00C0262CDD2C")
LayerParam;
#endif

DEFINE_GUID(CLSID_LineParam,0xE79C250C,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("E79C250C-9584-11D6-8732-00C0262CDD2C")
LineParam;
#endif

DEFINE_GUID(CLSID_RegularPolygonParam,0xE79C250F,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("E79C250F-9584-11D6-8732-00C0262CDD2C")
RegularPolygonParam;
#endif

DEFINE_GUID(CLSID_RectangleParam,0xE79C2512,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("E79C2512-9584-11D6-8732-00C0262CDD2C")
RectangleParam;
#endif

DEFINE_GUID(CLSID_BaseParam,0xE79C2515,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("E79C2515-9584-11D6-8732-00C0262CDD2C")
BaseParam;
#endif

DEFINE_GUID(CLSID_LtVariant,0xE79C2518,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("E79C2518-9584-11D6-8732-00C0262CDD2C")
LtVariant;
#endif

DEFINE_GUID(CLSID_UserParam,0xE79C251B,0x9584,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("E79C251B-9584-11D6-8732-00C0262CDD2C")
UserParam;
#endif

DEFINE_GUID(CLSID_MathPointParam,0x3198E123,0x9585,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("3198E123-9585-11D6-95CE-00C0262D30E3")
MathPointParam;
#endif

DEFINE_GUID(CLSID_CurvePicture,0x910EC543,0x958D,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("910EC543-958D-11D6-95CE-00C0262D30E3")
CurvePicture;
#endif

DEFINE_GUID(CLSID_CurvePattern,0x910EC546,0x958D,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("910EC546-958D-11D6-95CE-00C0262D30E3")
CurvePattern;
#endif

DEFINE_GUID(CLSID_TAN,0x9F8CA523,0x173C,0x4206,0x8F,0x2A,0xAB,0x22,0x11,0x38,0x69,0x2E);

#ifdef __cplusplus

class DECLSPEC_UUID("9F8CA523-173C-4206-8F2A-AB221138692E")
TAN;
#endif

DEFINE_GUID(CLSID_CON,0x9CC1A2E2,0x29A8,0x49BB,0xAB,0xF6,0x79,0x2F,0xA2,0xD3,0x80,0x14);

#ifdef __cplusplus

class DECLSPEC_UUID("9CC1A2E2-29A8-49BB-ABF6-792FA2D38014")
CON;
#endif

DEFINE_GUID(CLSID_InertiaParam,0x7B8B632E,0x5BDD,0x4EE5,0xB6,0x23,0xDF,0x28,0x80,0xBE,0x0E,0xE4);

#ifdef __cplusplus

class DECLSPEC_UUID("7B8B632E-5BDD-4EE5-B623-DF2880BE0EE4")
InertiaParam;
#endif

DEFINE_GUID(CLSID_MassInertiaParam,0x4693323B,0x42A7,0x42CC,0x90,0x2E,0x71,0x23,0xDD,0x91,0x6F,0xB4);

#ifdef __cplusplus

class DECLSPEC_UUID("4693323B-42A7-42CC-902E-7123DD916FB4")
MassInertiaParam;
#endif

DEFINE_GUID(CLSID_Mathematic2D,0xC77421D3,0x13EC,0x4595,0xA1,0x98,0x67,0x7E,0xFB,0x45,0xAE,0xF3);

#ifdef __cplusplus

class DECLSPEC_UUID("C77421D3-13EC-4595-A198-677EFB45AEF3")
Mathematic2D;
#endif

DEFINE_GUID(CLSID_DynamicArray,0xFD30B325,0x9E27,0x42CA,0xAD,0xCF,0xC3,0x0E,0xEB,0xE0,0xBB,0xB8);

#ifdef __cplusplus

class DECLSPEC_UUID("FD30B325-9E27-42CA-ADCF-C30EEBE0BBB8")
DynamicArray;
#endif

DEFINE_GUID(CLSID_RDimDrawingParam,0x2A4D4544,0x95B3,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("2A4D4544-95B3-11D6-8732-00C0262CDD2C")
RDimDrawingParam;
#endif

DEFINE_GUID(CLSID_RDimSourceParam,0x2A4D4547,0x95B3,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("2A4D4547-95B3-11D6-8732-00C0262CDD2C")
RDimSourceParam;
#endif

DEFINE_GUID(CLSID_RDimParam,0x7F7D6F83,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6F83-97DA-11D6-8732-00C0262CDD2C")
RDimParam;
#endif

DEFINE_GUID(CLSID_LineSegParam,0x7F7D6F86,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6F86-97DA-11D6-8732-00C0262CDD2C")
LineSegParam;
#endif

DEFINE_GUID(CLSID_CircleParam,0x7F7D6F89,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6F89-97DA-11D6-8732-00C0262CDD2C")
CircleParam;
#endif

DEFINE_GUID(CLSID_ArcByAngleParam,0x7F7D6F8C,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6F8C-97DA-11D6-8732-00C0262CDD2C")
ArcByAngleParam;
#endif

DEFINE_GUID(CLSID_ArcByPointParam,0x7F7D6F8F,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6F8F-97DA-11D6-8732-00C0262CDD2C")
ArcByPointParam;
#endif

DEFINE_GUID(CLSID_PointParam,0x7F7D6F92,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6F92-97DA-11D6-8732-00C0262CDD2C")
PointParam;
#endif

DEFINE_GUID(CLSID_HatchParam,0x7F7D6F95,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6F95-97DA-11D6-8732-00C0262CDD2C")
HatchParam;
#endif

DEFINE_GUID(CLSID_TextParam,0x7F7D6F98,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6F98-97DA-11D6-8732-00C0262CDD2C")
TextParam;
#endif

DEFINE_GUID(CLSID_NurbsPointParam,0x7F7D6F9B,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6F9B-97DA-11D6-8732-00C0262CDD2C")
NurbsPointParam;
#endif

DEFINE_GUID(CLSID_DoubleValue,0x7F7D6F9E,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6F9E-97DA-11D6-8732-00C0262CDD2C")
DoubleValue;
#endif

DEFINE_GUID(CLSID_NurbsParam,0x7F7D6FA1,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FA1-97DA-11D6-8732-00C0262CDD2C")
NurbsParam;
#endif

DEFINE_GUID(CLSID_ConicArcParam,0x7F7D6FA4,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FA4-97DA-11D6-8732-00C0262CDD2C")
ConicArcParam;
#endif

DEFINE_GUID(CLSID_CentreParam,0x7F7D6FA7,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FA7-97DA-11D6-8732-00C0262CDD2C")
CentreParam;
#endif

DEFINE_GUID(CLSID_PlacementParam,0x7F7D6FAA,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FAA-97DA-11D6-8732-00C0262CDD2C")
PlacementParam;
#endif

DEFINE_GUID(CLSID_RasterParam,0x7F7D6FAD,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FAD-97DA-11D6-8732-00C0262CDD2C")
RasterParam;
#endif

DEFINE_GUID(CLSID_PolylineParam,0x7F7D6FB0,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FB0-97DA-11D6-8732-00C0262CDD2C")
PolylineParam;
#endif

DEFINE_GUID(CLSID_InsertFragmentParam,0x7F7D6FB3,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FB3-97DA-11D6-8732-00C0262CDD2C")
InsertFragmentParam;
#endif

DEFINE_GUID(CLSID_ViewParam,0x7F7D6FB6,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FB6-97DA-11D6-8732-00C0262CDD2C")
ViewParam;
#endif

DEFINE_GUID(CLSID_LBreakDimSource,0x7F7D6FB9,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FB9-97DA-11D6-8732-00C0262CDD2C")
LBreakDimSource;
#endif

DEFINE_GUID(CLSID_BreakDimDrawing,0x7F7D6FBC,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FBC-97DA-11D6-8732-00C0262CDD2C")
BreakDimDrawing;
#endif

DEFINE_GUID(CLSID_LBreakDimParam,0x7F7D6FBF,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FBF-97DA-11D6-8732-00C0262CDD2C")
LBreakDimParam;
#endif

DEFINE_GUID(CLSID_ABreakDimParam,0x7F7D6FC2,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FC2-97DA-11D6-8732-00C0262CDD2C")
ABreakDimParam;
#endif

DEFINE_GUID(CLSID_InsertFragmentParamEx,0x7F7D6FC5,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FC5-97DA-11D6-8732-00C0262CDD2C")
InsertFragmentParamEx;
#endif

DEFINE_GUID(CLSID_BezierParam,0x7F7D6FC8,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FC8-97DA-11D6-8732-00C0262CDD2C")
BezierParam;
#endif

DEFINE_GUID(CLSID_BezierPointParam,0x7F7D6FCB,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FCB-97DA-11D6-8732-00C0262CDD2C")
BezierPointParam;
#endif

DEFINE_GUID(CLSID_DimTextParam,0x7F7D6FCE,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FCE-97DA-11D6-8732-00C0262CDD2C")
DimTextParam;
#endif

DEFINE_GUID(CLSID_LDimSourceParam,0x7F7D6FD1,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FD1-97DA-11D6-8732-00C0262CDD2C")
LDimSourceParam;
#endif

DEFINE_GUID(CLSID_DimDrawingParam,0x7F7D6FD4,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FD4-97DA-11D6-8732-00C0262CDD2C")
DimDrawingParam;
#endif

DEFINE_GUID(CLSID_LDimParam,0x7F7D6FD7,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FD7-97DA-11D6-8732-00C0262CDD2C")
LDimParam;
#endif

DEFINE_GUID(CLSID_ADimSourceParam,0x7F7D6FDA,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FDA-97DA-11D6-8732-00C0262CDD2C")
ADimSourceParam;
#endif

DEFINE_GUID(CLSID_DimensionPartsParam,0x7F7D6FDD,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FDD-97DA-11D6-8732-00C0262CDD2C")
DimensionPartsParam;
#endif

DEFINE_GUID(CLSID_ADimParam,0x7F7D6FE0,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FE0-97DA-11D6-8732-00C0262CDD2C")
ADimParam;
#endif

DEFINE_GUID(CLSID_RBreakDrawingParam,0x7F7D6FE3,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FE3-97DA-11D6-8732-00C0262CDD2C")
RBreakDrawingParam;
#endif

DEFINE_GUID(CLSID_RBreakDimParam,0x7F7D6FE6,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FE6-97DA-11D6-8732-00C0262CDD2C")
RBreakDimParam;
#endif

DEFINE_GUID(CLSID_QualityItemParam,0x7F7D6FE9,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FE9-97DA-11D6-8732-00C0262CDD2C")
QualityItemParam;
#endif

DEFINE_GUID(CLSID_QualityContensParam,0x7F7D6FEC,0x97DA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("7F7D6FEC-97DA-11D6-8732-00C0262CDD2C")
QualityContensParam;
#endif

DEFINE_GUID(CLSID_Iterator,0xD06C9103,0x98CA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("D06C9103-98CA-11D6-8732-00C0262CDD2C")
Iterator;
#endif

DEFINE_GUID(CLSID_Fragment,0xD06C9106,0x98CA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("D06C9106-98CA-11D6-8732-00C0262CDD2C")
Fragment;
#endif

DEFINE_GUID(CLSID_FragmentLib,0xD06C910C,0x98CA,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("D06C910C-98CA-11D6-8732-00C0262CDD2C")
FragmentLib;
#endif

DEFINE_GUID(CLSID_TechnicalDemandParam,0xFBCC5B83,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("FBCC5B83-996C-11D6-8732-00C0262CDD2C")
TechnicalDemandParam;
#endif

DEFINE_GUID(CLSID_OrdinatedSourceParam,0xFBCC5B86,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("FBCC5B86-996C-11D6-8732-00C0262CDD2C")
OrdinatedSourceParam;
#endif

DEFINE_GUID(CLSID_OrdinatedDimParam,0xFBCC5B89,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("FBCC5B89-996C-11D6-8732-00C0262CDD2C")
OrdinatedDimParam;
#endif

DEFINE_GUID(CLSID_OrdinatedDrawingParam,0xFBCC5B8C,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("FBCC5B8C-996C-11D6-8732-00C0262CDD2C")
OrdinatedDrawingParam;
#endif

DEFINE_GUID(CLSID_SheetSize,0xFBCC5B8F,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("FBCC5B8F-996C-11D6-8732-00C0262CDD2C")
SheetSize;
#endif

DEFINE_GUID(CLSID_StandartSheet,0xFBCC5B92,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("FBCC5B92-996C-11D6-8732-00C0262CDD2C")
StandartSheet;
#endif

DEFINE_GUID(CLSID_SheetPar,0xFBCC5B95,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("FBCC5B95-996C-11D6-8732-00C0262CDD2C")
SheetPar;
#endif

DEFINE_GUID(CLSID_DocumentParam,0xFBCC5B98,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("FBCC5B98-996C-11D6-8732-00C0262CDD2C")
DocumentParam;
#endif

DEFINE_GUID(CLSID_DimensionsOptions,0xFBCC5B9B,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("FBCC5B9B-996C-11D6-8732-00C0262CDD2C")
DimensionsOptions;
#endif

DEFINE_GUID(CLSID_SnapOptions,0xFBCC5B9E,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("FBCC5B9E-996C-11D6-8732-00C0262CDD2C")
SnapOptions;
#endif

DEFINE_GUID(CLSID_LibraryStyleParam,0xFBCC5BA1,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("FBCC5BA1-996C-11D6-8732-00C0262CDD2C")
LibraryStyleParam;
#endif

DEFINE_GUID(CLSID_Stamp,0xFBCC5BA7,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("FBCC5BA7-996C-11D6-8732-00C0262CDD2C")
Stamp;
#endif

DEFINE_GUID(CLSID_SheetOptions,0xFBCC5BAA,0x996C,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("FBCC5BAA-996C-11D6-8732-00C0262CDD2C")
SheetOptions;
#endif

DEFINE_GUID(CLSID_CurvePatternEx,0x910EC54B,0x958D,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("910EC54B-958D-11D6-95CE-00C0262D30E3")
CurvePatternEx;
#endif

DEFINE_GUID(CLSID_CurveStyleParam,0x910EC54E,0x958D,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("910EC54E-958D-11D6-95CE-00C0262D30E3")
CurveStyleParam;
#endif

DEFINE_GUID(CLSID_TextStyleParam,0x3F715E26,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("3F715E26-97D9-11D6-95CE-00C0262D30E3")
TextStyleParam;
#endif

DEFINE_GUID(CLSID_HatchLineParam,0x3F715E29,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("3F715E29-97D9-11D6-95CE-00C0262D30E3")
HatchLineParam;
#endif

DEFINE_GUID(CLSID_HatchStyleParam,0x3F715E2C,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("3F715E2C-97D9-11D6-95CE-00C0262D30E3")
HatchStyleParam;
#endif

DEFINE_GUID(CLSID_RectParam,0x3F715E2F,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("3F715E2F-97D9-11D6-95CE-00C0262D30E3")
RectParam;
#endif

DEFINE_GUID(CLSID_ShelfPar,0x3F715E32,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("3F715E32-97D9-11D6-95CE-00C0262D30E3")
ShelfPar;
#endif

DEFINE_GUID(CLSID_RoughPar,0x3F715E35,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("3F715E35-97D9-11D6-95CE-00C0262D30E3")
RoughPar;
#endif

DEFINE_GUID(CLSID_RoughParam,0x3F715E38,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("3F715E38-97D9-11D6-95CE-00C0262D30E3")
RoughParam;
#endif

DEFINE_GUID(CLSID_Char255,0x3F715E3B,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("3F715E3B-97D9-11D6-95CE-00C0262D30E3")
Char255;
#endif

DEFINE_GUID(CLSID_LeaderParam,0x3F715E42,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("3F715E42-97D9-11D6-95CE-00C0262D30E3")
LeaderParam;
#endif

DEFINE_GUID(CLSID_PosLeaderParam,0x3F715E45,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("3F715E45-97D9-11D6-95CE-00C0262D30E3")
PosLeaderParam;
#endif

DEFINE_GUID(CLSID_BrandLeaderParam,0x3F715E48,0x97D9,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("3F715E48-97D9-11D6-95CE-00C0262D30E3")
BrandLeaderParam;
#endif

DEFINE_GUID(CLSID_MarkerLeaderParam,0x9AF8E343,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("9AF8E343-98A0-11D6-95CE-00C0262D30E3")
MarkerLeaderParam;
#endif

DEFINE_GUID(CLSID_Type1,0x9AF8E346,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("9AF8E346-98A0-11D6-95CE-00C0262D30E3")
Type1;
#endif

DEFINE_GUID(CLSID_Type2,0x9AF8E349,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("9AF8E349-98A0-11D6-95CE-00C0262D30E3")
Type2;
#endif

DEFINE_GUID(CLSID_Type3,0x9AF8E34C,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("9AF8E34C-98A0-11D6-95CE-00C0262D30E3")
Type3;
#endif

DEFINE_GUID(CLSID_Type5,0x9AF8E34F,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("9AF8E34F-98A0-11D6-95CE-00C0262D30E3")
Type5;
#endif

DEFINE_GUID(CLSID_Type6,0x9AF8E352,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("9AF8E352-98A0-11D6-95CE-00C0262D30E3")
Type6;
#endif

DEFINE_GUID(CLSID_Phantom,0x9AF8E355,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("9AF8E355-98A0-11D6-95CE-00C0262D30E3")
Phantom;
#endif

DEFINE_GUID(CLSID_RequestInfo,0x9AF8E358,0x98A0,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("9AF8E358-98A0-11D6-95CE-00C0262D30E3")
RequestInfo;
#endif

DEFINE_GUID(CLSID_ViewPointerParam,0xCD1C0146,0x98DC,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("CD1C0146-98DC-11D6-95CE-00C0262D30E3")
ViewPointerParam;
#endif

DEFINE_GUID(CLSID_CutLineParam,0x4FD7CE83,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CE83-9968-11D6-95CE-00C0262D30E3")
CutLineParam;
#endif

DEFINE_GUID(CLSID_ToleranceBranch,0x4FD7CE86,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CE86-9968-11D6-95CE-00C0262D30E3")
ToleranceBranch;
#endif

DEFINE_GUID(CLSID_ToleranceParam,0x4FD7CE89,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CE89-9968-11D6-95CE-00C0262D30E3")
ToleranceParam;
#endif

DEFINE_GUID(CLSID_SpcColumnParam,0x4FD7CE8C,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CE8C-9968-11D6-95CE-00C0262D30E3")
SpcColumnParam;
#endif

DEFINE_GUID(CLSID_RecordTypeAttrParam,0x4FD7CE8F,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CE8F-9968-11D6-95CE-00C0262D30E3")
RecordTypeAttrParam;
#endif

DEFINE_GUID(CLSID_NumberTypeAttrParam,0x4FD7CE92,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CE92-9968-11D6-95CE-00C0262D30E3")
NumberTypeAttrParam;
#endif

DEFINE_GUID(CLSID_SpcStyleColumnParam,0x4FD7CE95,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CE95-9968-11D6-95CE-00C0262D30E3")
SpcStyleColumnParam;
#endif

DEFINE_GUID(CLSID_SpcStyleSectionParam,0x4FD7CE98,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CE98-9968-11D6-95CE-00C0262D30E3")
SpcStyleSectionParam;
#endif

DEFINE_GUID(CLSID_SpcSubSectionParam,0x4FD7CE9B,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CE9B-9968-11D6-95CE-00C0262D30E3")
SpcSubSectionParam;
#endif

DEFINE_GUID(CLSID_SpcTuningSectionParam,0x4FD7CE9E,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CE9E-9968-11D6-95CE-00C0262D30E3")
SpcTuningSectionParam;
#endif

DEFINE_GUID(CLSID_SpcTuningStyleParam,0x4FD7CEA1,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CEA1-9968-11D6-95CE-00C0262D30E3")
SpcTuningStyleParam;
#endif

DEFINE_GUID(CLSID_SpcStyleParam,0x4FD7CEA4,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CEA4-9968-11D6-95CE-00C0262D30E3")
SpcStyleParam;
#endif

DEFINE_GUID(CLSID_SpcDescrParam,0x4FD7CEA7,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CEA7-9968-11D6-95CE-00C0262D30E3")
SpcDescrParam;
#endif

DEFINE_GUID(CLSID_DocAttachedSpcParam,0x4FD7CEAA,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CEAA-9968-11D6-95CE-00C0262D30E3")
DocAttachedSpcParam;
#endif

DEFINE_GUID(CLSID_SpcObjParam,0x4FD7CEAD,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CEAD-9968-11D6-95CE-00C0262D30E3")
SpcObjParam;
#endif

DEFINE_GUID(CLSID_LibStyle,0x4FD7CEB0,0x9968,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("4FD7CEB0-9968-11D6-95CE-00C0262D30E3")
LibStyle;
#endif

DEFINE_GUID(CLSID_DataBaseObject,0x0981CD03,0x9A49,0x11D6,0x87,0x32,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0981CD03-9A49-11D6-8732-00C0262CDD2C")
DataBaseObject;
#endif

DEFINE_GUID(CLSID_SpcDocumentNotify,0xDC32EB43,0x4615,0x4717,0x8C,0x67,0x48,0x87,0x5A,0x35,0x7B,0x06);

#ifdef __cplusplus

class DECLSPEC_UUID("DC32EB43-4615-4717-8C67-48875A357B06")
SpcDocumentNotify;
#endif

DEFINE_GUID(CLSID_SpcDocument,0x51E74523,0x9A3A,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("51E74523-9A3A-11D6-95CE-00C0262D30E3")
SpcDocument;
#endif

DEFINE_GUID(CLSID_SpcObjectNotify,0x02CBC423,0xBC8C,0x40de,0xBE,0x65,0x03,0xA6,0x7D,0xF1,0xC8,0x34);

#ifdef __cplusplus

class DECLSPEC_UUID("02CBC423-BC8C-40de-BE65-03A67DF1C834")
SpcObjectNotify;
#endif

DEFINE_GUID(CLSID_Specification,0x51E74526,0x9A3A,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("51E74526-9A3A-11D6-95CE-00C0262D30E3")
Specification;
#endif

DEFINE_GUID(CLSID_DocumentTxt,0x74D745F3,0x9A3A,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("74D745F3-9A3A-11D6-95CE-00C0262D30E3")
DocumentTxt;
#endif

DEFINE_GUID(CLSID_AttributeTypeParam,0xCC26DA63,0x9B22,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("CC26DA63-9B22-11D6-95CE-00C0262D30E3")
AttributeTypeParam;
#endif

DEFINE_GUID(CLSID_ColumnInfoParam,0xCE0D05E3,0x9B2A,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("CE0D05E3-9B2A-11D6-95CE-00C0262D30E3")
ColumnInfoParam;
#endif

DEFINE_GUID(CLSID_AttributeParam,0xCE0D05E6,0x9B2A,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("CE0D05E6-9B2A-11D6-95CE-00C0262D30E3")
AttributeParam;
#endif

DEFINE_GUID(CLSID_Variable,0x508A0CC3,0x9D74,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("508A0CC3-9D74-11D6-95CE-00C0262D30E3")
Variable;
#endif

DEFINE_GUID(CLSID_LibraryAttrTypeParam,0xFA93AA23,0x9B3D,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("FA93AA23-9B3D-11D6-95CE-00C0262D30E3")
LibraryAttrTypeParam;
#endif

DEFINE_GUID(CLSID_AttributeObject,0xFA93AA26,0x9B3D,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("FA93AA26-9B3D-11D6-95CE-00C0262D30E3")
AttributeObject;
#endif

DEFINE_GUID(CLSID_RequestInfo3D,0xE9807826,0x9D55,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("E9807826-9D55-11D6-95CE-00C0262D30E3")
RequestInfo3D;
#endif

DEFINE_GUID(CLSID_MateConstraint,0x508A0CC6,0x9D74,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("508A0CC6-9D74-11D6-95CE-00C0262D30E3")
MateConstraint;
#endif

DEFINE_GUID(CLSID_DefaultObject,0x508A0CC9,0x9D74,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("508A0CC9-9D74-11D6-95CE-00C0262D30E3")
DefaultObject;
#endif

DEFINE_GUID(CLSID_Entity,0x508A0CCC,0x9D74,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("508A0CCC-9D74-11D6-95CE-00C0262D30E3")
Entity;
#endif

DEFINE_GUID(CLSID_Part,0x508A0CCF,0x9D74,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("508A0CCF-9D74-11D6-95CE-00C0262D30E3")
Part;
#endif

DEFINE_GUID(CLSID_Document3DNotify,0x22B81342,0x42D6,0x4907,0xA9,0x1E,0xF7,0x5A,0x95,0x9F,0x22,0x70);

#ifdef __cplusplus

class DECLSPEC_UUID("22B81342-42D6-4907-A91E-F75A959F2270")
Document3DNotify;
#endif

DEFINE_GUID(CLSID_Document3D,0x111CEFE3,0xA0A7,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("111CEFE3-A0A7-11D6-95CE-00C0262D30E3")
Document3D;
#endif

DEFINE_GUID(CLSID_ModelLibrary,0x111CEFE6,0xA0A7,0x11D6,0x95,0xCE,0x00,0xC0,0x26,0x2D,0x30,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("111CEFE6-A0A7-11D6-95CE-00C0262D30E3")
ModelLibrary;
#endif

DEFINE_GUID(CLSID_EntityCollection,0xB0170143,0xC02C,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("B0170143-C02C-11D6-8734-00C0262CDD2C")
EntityCollection;
#endif

DEFINE_GUID(CLSID_VariableCollection,0x03CEAC83,0xC0B8,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("03CEAC83-C0B8-11D6-8734-00C0262CDD2C")
VariableCollection;
#endif

DEFINE_GUID(CLSID_MateConstraintCollection,0x03CEAC86,0xC0B8,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("03CEAC86-C0B8-11D6-8734-00C0262CDD2C")
MateConstraintCollection;
#endif

DEFINE_GUID(CLSID_PartCollection,0x03CEAC89,0xC0B8,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("03CEAC89-C0B8-11D6-8734-00C0262CDD2C")
PartCollection;
#endif

DEFINE_GUID(CLSID_MeshPartArrayDefinition,0xE6E78D63,0xC0FA,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("E6E78D63-C0FA-11D6-8734-00C0262CDD2C")
MeshPartArrayDefinition;
#endif

DEFINE_GUID(CLSID_CircularPartArrayDefinition,0xDDD05145,0xC180,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DDD05145-C180-11D6-8734-00C0262CDD2C")
CircularPartArrayDefinition;
#endif

DEFINE_GUID(CLSID_CurvePartArrayDefinition,0xDDD05148,0xC180,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DDD05148-C180-11D6-8734-00C0262CDD2C")
CurvePartArrayDefinition;
#endif

DEFINE_GUID(CLSID_DerivativePartArrayDefinition,0xDDD0514B,0xC180,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DDD0514B-C180-11D6-8734-00C0262CDD2C")
DerivativePartArrayDefinition;
#endif

DEFINE_GUID(CLSID_Axis2PlanesDefinition,0x0307BB83,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BB83-C193-11D6-8734-00C0262CDD2C")
Axis2PlanesDefinition;
#endif

DEFINE_GUID(CLSID_AxisOperationsDefinition,0x0307BB86,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BB86-C193-11D6-8734-00C0262CDD2C")
AxisOperationsDefinition;
#endif

DEFINE_GUID(CLSID_Axis2PointsDefinition,0x0307BB89,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BB89-C193-11D6-8734-00C0262CDD2C")
Axis2PointsDefinition;
#endif

DEFINE_GUID(CLSID_AxisEdgeDefinition,0x0307BB8C,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BB8C-C193-11D6-8734-00C0262CDD2C")
AxisEdgeDefinition;
#endif

DEFINE_GUID(CLSID_MeshCopyDefinition,0x0307BB8F,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BB8F-C193-11D6-8734-00C0262CDD2C")
MeshCopyDefinition;
#endif

DEFINE_GUID(CLSID_CircularCopyDefinition,0x0307BB92,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BB92-C193-11D6-8734-00C0262CDD2C")
CircularCopyDefinition;
#endif

DEFINE_GUID(CLSID_CurveCopyDefinition,0x0307BB95,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BB95-C193-11D6-8734-00C0262CDD2C")
CurveCopyDefinition;
#endif

DEFINE_GUID(CLSID_MirrorCopyDefinition,0x0307BB98,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BB98-C193-11D6-8734-00C0262CDD2C")
MirrorCopyDefinition;
#endif

DEFINE_GUID(CLSID_MirrorCopyAllDefinition,0x0307BB9B,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BB9B-C193-11D6-8734-00C0262CDD2C")
MirrorCopyAllDefinition;
#endif

DEFINE_GUID(CLSID_ConicSpiralDefinition,0x0307BB9E,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BB9E-C193-11D6-8734-00C0262CDD2C")
ConicSpiralDefinition;
#endif

DEFINE_GUID(CLSID_CylindricSpiralDefinition,0x0307BBA1,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BBA1-C193-11D6-8734-00C0262CDD2C")
CylindricSpiralDefinition;
#endif

DEFINE_GUID(CLSID_PolyLineDefinition,0x0307BBA4,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BBA4-C193-11D6-8734-00C0262CDD2C")
PolyLineDefinition;
#endif

DEFINE_GUID(CLSID_SplineDefinition,0x0307BBA7,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BBA7-C193-11D6-8734-00C0262CDD2C")
SplineDefinition;
#endif

DEFINE_GUID(CLSID_FaceDefinition,0x0307BBAA,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BBAA-C193-11D6-8734-00C0262CDD2C")
FaceDefinition;
#endif

DEFINE_GUID(CLSID_EdgeDefinition,0x0307BBAD,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BBAD-C193-11D6-8734-00C0262CDD2C")
EdgeDefinition;
#endif

DEFINE_GUID(CLSID_ChamferDefinition,0x0307BBB0,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BBB0-C193-11D6-8734-00C0262CDD2C")
ChamferDefinition;
#endif

DEFINE_GUID(CLSID_FilletDefinition,0x0307BBB3,0xC193,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("0307BBB3-C193-11D6-8734-00C0262CDD2C")
FilletDefinition;
#endif

DEFINE_GUID(CLSID_BaseExtrusionDefinition,0xDEEFEFE3,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFEFE3-C3E2-11D6-8734-00C0262CDD2C")
BaseExtrusionDefinition;
#endif

DEFINE_GUID(CLSID_BossExtrusionDefinition,0xDEEFEFE6,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFEFE6-C3E2-11D6-8734-00C0262CDD2C")
BossExtrusionDefinition;
#endif

DEFINE_GUID(CLSID_CutExtrusionDefinition,0xDEEFEFE9,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFEFE9-C3E2-11D6-8734-00C0262CDD2C")
CutExtrusionDefinition;
#endif

DEFINE_GUID(CLSID_ExtrusionSurfaceDefinition,0x31E66F64,0xB93D,0x4196,0xB3,0xFE,0xB6,0xCC,0xB6,0x79,0x61,0x0F);

#ifdef __cplusplus

class DECLSPEC_UUID("31E66F64-B93D-4196-B3FE-B6CCB679610F")
ExtrusionSurfaceDefinition;
#endif

DEFINE_GUID(CLSID_BaseLoftDefinition,0xDEEFEFEC,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFEFEC-C3E2-11D6-8734-00C0262CDD2C")
BaseLoftDefinition;
#endif

DEFINE_GUID(CLSID_BossLoftDefinition,0xDEEFEFEF,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFEFEF-C3E2-11D6-8734-00C0262CDD2C")
BossLoftDefinition;
#endif

DEFINE_GUID(CLSID_CutLoftDefinition,0xDEEFEFF2,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFEFF2-C3E2-11D6-8734-00C0262CDD2C")
CutLoftDefinition;
#endif

DEFINE_GUID(CLSID_LoftSurfaceDefinition,0x5E1EB940,0x4CAE,0x43de,0xB5,0x6D,0x87,0x33,0xFF,0x67,0x07,0xDF);

#ifdef __cplusplus

class DECLSPEC_UUID("5E1EB940-4CAE-43de-B56D-8733FF6707DF")
LoftSurfaceDefinition;
#endif

DEFINE_GUID(CLSID_InclineDefinition,0xDEEFEFF5,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFEFF5-C3E2-11D6-8734-00C0262CDD2C")
InclineDefinition;
#endif

DEFINE_GUID(CLSID_ShellDefinition,0xDEEFEFF8,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFEFF8-C3E2-11D6-8734-00C0262CDD2C")
ShellDefinition;
#endif

DEFINE_GUID(CLSID_BaseEvolutionDefinition,0xDEEFEFFB,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFEFFB-C3E2-11D6-8734-00C0262CDD2C")
BaseEvolutionDefinition;
#endif

DEFINE_GUID(CLSID_BossEvolutionDefinition,0xDEEFEFFE,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFEFFE-C3E2-11D6-8734-00C0262CDD2C")
BossEvolutionDefinition;
#endif

DEFINE_GUID(CLSID_CutEvolutionDefinition,0xDEEFF001,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF001-C3E2-11D6-8734-00C0262CDD2C")
CutEvolutionDefinition;
#endif

DEFINE_GUID(CLSID_EvolutionSurfaceDefinition,0xDB947005,0xAA19,0x4ed2,0x97,0x75,0xE7,0xBD,0x80,0xBE,0x87,0x2E);

#ifdef __cplusplus

class DECLSPEC_UUID("DB947005-AA19-4ed2-9775-E7BD80BE872E")
EvolutionSurfaceDefinition;
#endif

DEFINE_GUID(CLSID_RibDefinition,0xDEEFF004,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF004-C3E2-11D6-8734-00C0262CDD2C")
RibDefinition;
#endif

DEFINE_GUID(CLSID_CutByPlaneDefinition,0xDEEFF007,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF007-C3E2-11D6-8734-00C0262CDD2C")
CutByPlaneDefinition;
#endif

DEFINE_GUID(CLSID_CutBySketchDefinition,0xDEEFF00A,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF00A-C3E2-11D6-8734-00C0262CDD2C")
CutBySketchDefinition;
#endif

DEFINE_GUID(CLSID_PlaneOffsetDefinition,0xDEEFF00D,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF00D-C3E2-11D6-8734-00C0262CDD2C")
PlaneOffsetDefinition;
#endif

DEFINE_GUID(CLSID_PlaneAngleDefinition,0xDEEFF010,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF010-C3E2-11D6-8734-00C0262CDD2C")
PlaneAngleDefinition;
#endif

DEFINE_GUID(CLSID_Plane3PointsDefinition,0xDEEFF013,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF013-C3E2-11D6-8734-00C0262CDD2C")
Plane3PointsDefinition;
#endif

DEFINE_GUID(CLSID_PlaneNormalToSurfaceDefinition,0xDEEFF016,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF016-C3E2-11D6-8734-00C0262CDD2C")
PlaneNormalToSurfaceDefinition;
#endif

DEFINE_GUID(CLSID_PlaneTangentToSurfaceDefinition,0xDEEFF019,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF019-C3E2-11D6-8734-00C0262CDD2C")
PlaneTangentToSurfaceDefinition;
#endif

DEFINE_GUID(CLSID_PlaneEdgePointDefinition,0xDEEFF01C,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF01C-C3E2-11D6-8734-00C0262CDD2C")
PlaneEdgePointDefinition;
#endif

DEFINE_GUID(CLSID_PlaneParallelDefinition,0xDEEFF01F,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF01F-C3E2-11D6-8734-00C0262CDD2C")
PlaneParallelDefinition;
#endif

DEFINE_GUID(CLSID_PlanePerpendicularDefinition,0xDEEFF022,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF022-C3E2-11D6-8734-00C0262CDD2C")
PlanePerpendicularDefinition;
#endif

DEFINE_GUID(CLSID_PlaneLineToEdgeDefinition,0xDEEFF025,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF025-C3E2-11D6-8734-00C0262CDD2C")
PlaneLineToEdgeDefinition;
#endif

DEFINE_GUID(CLSID_PlaneLineToPlaneDefinition,0xDEEFF028,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF028-C3E2-11D6-8734-00C0262CDD2C")
PlaneLineToPlaneDefinition;
#endif

DEFINE_GUID(CLSID_ThinParam,0xDEEFF02B,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF02B-C3E2-11D6-8734-00C0262CDD2C")
ThinParam;
#endif

DEFINE_GUID(CLSID_ExtrusionParam,0xDEEFF02E,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF02E-C3E2-11D6-8734-00C0262CDD2C")
ExtrusionParam;
#endif

DEFINE_GUID(CLSID_RotatedParam,0xDEEFF031,0xC3E2,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("DEEFF031-C3E2-11D6-8734-00C0262CDD2C")
RotatedParam;
#endif

DEFINE_GUID(CLSID_ColorParam,0x2DFACC63,0xC4A4,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("2DFACC63-C4A4-11D6-8734-00C0262CDD2C")
ColorParam;
#endif

DEFINE_GUID(CLSID_BaseRotatedDefinition,0x2DFACC69,0xC4A4,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("2DFACC69-C4A4-11D6-8734-00C0262CDD2C")
BaseRotatedDefinition;
#endif

DEFINE_GUID(CLSID_BossRotatedDefinition,0x2DFACC6C,0xC4A4,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("2DFACC6C-C4A4-11D6-8734-00C0262CDD2C")
BossRotatedDefinition;
#endif

DEFINE_GUID(CLSID_CutRotatedDefinition,0x2DFACC6F,0xC4A4,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("2DFACC6F-C4A4-11D6-8734-00C0262CDD2C")
CutRotatedDefinition;
#endif

DEFINE_GUID(CLSID_RotatedSurfaceDefinition,0x8B9ECAF3,0x172D,0x4f4b,0xBF,0x51,0x33,0xC1,0x77,0xB8,0x7F,0xF2);

#ifdef __cplusplus

class DECLSPEC_UUID("8B9ECAF3-172D-4f4b-BF51-33C177B87FF2")
RotatedSurfaceDefinition;
#endif

DEFINE_GUID(CLSID_SketchDefinition,0x2DFACC72,0xC4A4,0x11D6,0x87,0x34,0x00,0xC0,0x26,0x2C,0xDD,0x2C);

#ifdef __cplusplus

class DECLSPEC_UUID("2DFACC72-C4A4-11D6-8734-00C0262CDD2C")
SketchDefinition;
#endif

DEFINE_GUID(CLSID_RasterFormatParam,0xCD6054FC,0xD754,0x4139,0x8C,0xD9,0x38,0x1F,0x74,0x88,0xA6,0xC7);

#ifdef __cplusplus

class DECLSPEC_UUID("CD6054FC-D754-4139-8CD9-381F7488A6C7")
RasterFormatParam;
#endif

DEFINE_GUID(CLSID_AdditionFormatParam,0x13DF9CCA,0x122C,0x4cec,0x87,0xFA,0xCF,0x16,0x81,0x8E,0x01,0x3A);

#ifdef __cplusplus

class DECLSPEC_UUID("13DF9CCA-122C-4cec-87FA-CF16818E013A")
AdditionFormatParam;
#endif

DEFINE_GUID(CLSID_ConstraintParam,0x77C095F7,0x3ABC,0x4292,0xB9,0xE1,0xC1,0x12,0x62,0x0A,0xFC,0x56);

#ifdef __cplusplus

class DECLSPEC_UUID("77C095F7-3ABC-4292-B9E1-C112620AFC56")
ConstraintParam;
#endif

DEFINE_GUID(CLSID_ImportedSurfaceDefinition,0x102FA83C,0xE0D6,0x4db5,0x93,0x7A,0xFC,0x14,0x95,0x26,0x89,0x9A);

#ifdef __cplusplus

class DECLSPEC_UUID("102FA83C-E0D6-4db5-937A-FC149526899A")
ImportedSurfaceDefinition;
#endif

DEFINE_GUID(CLSID_FaceCollection,0xCB7B9677,0x9F62,0x473e,0x96,0x63,0xAD,0x51,0x6B,0x5F,0x37,0xB5);

#ifdef __cplusplus

class DECLSPEC_UUID("CB7B9677-9F62-473e-9663-AD516B5F37B5")
FaceCollection;
#endif

DEFINE_GUID(CLSID_VertexDefinition,0x5CE6E053,0x3EC8,0x427b,0xBC,0xB5,0x82,0xB0,0x1D,0x4B,0xCB,0xF3);

#ifdef __cplusplus

class DECLSPEC_UUID("5CE6E053-3EC8-427b-BCB5-82B01D4BCBF3")
VertexDefinition;
#endif

DEFINE_GUID(CLSID_Feature,0x1978BA1C,0xEE2F,0x48ed,0x86,0xD7,0xB1,0x50,0x65,0xB3,0x6E,0x4A);

#ifdef __cplusplus

class DECLSPEC_UUID("1978BA1C-EE2F-48ed-86D7-B15065B36E4A")
Feature;
#endif

DEFINE_GUID(CLSID_Tessellation,0x923A48A1,0xC159,0x4959,0xB1,0x3E,0xE8,0xC5,0x58,0x53,0x4C,0x89);

#ifdef __cplusplus

class DECLSPEC_UUID("923A48A1-C159-4959-B13E-E8C558534C89")
Tessellation;
#endif

DEFINE_GUID(CLSID_Facet,0xF7F45063,0x0B37,0x40b1,0xB3,0xAD,0xBB,0x0A,0x54,0x5E,0xC2,0xC8);

#ifdef __cplusplus

class DECLSPEC_UUID("F7F45063-0B37-40b1-B3AD-BB0A545EC2C8")
Facet;
#endif

DEFINE_GUID(CLSID_Measurer,0xE07C6920,0xE361,0x4a4d,0x91,0x40,0x95,0x96,0x9C,0x26,0xA9,0xED);

#ifdef __cplusplus

class DECLSPEC_UUID("E07C6920-E361-4a4d-9140-95969C26A9ED")
Measurer;
#endif

DEFINE_GUID(CLSID_BodyCollection,0xEEEAB203,0x43D8,0x4f04,0xA7,0xCE,0x01,0x0D,0x9B,0xA4,0x19,0xC2);

#ifdef __cplusplus

class DECLSPEC_UUID("EEEAB203-43D8-4f04-A7CE-010D9BA419C2")
BodyCollection;
#endif

DEFINE_GUID(CLSID_Body,0xA99FFD41,0xAA46,0x4bfc,0xB6,0xF2,0x32,0xE1,0xA9,0x56,0xE0,0xB1);

#ifdef __cplusplus

class DECLSPEC_UUID("A99FFD41-AA46-4bfc-B6F2-32E1A956E0B1")
Body;
#endif

DEFINE_GUID(CLSID_Surface,0xB1C40242,0xCD49,0x4207,0xB7,0x28,0xB6,0x70,0x57,0xBE,0xC3,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("B1C40242-CD49-4207-B728-B67057BEC339")
Surface;
#endif

DEFINE_GUID(CLSID_EdgeCollection,0x7519BF63,0x27B3,0x415f,0xAC,0x25,0x90,0x49,0x10,0xCB,0x27,0xB5);

#ifdef __cplusplus

class DECLSPEC_UUID("7519BF63-27B3-415f-AC25-904910CB27B5")
EdgeCollection;
#endif

DEFINE_GUID(CLSID_OrientedEdge,0xC66FB80F,0x97BE,0x4437,0xA8,0xA0,0xAE,0xDC,0xFC,0xBC,0xF9,0x82);

#ifdef __cplusplus

class DECLSPEC_UUID("C66FB80F-97BE-4437-A8A0-AEDCFCBCF982")
OrientedEdge;
#endif

DEFINE_GUID(CLSID_OrientedEdgeCollection,0x6EF08DCB,0xA1D4,0x43a2,0xAC,0xAF,0xAF,0x32,0xFD,0xE5,0xF3,0x38);

#ifdef __cplusplus

class DECLSPEC_UUID("6EF08DCB-A1D4-43a2-ACAF-AF32FDE5F338")
OrientedEdgeCollection;
#endif

DEFINE_GUID(CLSID_Loop,0x38386E28,0xC404,0x431e,0x9F,0x30,0x5B,0xE4,0x4B,0x0F,0x28,0x3F);

#ifdef __cplusplus

class DECLSPEC_UUID("38386E28-C404-431e-9F30-5BE44B0F283F")
Loop;
#endif

DEFINE_GUID(CLSID_LoopCollection,0x3EA3B143,0x96A5,0x408a,0x89,0x7E,0x27,0xD8,0x52,0xE6,0xEE,0x9B);

#ifdef __cplusplus

class DECLSPEC_UUID("3EA3B143-96A5-408a-897E-27D852E6EE9B")
LoopCollection;
#endif

DEFINE_GUID(CLSID_Curve3D,0x54152184,0x0B08,0x4dfb,0x82,0x49,0x45,0x79,0xA7,0x36,0x8B,0xF4);

#ifdef __cplusplus

class DECLSPEC_UUID("54152184-0B08-4dfb-8249-4579A7368BF4")
Curve3D;
#endif

DEFINE_GUID(CLSID_LineSeg3dParam,0x4D295A34,0x4F20,0x4231,0x88,0x06,0x78,0xE4,0x02,0x13,0xFA,0x72);

#ifdef __cplusplus

class DECLSPEC_UUID("4D295A34-4F20-4231-8806-78E40213FA72")
LineSeg3dParam;
#endif

DEFINE_GUID(CLSID_Circle3dParam,0x4E96B6C2,0xBF75,0x4b32,0xA4,0xE7,0x72,0x67,0xF6,0x0A,0x25,0x93);

#ifdef __cplusplus

class DECLSPEC_UUID("4E96B6C2-BF75-4b32-A4E7-7267F60A2593")
Circle3dParam;
#endif

DEFINE_GUID(CLSID_Ellipse3dParam,0x33583282,0x14FB,0x4975,0xB0,0x40,0x92,0x67,0xA6,0x39,0xE3,0x40);

#ifdef __cplusplus

class DECLSPEC_UUID("33583282-14FB-4975-B040-9267A639E340")
Ellipse3dParam;
#endif

DEFINE_GUID(CLSID_PlaneParam,0x94A91D78,0x30AE,0x4b04,0xAE,0xE2,0xB0,0x98,0xD3,0x27,0x06,0x02);

#ifdef __cplusplus

class DECLSPEC_UUID("94A91D78-30AE-4b04-AEE2-B098D3270602")
PlaneParam;
#endif

DEFINE_GUID(CLSID_ConeParam,0x3940C963,0x446D,0x4701,0x88,0x3C,0xA9,0x3B,0xBD,0xAC,0x54,0x69);

#ifdef __cplusplus

class DECLSPEC_UUID("3940C963-446D-4701-883C-A93BBDAC5469")
ConeParam;
#endif

DEFINE_GUID(CLSID_CylinderParam,0x379D658E,0x47BB,0x414f,0xA9,0x52,0xFB,0x41,0x03,0x7F,0x17,0xAC);

#ifdef __cplusplus

class DECLSPEC_UUID("379D658E-47BB-414f-A952-FB41037F17AC")
CylinderParam;
#endif

DEFINE_GUID(CLSID_SphereParam,0xC82A3D03,0x4BEE,0x467f,0x92,0x40,0xC1,0xC5,0x8F,0xDB,0x14,0x4E);

#ifdef __cplusplus

class DECLSPEC_UUID("C82A3D03-4BEE-467f-9240-C1C58FDB144E")
SphereParam;
#endif

DEFINE_GUID(CLSID_TorusParam,0xB7833CCA,0x936D,0x4689,0xBD,0x90,0x90,0xB5,0x20,0x9D,0x94,0xE8);

#ifdef __cplusplus

class DECLSPEC_UUID("B7833CCA-936D-4689-BD90-90B5209D94E8")
TorusParam;
#endif

DEFINE_GUID(CLSID_NurbsPoint3dParam,0x4F3C6D95,0xFBDC,0x4c53,0xAE,0x82,0x9A,0xF9,0xC0,0x50,0x93,0xFF);

#ifdef __cplusplus

class DECLSPEC_UUID("4F3C6D95-FBDC-4c53-AE82-9AF9C05093FF")
NurbsPoint3dParam;
#endif

DEFINE_GUID(CLSID_NurbsSurfaceParam,0xBA13BE42,0x059B,0x4eeb,0x9C,0x39,0x67,0x37,0x32,0x76,0x3E,0xE3);

#ifdef __cplusplus

class DECLSPEC_UUID("BA13BE42-059B-4eeb-9C39-673732763EE3")
NurbsSurfaceParam;
#endif

DEFINE_GUID(CLSID_Nurbs3dParam,0xF829344F,0xB49F,0x43a3,0xAC,0x93,0xE8,0x17,0xEF,0x8D,0x33,0x19);

#ifdef __cplusplus

class DECLSPEC_UUID("F829344F-B49F-43a3-AC93-E817EF8D3319")
Nurbs3dParam;
#endif

DEFINE_GUID(CLSID_NurbsKnotCollection,0x81317653,0x9BBA,0x46fe,0x98,0x77,0xAE,0xEE,0x62,0xBD,0x8A,0xA4);

#ifdef __cplusplus

class DECLSPEC_UUID("81317653-9BBA-46fe-9877-AEEE62BD8AA4")
NurbsKnotCollection;
#endif

DEFINE_GUID(CLSID_NurbsPoint3dCollCollection,0xA2BD36E2,0xC99B,0x40fe,0xA6,0xA7,0xE5,0xA9,0xCC,0xDC,0xF6,0x3D);

#ifdef __cplusplus

class DECLSPEC_UUID("A2BD36E2-C99B-40fe-A6A7-E5A9CCDCF63D")
NurbsPoint3dCollCollection;
#endif

DEFINE_GUID(CLSID_NurbsPoint3dCollection,0x25AE92BA,0x055F,0x431e,0xAC,0x3E,0xEA,0x2E,0x79,0x3D,0x44,0x6C);

#ifdef __cplusplus

class DECLSPEC_UUID("25AE92BA-055F-431e-AC3E-EA2E793D446C")
NurbsPoint3dCollection;
#endif

DEFINE_GUID(CLSID_ViewProjection,0x0CA54EDF,0xBC8C,0x4a6a,0x94,0xCF,0xED,0xBA,0x74,0xA6,0xFA,0x00);

#ifdef __cplusplus

class DECLSPEC_UUID("0CA54EDF-BC8C-4a6a-94CF-EDBA74A6FA00")
ViewProjection;
#endif

DEFINE_GUID(CLSID_ViewProjectionCollection,0x9A3E39C6,0xB6AB,0x42cf,0x9F,0xBD,0xAC,0x05,0xF0,0xB4,0xB1,0x61);

#ifdef __cplusplus

class DECLSPEC_UUID("9A3E39C6-B6AB-42cf-9FBD-AC05F0B4B161")
ViewProjectionCollection;
#endif

DEFINE_GUID(CLSID_SelectionMng,0x39EE8E9D,0xC228,0x4f61,0x9F,0x66,0xDD,0x58,0xF2,0x0C,0xD2,0x24);

#ifdef __cplusplus

class DECLSPEC_UUID("39EE8E9D-C228-4f61-9F66-DD58F20CD224")
SelectionMng;
#endif

DEFINE_GUID(CLSID_ChooseMng,0x2280DF87,0x5688,0x4082,0x8F,0xAE,0x6E,0x4C,0x84,0x24,0x93,0x52);

#ifdef __cplusplus

class DECLSPEC_UUID("2280DF87-5688-4082-8FAE-6E4C84249352")
ChooseMng;
#endif

DEFINE_GUID(CLSID_Arc3dParam,0x4CA2655E,0xEC4E,0x433c,0x97,0x06,0x8E,0x38,0x64,0xD5,0xDB,0xD2);

#ifdef __cplusplus

class DECLSPEC_UUID("4CA2655E-EC4E-433c-9706-8E3864D5DBD2")
Arc3dParam;
#endif

DEFINE_GUID(CLSID_TreeNodeParam,0x05A4578F,0xA41F,0x48f2,0x92,0xF9,0xA0,0xF0,0x85,0x6B,0xCB,0xC0);

#ifdef __cplusplus

class DECLSPEC_UUID("05A4578F-A41F-48f2-92F9-A0F0856BCBC0")
TreeNodeParam;
#endif

DEFINE_GUID(CLSID_AssociationViewParam,0x7A86E2BA,0x6DE3,0x4db3,0xAE,0xB6,0x97,0x38,0xDA,0xA6,0x9C,0xFC);

#ifdef __cplusplus

class DECLSPEC_UUID("7A86E2BA-6DE3-4db3-AEB6-9738DAA69CFC")
AssociationViewParam;
#endif

DEFINE_GUID(CLSID_ViewColorParam,0x34AFC10F,0x4FBB,0x40f0,0x8A,0x23,0x74,0xB1,0x25,0x0F,0x42,0xEF);

#ifdef __cplusplus

class DECLSPEC_UUID("34AFC10F-4FBB-40f0-8A23-74B1250F42EF")
ViewColorParam;
#endif

DEFINE_GUID(CLSID_AxisLineParam,0x705962E9,0x5E9B,0x4379,0x85,0x04,0xFA,0x75,0x4D,0x11,0xFC,0x66);

#ifdef __cplusplus

class DECLSPEC_UUID("705962E9-5E9B-4379-8504-FA754D11FC66")
AxisLineParam;
#endif

DEFINE_GUID(CLSID_TextDocumentParam,0x02286DB8,0x98D4,0x4d0b,0x97,0xD7,0xE2,0xEE,0xD3,0x2E,0xEB,0xD6);

#ifdef __cplusplus

class DECLSPEC_UUID("02286DB8-98D4-4d0b-97D7-E2EED32EEBD6")
TextDocumentParam;
#endif

DEFINE_GUID(CLSID_RemoteElementParam,0xF37A40F6,0x4E15,0x4e01,0xB4,0xF0,0x25,0xC4,0x91,0x75,0x22,0x7A);

#ifdef __cplusplus

class DECLSPEC_UUID("F37A40F6-4E15-4e01-B4F0-25C49175227A")
RemoteElementParam;
#endif

DEFINE_GUID(CLSID_DeletedCopyCollection,0x9807E658,0x53C5,0x4445,0xA3,0x89,0x3F,0x80,0x0F,0xB3,0xBB,0x8A);

#ifdef __cplusplus

class DECLSPEC_UUID("9807E658-53C5-4445-A389-3F800FB3BB8A")
DeletedCopyCollection;
#endif

DEFINE_GUID(CLSID_CopyObjectParam,0x8867DEAC,0xC699,0x41b6,0xBD,0x3D,0xC4,0x70,0xA5,0x2B,0x1B,0x9C);

#ifdef __cplusplus

class DECLSPEC_UUID("8867DEAC-C699-41b6-BD3D-C470A52B1B9C")
CopyObjectParam;
#endif

DEFINE_GUID(CLSID_ThreadDefinition,0x2A8AE692,0x45A3,0x4c22,0x88,0xB5,0x76,0xB4,0x83,0x0F,0x22,0x35);

#ifdef __cplusplus

class DECLSPEC_UUID("2A8AE692-45A3-4c22-88B5-76B4830F2235")
ThreadDefinition;
#endif

DEFINE_GUID(CLSID_OverlapObjectOptions,0xE41D019C,0x2D40,0x452d,0x8F,0x7B,0x3F,0xB5,0xFE,0x2D,0x3E,0x8E);

#ifdef __cplusplus

class DECLSPEC_UUID("E41D019C-2D40-452d-8F7B-3FB5FE2D3E8E")
OverlapObjectOptions;
#endif

DEFINE_GUID(CLSID_Attribute3D,0x620BFE17,0x2F66,0x4102,0xA8,0xEA,0x4D,0xD3,0x3C,0x08,0x10,0x61);

#ifdef __cplusplus

class DECLSPEC_UUID("620BFE17-2F66-4102-A8EA-4DD33C081061")
Attribute3D;
#endif

DEFINE_GUID(CLSID_Attribute3DCollection,0x17CAB61A,0x770A,0x4fce,0x8F,0xC5,0xF2,0x91,0xCD,0xAD,0xF8,0x0A);

#ifdef __cplusplus

class DECLSPEC_UUID("17CAB61A-770A-4fce-8FC5-F291CDADF80A")
Attribute3DCollection;
#endif

DEFINE_GUID(CLSID_ComponentPositioner,0x7DAB018D,0x9EF9,0x4d0f,0x84,0xBB,0x54,0xB3,0xDC,0x05,0x58,0xD3);

#ifdef __cplusplus

class DECLSPEC_UUID("7DAB018D-9EF9-4d0f-84BB-54B3DC0558D3")
ComponentPositioner;
#endif

DEFINE_GUID(CLSID_ObjectsFilter3D,0xABBA6CE1,0xCB4C,0x4a32,0x98,0xB4,0xB6,0x39,0x35,0x2C,0x75,0xBA);

#ifdef __cplusplus

class DECLSPEC_UUID("ABBA6CE1-CB4C-4a32-98B4-B639352C75BA")
ObjectsFilter3D;
#endif

DEFINE_GUID(CLSID_ParametrizationParam,0xABBA6CE1,0xCB4C,0x4a32,0x98,0xB4,0xB6,0x39,0x35,0x2C,0x75,0xBB);

#ifdef __cplusplus

class DECLSPEC_UUID("ABBA6CE1-CB4C-4a32-98B4-B639352C75BB")
ParametrizationParam;
#endif

DEFINE_GUID(CLSID_Macro3DDefinition,0xDC7D3EDF,0x80EE,0x4baf,0x93,0x0F,0xF2,0x21,0xAC,0x7E,0x5A,0x7A);

#ifdef __cplusplus

class DECLSPEC_UUID("DC7D3EDF-80EE-4baf-930F-F221AC7E5A7A")
Macro3DDefinition;
#endif

DEFINE_GUID(CLSID_AxisConefaceDefinition,0xC6BD0D90,0xC8BE,0x4378,0x9A,0x71,0x83,0x55,0x97,0xA7,0xD1,0xE9);

#ifdef __cplusplus

class DECLSPEC_UUID("C6BD0D90-C8BE-4378-9A71-835597A7D1E9")
AxisConefaceDefinition;
#endif

DEFINE_GUID(CLSID_UnionComponentsDefinition,0xBA53B169,0x1DC8,0x4cca,0xBA,0xA4,0x27,0xB0,0xFB,0x87,0xAE,0x26);

#ifdef __cplusplus

class DECLSPEC_UUID("BA53B169-1DC8-4cca-BAA4-27B0FB87AE26")
UnionComponentsDefinition;
#endif

DEFINE_GUID(CLSID_MoldCavityDefinition,0xFC4D7C29,0xC608,0x44d5,0xB9,0x27,0x1E,0xC9,0xFC,0x14,0x7B,0x18);

#ifdef __cplusplus

class DECLSPEC_UUID("FC4D7C29-C608-44d5-B927-1EC9FC147B18")
MoldCavityDefinition;
#endif

DEFINE_GUID(CLSID_Coordinate3dCollection,0x17150452,0x8320,0x4721,0x97,0x65,0x13,0x35,0x3F,0x08,0xAE,0x7E);

#ifdef __cplusplus

class DECLSPEC_UUID("17150452-8320-4721-9765-13353F08AE7E")
Coordinate3dCollection;
#endif

DEFINE_GUID(CLSID_IntersectionResult,0xED41E352,0xE8A8,0x4b12,0x89,0x3F,0x17,0xF0,0x64,0x98,0x5C,0xEE);

#ifdef __cplusplus

class DECLSPEC_UUID("ED41E352-E8A8-4b12-893F-17F064985CEE")
IntersectionResult;
#endif

DEFINE_GUID(CLSID_PlaneMiddleDefinition,0xD7844AFC,0x91B0,0x4c08,0x86,0x22,0x0E,0x45,0x95,0xBA,0x65,0x51);

#ifdef __cplusplus

class DECLSPEC_UUID("D7844AFC-91B0-4c08-8622-0E4595BA6551")
PlaneMiddleDefinition;
#endif

DEFINE_GUID(CLSID_ControlPointDefinition,0x3DA1922B,0x1FAB,0x4990,0x8D,0x9A,0x8F,0x03,0xAF,0xDB,0x18,0xD9);

#ifdef __cplusplus

class DECLSPEC_UUID("3DA1922B-1FAB-4990-8D9A-8F03AFDB18D9")
ControlPointDefinition;
#endif

DEFINE_GUID(CLSID_ConjunctivePointDefinition,0x88BD7F23,0x21A6,0x4c90,0xB7,0x84,0x0B,0x38,0xFB,0x7F,0xD0,0xF3);

#ifdef __cplusplus

class DECLSPEC_UUID("88BD7F23-21A6-4c90-B784-0B38FB7FD0F3")
ConjunctivePointDefinition;
#endif

DEFINE_GUID(CLSID_ChooseBodies,0x9B59D68B,0x3502,0x4fe9,0x9E,0x09,0xAC,0x69,0x14,0x43,0xBF,0x3E);

#ifdef __cplusplus

class DECLSPEC_UUID("9B59D68B-3502-4fe9-9E09-AC691443BF3E")
ChooseBodies;
#endif

DEFINE_GUID(CLSID_AggregateDefinition,0x8E8A474C,0x5ED5,0x4c72,0xAE,0xD6,0xEB,0x04,0xC3,0x17,0xC7,0xDE);

#ifdef __cplusplus

class DECLSPEC_UUID("8E8A474C-5ED5-4c72-AED6-EB04C317C7DE")
AggregateDefinition;
#endif

DEFINE_GUID(CLSID_ChangeLeaderParam,0xBC662523,0x43E2,0x41ff,0xA0,0x4B,0x3D,0x92,0xF8,0x09,0x7D,0xF9);

#ifdef __cplusplus

class DECLSPEC_UUID("BC662523-43E2-41ff-A04B-3D92F8097DF9")
ChangeLeaderParam;
#endif

#ifndef __ksChooseParts_DISPINTERFACE_DEFINED__
#define __ksChooseParts_DISPINTERFACE_DEFINED__

/* dispinterface ksChooseParts */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksChooseParts,0x08B7A093,0xD829,0x44a9,0xA2,0x38,0x2B,0xFF,0x31,0x77,0x01,0x12);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("08B7A093-D829-44a9-A238-2BFF31770112")
    ksChooseParts : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksChoosePartsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksChooseParts * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksChooseParts * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksChooseParts * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksChooseParts * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksChooseParts * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksChooseParts * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksChooseParts * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksChoosePartsVtbl;

    interface ksChooseParts
    {
        CONST_VTBL struct ksChoosePartsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksChooseParts_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksChooseParts_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksChooseParts_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksChooseParts_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksChooseParts_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksChooseParts_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksChooseParts_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksChooseParts_DISPINTERFACE_DEFINED__ */


DEFINE_GUID(CLSID_ChooseParts,0x9FD4E52C,0x5B9B,0x4d07,0xB7,0x88,0x8D,0x18,0x8E,0xF9,0x40,0xFD);

#ifdef __cplusplus

class DECLSPEC_UUID("9FD4E52C-5B9B-4d07-B788-8D188EF940FD")
ChooseParts;
#endif

#ifndef __ksBodyParts_DISPINTERFACE_DEFINED__
#define __ksBodyParts_DISPINTERFACE_DEFINED__

/* dispinterface ksBodyParts */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksBodyParts,0x1E3E9348,0xDB9B,0x4967,0xA6,0x2A,0xB4,0x12,0xDF,0x95,0x14,0x6A);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1E3E9348-DB9B-4967-A62A-B412DF95146A")
    ksBodyParts : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksBodyPartsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksBodyParts * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksBodyParts * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksBodyParts * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksBodyParts * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksBodyParts * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksBodyParts * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksBodyParts * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksBodyPartsVtbl;

    interface ksBodyParts
    {
        CONST_VTBL struct ksBodyPartsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksBodyParts_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksBodyParts_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksBodyParts_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksBodyParts_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksBodyParts_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksBodyParts_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksBodyParts_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksBodyParts_DISPINTERFACE_DEFINED__ */


#ifndef __ksEmbodiment3D_DISPINTERFACE_DEFINED__
#define __ksEmbodiment3D_DISPINTERFACE_DEFINED__

/* dispinterface ksEmbodiment3D */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksEmbodiment3D,0x4F6A3404,0x8F06,0x4363,0xAF,0x66,0x4C,0xDC,0xC4,0xE0,0x94,0x62);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("4F6A3404-8F06-4363-AF66-4CDCC4E09462")
    ksEmbodiment3D : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksEmbodiment3DVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksEmbodiment3D * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksEmbodiment3D * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksEmbodiment3D * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksEmbodiment3D * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksEmbodiment3D * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksEmbodiment3D * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksEmbodiment3D * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksEmbodiment3DVtbl;

    interface ksEmbodiment3D
    {
        CONST_VTBL struct ksEmbodiment3DVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksEmbodiment3D_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksEmbodiment3D_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksEmbodiment3D_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksEmbodiment3D_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksEmbodiment3D_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksEmbodiment3D_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksEmbodiment3D_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksEmbodiment3D_DISPINTERFACE_DEFINED__ */


#ifndef __ksSnapInfo_DISPINTERFACE_DEFINED__
#define __ksSnapInfo_DISPINTERFACE_DEFINED__

/* dispinterface ksSnapInfo */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSnapInfo,0xFEC5FF26,0x3F47,0x49b2,0xAB,0xAE,0x55,0x63,0xA4,0xD7,0xAD,0x94);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FEC5FF26-3F47-49b2-ABAE-5563A4D7AD94")
    ksSnapInfo : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSnapInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSnapInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSnapInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSnapInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSnapInfo * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSnapInfo * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSnapInfo * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSnapInfo * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSnapInfoVtbl;

    interface ksSnapInfo
    {
        CONST_VTBL struct ksSnapInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSnapInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSnapInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSnapInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSnapInfo_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSnapInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSnapInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSnapInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSnapInfo_DISPINTERFACE_DEFINED__ */


#ifndef __ksSaveToPreviusParam_DISPINTERFACE_DEFINED__
#define __ksSaveToPreviusParam_DISPINTERFACE_DEFINED__

/* dispinterface ksSaveToPreviusParam */
/* [helpstring][uuid] */ 


DEFINE_GUID(DIID_ksSaveToPreviusParam,0xCF0E948C,0x5A9D,0x49A3,0xBC,0x86,0xEE,0xA3,0x05,0x01,0x93,0xE0);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("CF0E948C-5A9D-49A3-BC86-EEA3050193E0")
    ksSaveToPreviusParam : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ksSaveToPreviusParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ksSaveToPreviusParam * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ksSaveToPreviusParam * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ksSaveToPreviusParam * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ksSaveToPreviusParam * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ksSaveToPreviusParam * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ksSaveToPreviusParam * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ksSaveToPreviusParam * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } ksSaveToPreviusParamVtbl;

    interface ksSaveToPreviusParam
    {
        CONST_VTBL struct ksSaveToPreviusParamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ksSaveToPreviusParam_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ksSaveToPreviusParam_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ksSaveToPreviusParam_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ksSaveToPreviusParam_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ksSaveToPreviusParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ksSaveToPreviusParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ksSaveToPreviusParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ksSaveToPreviusParam_DISPINTERFACE_DEFINED__ */

#endif /* __Kompas6API5_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


